// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Leopard.Repository
{
    public partial class LeopardDbContext : DbContext, ILeopardDbContext
    {
        private readonly IConfiguration _configuration;

        public LeopardDbContext()
        {
            InitializePartial();
        }

        public LeopardDbContext(DbContextOptions<LeopardDbContext> options)
            : base(options)
        {
            InitializePartial();
        }

        public LeopardDbContext(IConfiguration configuration)
        {
            _configuration = configuration;
            InitializePartial();
        }

        public DbSet<A> A { get; set; } // a
        public DbSet<Advertis> Advertis { get; set; } // Advertises
        public DbSet<AdvertiseCategory> AdvertiseCategories { get; set; } // AdvertiseCategories
        public DbSet<ApiResource> ApiResources { get; set; } // ApiResources
        public DbSet<ApiResourceClaim> ApiResourceClaims { get; set; } // ApiResourceClaims
        public DbSet<ApiResourceProperty> ApiResourceProperties { get; set; } // ApiResourceProperties
        public DbSet<ApiResourceScope> ApiResourceScopes { get; set; } // ApiResourceScopes
        public DbSet<ApiResourceSecret> ApiResourceSecrets { get; set; } // ApiResourceSecrets
        public DbSet<ApiScope> ApiScopes { get; set; } // ApiScopes
        public DbSet<ApiScopeClaim> ApiScopeClaims { get; set; } // ApiScopeClaims
        public DbSet<ApiScopeProperty> ApiScopeProperties { get; set; } // ApiScopeProperties
        public DbSet<BaseInfo> BaseInfoes { get; set; } // BaseInfos
        public DbSet<BaseInfoCategory> BaseInfoCategories { get; set; } // BaseInfoCategories
        public DbSet<BroadcastFrame> BroadcastFrames { get; set; } // BroadcastFrames
        public DbSet<BroadcastProgramType> BroadcastProgramTypes { get; set; } // BroadcastProgramTypes
        public DbSet<Calendar> Calendars { get; set; } // Calendars
        public DbSet<ChannelGroup> ChannelGroups { get; set; } // ChannelGroups
        public DbSet<City> Cities { get; set; } // Cities
        public DbSet<Client> Clients { get; set; } // Clients
        public DbSet<ClientClaim> ClientClaims { get; set; } // ClientClaims
        public DbSet<ClientCorsOrigin> ClientCorsOrigins { get; set; } // ClientCorsOrigins
        public DbSet<ClientGrantType> ClientGrantTypes { get; set; } // ClientGrantTypes
        public DbSet<ClientIdPRestriction> ClientIdPRestrictions { get; set; } // ClientIdPRestrictions
        public DbSet<ClientPostLogoutRedirectUri> ClientPostLogoutRedirectUris { get; set; } // ClientPostLogoutRedirectUris
        public DbSet<ClientProperty> ClientProperties { get; set; } // ClientProperties
        public DbSet<ClientRedirectUri> ClientRedirectUris { get; set; } // ClientRedirectUris
        public DbSet<ClientScope> ClientScopes { get; set; } // ClientScopes
        public DbSet<ClientSecret> ClientSecrets { get; set; } // ClientSecrets
        public DbSet<CondactorChannelProgSubCategory> CondactorChannelProgSubCategories { get; set; } // CondactorChannelProgSubCategory
        public DbSet<ConductorAutoFileNumber> ConductorAutoFileNumbers { get; set; } // ConductorAutoFileNumber
        public DbSet<ConductorAzanTime> ConductorAzanTimes { get; set; } // ConductorAzanTimes
        public DbSet<ConductorBox> ConductorBoxes { get; set; } // ConductorBox
        public DbSet<ConductorBoxItem> ConductorBoxItems { get; set; } // ConductorBoxItems
        public DbSet<ConductorBoxRequest> ConductorBoxRequests { get; set; } // ConductorBoxRequest
        public DbSet<ConductorBoxRequesterUnit> ConductorBoxRequesterUnits { get; set; } // ConductorBoxRequesterUnit
        public DbSet<ConductorBoxRequestStatusDefinition> ConductorBoxRequestStatusDefinitions { get; set; } // ConductorBoxRequestStatusDefinition
        public DbSet<ConductorBoxTemplate> ConductorBoxTemplates { get; set; } // ConductorBoxTemplates
        public DbSet<ConductorBoxType> ConductorBoxTypes { get; set; } // ConductorBoxTypes
        public DbSet<ConductorBroadcastCertificate> ConductorBroadcastCertificates { get; set; } // ConductorBroadcastCertificates
        public DbSet<ConductorBroadcastLicens> ConductorBroadcastLicens { get; set; } // ConductorBroadcastLicenses
        public DbSet<ConductorChangeLog> ConductorChangeLogs { get; set; } // ConductorChangeLogs
        public DbSet<ConductorChannelProgCategory> ConductorChannelProgCategories { get; set; } // ConductorChannelProgCategory
        public DbSet<ConductorChannelProgram> ConductorChannelPrograms { get; set; } // ConductorChannelPrograms
        public DbSet<ConductorChannelProgramAgent> ConductorChannelProgramAgents { get; set; } // ConductorChannelProgramAgents
        public DbSet<ConductorChannelProgramAgeRanx> ConductorChannelProgramAgeRanges { get; set; } // ConductorChannelProgramAgeRanges
        public DbSet<ConductorChannelProgramApprovalLog> ConductorChannelProgramApprovalLogs { get; set; } // ConductorChannelProgramApprovalLogs
        public DbSet<ConductorChannelProgramEvent> ConductorChannelProgramEvents { get; set; } // ConductorChannelProgramEvents
        public DbSet<ConductorChannelProgramInfo> ConductorChannelProgramInfoes { get; set; } // ConductorChannelProgramInfo
        public DbSet<ConductorChannelProgramInTag> ConductorChannelProgramInTags { get; set; } // ConductorChannelProgramInTags
        public DbSet<ConductorChannelProgramSubject> ConductorChannelProgramSubjects { get; set; } // ConductorChannelProgramSubjects
        public DbSet<ConductorChannelProgramSupplyType> ConductorChannelProgramSupplyTypes { get; set; } // ConductorChannelProgramSupplyTypes
        public DbSet<ConductorChannelProgramTag> ConductorChannelProgramTags { get; set; } // ConductorChannelProgramTags
        public DbSet<ConductorDispatchDetail> ConductorDispatchDetails { get; set; } // ConductorDispatchDetails
        public DbSet<ConductorItemDispatch> ConductorItemDispatches { get; set; } // ConductorItemDispatch
        public DbSet<ConductorItemDispatchAgent> ConductorItemDispatchAgents { get; set; } // ConductorItemDispatchAgents
        public DbSet<ConductorItemDispatchEvent> ConductorItemDispatchEvents { get; set; } // ConductorItemDispatchEvents
        public DbSet<ConductorItemDispatchLog> ConductorItemDispatchLogs { get; set; } // ConductorItemDispatchLogs
        public DbSet<ConductorItemDispatchSubject> ConductorItemDispatchSubjects { get; set; } // ConductorItemDispatchSubjects
        public DbSet<ConductorOfogh> ConductorOfoghs { get; set; } // ConductorOfogh
        public DbSet<ConductorProgramApproach> ConductorProgramApproaches { get; set; } // ConductorProgramApproachs
        public DbSet<ConductorProgramType> ConductorProgramTypes { get; set; } // ConductorProgramTypes
        public DbSet<ConductorSendHistory> ConductorSendHistories { get; set; } // ConductorSendHistory
        public DbSet<ConductorSubTitle> ConductorSubTitles { get; set; } // ConductorSubTitles
        public DbSet<ConductorTable> ConductorTables { get; set; } // ConductorTable
        public DbSet<ConductorTablePakhsh> ConductorTablePakhshes { get; set; } // ConductorTablePakhsh
        public DbSet<ConductorTaminGroup> ConductorTaminGroups { get; set; } // ConductorTaminGroups
        public DbSet<ContentsTabbed> ContentsTabbeds { get; set; } // ContentsTabbed
        public DbSet<ContentTabGroup> ContentTabGroups { get; set; } // ContentTabGroups
        public DbSet<CorrectionDataSamtHistory> CorrectionDataSamtHistories { get; set; } // CorrectionDataSamtHistory
        public DbSet<DateFormat> DateFormats { get; set; } // DateFormats
        public DbSet<DeviceCode> DeviceCodes { get; set; } // DeviceCodes
        public DbSet<DispatchTypeValue> DispatchTypeValues { get; set; } // DispatchTypeValue
        public DbSet<DynamicPage> DynamicPages { get; set; } // DynamicPages
        public DbSet<DynamicPageCategory> DynamicPageCategories { get; set; } // DynamicPageCategories
        public DbSet<DynamicPageFile> DynamicPageFiles { get; set; } // DynamicPageFiles
        public DbSet<EpgNetwork> EpgNetworks { get; set; } // EpgNetworks
        public DbSet<FidsSamtRequestLog> FidsSamtRequestLogs { get; set; } // FIDS_SAMT_RequestLogs
        public DbSet<FidsSamtRequestLogStatu> FidsSamtRequestLogStatus { get; set; } // FIDS_SAMT_RequestLogStatus
        public DbSet<FidsTelavatBuilderProduction> FidsTelavatBuilderProductions { get; set; } // FIDS_TelavatBuilderProductions
        public DbSet<FidsTelavatBuilderReview> FidsTelavatBuilderReviews { get; set; } // FIDS_TelavatBuilderReviews
        public DbSet<FidsTelavatRequestMedia> FidsTelavatRequestMedias { get; set; } // FIDS_TelavatRequestMedia
        public DbSet<FidsTelavatRequestPayment> FidsTelavatRequestPayments { get; set; } // FIDS_TelavatRequestPayments
        public DbSet<HijriCalendarAdjustment> HijriCalendarAdjustments { get; set; } // HijriCalendarAdjustments
        public DbSet<IdentityResource> IdentityResources { get; set; } // IdentityResources
        public DbSet<IdentityResourceClaim> IdentityResourceClaims { get; set; } // IdentityResourceClaims
        public DbSet<IdentityResourceProperty> IdentityResourceProperties { get; set; } // IdentityResourceProperties
        public DbSet<ImageAlbum> ImageAlbums { get; set; } // ImageAlbums
        public DbSet<ImageGallery> ImageGalleries { get; set; } // ImageGalleries
        public DbSet<ImagePhoto> ImagePhotoes { get; set; } // ImagePhotos
        public DbSet<ImageViewer> ImageViewers { get; set; } // ImageViewer
        public DbSet<IndexBefore1400> IndexBefore1400 { get; set; } // IndexBefore1400
        public DbSet<InitProgramSubject> InitProgramSubjects { get; set; } // Init_ProgramSubjects
        public DbSet<InsideBaseInfo> InsideBaseInfoes { get; set; } // InsideBaseInfo
        public DbSet<InternalBaravord> InternalBaravords { get; set; } // InternalBaravords
        public DbSet<InternalBaravordLog> InternalBaravordLogs { get; set; } // InternalBaravordLogs
        public DbSet<InternalResource> InternalResources { get; set; } // InternalResource
        public DbSet<IranHijriCalendarSetting> IranHijriCalendarSettings { get; set; } // IranHijriCalendarSetting
        public DbSet<Link> Links { get; set; } // Links
        public DbSet<LinkCategory> LinkCategories { get; set; } // LinkCategories
        public DbSet<MainMenu> MainMenus { get; set; } // MainMenus
        public DbSet<MainQuality> MainQualities { get; set; } // MainQualities
        public DbSet<MeEpg> MeEpgs { get; set; } // ME_Epg
        public DbSet<MeMedium> MeMediums { get; set; } // ME_Media
        public DbSet<Menu> Menus { get; set; } // Menus
        public DbSet<MojriEducation> MojriEducations { get; set; } // MojriEducations
        public DbSet<MojriFilmography> MojriFilmographies { get; set; } // MojriFilmographys
        public DbSet<MojriMedia> MojriMedias { get; set; } // MojriMedias
        public DbSet<MojriReprimand> MojriReprimands { get; set; } // MojriReprimands
        public DbSet<News> News { get; set; } // News
        public DbSet<News2> News2 { get; set; } // News2
        public DbSet<NewsAccessUser> NewsAccessUsers { get; set; } // NewsAccessUsers
        public DbSet<NewsAgenciesUser> NewsAgenciesUsers { get; set; } // NewsAgenciesUsers
        public DbSet<NewsAgency> NewsAgencies { get; set; } // NewsAgencies
        public DbSet<NewsComment> NewsComments { get; set; } // NewsComments
        public DbSet<NewsFeed> NewsFeeds { get; set; } // NewsFeeds
        public DbSet<NewsFile> NewsFiles { get; set; } // NewsFiles
        public DbSet<NewsLetterNew> NewsLetterNews { get; set; } // NewsLetterNews
        public DbSet<NewsLetterUser> NewsLetterUsers { get; set; } // NewsLetterUsers
        public DbSet<NewsLog> NewsLogs { get; set; } // NewsLogs
        public DbSet<NewsPriority> NewsPriorities { get; set; } // NewsPriority
        public DbSet<NewsRating> NewsRatings { get; set; } // NewsRating
        public DbSet<NewsRelated> NewsRelateds { get; set; } // NewsRelated
        public DbSet<NewsRss> NewsRsses { get; set; } // NewsRss
        public DbSet<NewsTag> NewsTags { get; set; } // NewsTags
        public DbSet<OauthLog> OauthLogs { get; set; } // OauthLogs
        public DbSet<OldTelavatGrades2> OldTelavatGrades2 { get; set; } // OLD_TelavatGrades2
        public DbSet<PageTemplate> PageTemplates { get; set; } // PageTemplates
        public DbSet<PakhshChannelLocation> PakhshChannelLocations { get; set; } // Pakhsh_ChannelLocations
        public DbSet<PakhshChannelSetting> PakhshChannelSettings { get; set; } // Pakhsh_ChannelSettings
        public DbSet<PakhshCooperationType> PakhshCooperationTypes { get; set; } // Pakhsh_CooperationTypes
        public DbSet<PakhshEncouragementPunishmentTitle> PakhshEncouragementPunishmentTitles { get; set; } // Pakhsh_EncouragementPunishmentTitles
        public DbSet<PakhshEncouragmentUser> PakhshEncouragmentUsers { get; set; } // Pakhsh_EncouragmentUsers
        public DbSet<PakhshManageShift> PakhshManageShifts { get; set; } // Pakhsh_ManageShifts
        public DbSet<PakhshPerson> PakhshPersons { get; set; } // Pakhsh_Persons
        public DbSet<PakhshPersonTitle> PakhshPersonTitles { get; set; } // Pakhsh_PersonTitles
        public DbSet<PakhshShiftDetail> PakhshShiftDetails { get; set; } // Pakhsh_ShiftDetails
        public DbSet<PakhshShiftSetting> PakhshShiftSettings { get; set; } // Pakhsh_ShiftSettings
        public DbSet<PakhshTabletShift> PakhshTabletShifts { get; set; } // Pakhsh_TabletShifts
        public DbSet<PakhshTabletShiftLog> PakhshTabletShiftLogs { get; set; } // Pakhsh_TabletShiftLogs
        public DbSet<PersistedGrant> PersistedGrants { get; set; } // PersistedGrants
        public DbSet<Poll> Polls { get; set; } // Polls
        public DbSet<Portal> Portals { get; set; } // Portals
        public DbSet<PortalAddress> PortalAddresses { get; set; } // PortalAddresses
        public DbSet<ProcessStatu> ProcessStatus { get; set; } // ProcessStatus
        public DbSet<ProcessStep> ProcessSteps { get; set; } // ProcessSteps
        public DbSet<ProductionTechnicalQuality> ProductionTechnicalQualities { get; set; } // ProductionTechnicalQualities
        public DbSet<ProgramAgeRanx> ProgramAgeRanges { get; set; } // ProgramAgeRanges
        public DbSet<ProgramAgeWarning> ProgramAgeWarnings { get; set; } // ProgramAgeWarnings
        public DbSet<ProgramLicenseItem> ProgramLicenseItems { get; set; } // ProgramLicenseItem
        public DbSet<Question> Questions { get; set; } // Questions
        public DbSet<RayanCounter> RayanCounters { get; set; } // RayanCounters
        public DbSet<RayanCounterOnlineUser> RayanCounterOnlineUsers { get; set; } // RayanCounterOnlineUsers
        public DbSet<RayanLinkSelection> RayanLinkSelections { get; set; } // RayanLinkSelections
        public DbSet<RayanMenu> RayanMenus { get; set; } // RayanMenus
        public DbSet<RayanModule> RayanModules { get; set; } // RayanModules
        public DbSet<RayanModuleDefinition> RayanModuleDefinitions { get; set; } // RayanModuleDefinitions
        public DbSet<RayanModuleDefinitionLog> RayanModuleDefinitionLogs { get; set; } // RayanModuleDefinitionLogs
        public DbSet<RayanModuleHelp> RayanModuleHelps { get; set; } // RayanModuleHelps
        public DbSet<RayanModuleProcess> RayanModuleProcesses { get; set; } // RayanModuleProcess
        public DbSet<RayanSetting> RayanSettings { get; set; } // RayanSettings
        public DbSet<RequestBackup> RequestBackups { get; set; } // requestBackup
        public DbSet<RequestBackup2> RequestBackup2 { get; set; } // requestBackup2
        public DbSet<RequestLogQuality> RequestLogQualities { get; set; } // RequestLogQualities
        public DbSet<SamtAfterProduction> SamtAfterProductions { get; set; } // SAMT_AfterProductions
        public DbSet<SamtAgent> SamtAgents { get; set; } // SAMT_Agents
        public DbSet<SamtApproach> SamtApproaches { get; set; } // SAMT_Approach
        public DbSet<SamtBaravordHistory> SamtBaravordHistories { get; set; } // SAMT_BaravordHistory
        public DbSet<SamtBaravordStatu> SamtBaravordStatus { get; set; } // SAMT_BaravordStatus
        public DbSet<SamtBaravordStatusCode> SamtBaravordStatusCodes { get; set; } // SAMT_BaravordStatusCodes
        public DbSet<SamtBeforeProduction> SamtBeforeProductions { get; set; } // SAMT_BeforeProductions
        public DbSet<SamtBeforeProductionAgent> SamtBeforeProductionAgents { get; set; } // SAMT_BeforeProductionAgents
        public DbSet<SamtBroadcastDuration> SamtBroadcastDurations { get; set; } // SAMT_BroadcastDuration
        public DbSet<SamtBroadcastLicense> SamtBroadcastLicenses { get; set; } // SAMT_BroadcastLicense
        public DbSet<SamtBuilderProduction> SamtBuilderProductions { get; set; } // SAMT_BuilderProductions
        public DbSet<SamtBuilderReview> SamtBuilderReviews { get; set; } // SAMT_BuilderReviews
        public DbSet<SamtCategoryCost> SamtCategoryCosts { get; set; } // SAMT_CategoryCosts
        public DbSet<SamtDuringProduction> SamtDuringProductions { get; set; } // SAMT_DuringProductions
        public DbSet<SamtEvent> SamtEvents { get; set; } // SAMT_Events
        public DbSet<SamtGrade> SamtGrades { get; set; } // SAMT_Grades
        public DbSet<SamtGroup> SamtGroups { get; set; } // SAMT_Groups
        public DbSet<SamtHistory> SamtHistories { get; set; } // SAMT_History
        public DbSet<SamtHistoryAgent> SamtHistoryAgents { get; set; } // SAMT_HistoryAgent
        public DbSet<SamtHrCooperationType> SamtHrCooperationTypes { get; set; } // SAMT_HRCooperationType
        public DbSet<SamtHrjob> SamtHrjobs { get; set; } // SAMT_HRJOB
        public DbSet<SamtMojri> SamtMojris { get; set; } // SAMT_Mojri
        public DbSet<SamtMonthlyBudget> SamtMonthlyBudgets { get; set; } // SAMT_MonthlyBudgets
        public DbSet<SamtPresentationType> SamtPresentationTypes { get; set; } // SAMT_PresentationType
        public DbSet<SamtProductionAdminReport> SamtProductionAdminReports { get; set; } // SAMT_ProductionAdminReports
        public DbSet<SamtProductionAgentStep> SamtProductionAgentSteps { get; set; } // SAMT_ProductionAgentSteps
        public DbSet<SamtProductionEvent> SamtProductionEvents { get; set; } // SAMT_ProductionEvents
        public DbSet<SamtProductionProgress> SamtProductionProgresses { get; set; } // SAMT_ProductionProgresses
        public DbSet<SamtProductionSetting> SamtProductionSettings { get; set; } // SAMT_ProductionSettings
        public DbSet<SamtProductionSettingField> SamtProductionSettingFields { get; set; } // SAMT_ProductionSettingFields
        public DbSet<SamtProductionSettingItem> SamtProductionSettingItems { get; set; } // SAMT_ProductionSettingItems
        public DbSet<SamtProductionSettingVersion> SamtProductionSettingVersions { get; set; } // SAMT_ProductionSettingVersions
        public DbSet<SamtProgramTransfer> SamtProgramTransfers { get; set; } // SAMT_ProgramTransfers
        public DbSet<SamtProposalAgeRange> SamtProposalAgeRanges { get; set; } // SAMT_ProposalAgeRange
        public DbSet<SamtProposalDpt> SamtProposalDpts { get; set; } // SAMTProposalDPT
        public DbSet<SamtProposalEducation> SamtProposalEducations { get; set; } // SAMT_ProposalEducation
        public DbSet<SamtProposalGender> SamtProposalGenders { get; set; } // SAMT_ProposalGender
        public DbSet<SamtProposalHistory> SamtProposalHistories { get; set; } // SAMT_ProposalHistory
        public DbSet<SamtProposalStatu> SamtProposalStatus { get; set; } // SAMT_ProposalStatus
        public DbSet<SamtProposalStatusCode> SamtProposalStatusCodes { get; set; } // SAMT_ProposalStatusCodes
        public DbSet<SamtRepeat> SamtRepeats { get; set; } // SAMT_Repeat
        public DbSet<SamtRequest> SamtRequests { get; set; } // SAMT_Requests
        public DbSet<SamtRequestAgent> SamtRequestAgents { get; set; } // SAMT_RequestAgents
        public DbSet<SamtRequestApproach> SamtRequestApproaches { get; set; } // SAMT_RequestApproach
        public DbSet<SamtRequestApproachTemp> SamtRequestApproachTemps { get; set; } // SAMT_RequestApproach_Temp
        public DbSet<SamtRequestCost> SamtRequestCosts { get; set; } // SAMT_RequestCosts
        public DbSet<SamtRequestEvent> SamtRequestEvents { get; set; } // SAMT_RequestEvents
        public DbSet<SamtRequestFile> SamtRequestFiles { get; set; } // SAMT_RequestFiles
        public DbSet<SamtRequestLog> SamtRequestLogs { get; set; } // SAMT_RequestLogs
        public DbSet<SamtRequestLogPlan> SamtRequestLogPlans { get; set; } // SAMT_RequestLogPlans
        public DbSet<SamtRequestLogStatu> SamtRequestLogStatus { get; set; } // SAMT_RequestLogStatus
        public DbSet<SamtRequestLogSubject> SamtRequestLogSubjects { get; set; } // SAMT_RequestLogSubjects
        public DbSet<SamtRequestMedia> SamtRequestMedias { get; set; } // SAMT_RequestMedia
        public DbSet<SamtRequestPayment> SamtRequestPayments { get; set; } // SAMT_RequestPayments
        public DbSet<SamtRequestProduction> SamtRequestProductions { get; set; } // SAMT_RequestProductions
        public DbSet<SamtRequestProductionEvent> SamtRequestProductionEvents { get; set; } // SAMT_RequestProductionEvents
        public DbSet<SamtRequestProductionProgress> SamtRequestProductionProgresses { get; set; } // SAMT_RequestProductionProgresses
        public DbSet<SamtRequestProductionSubject> SamtRequestProductionSubjects { get; set; } // SAMT_RequestProductionSubject
        public DbSet<SamtRequestResourceCost> SamtRequestResourceCosts { get; set; } // SAMT_RequestResourceCost
        public DbSet<SamtRequests3> SamtRequests3 { get; set; } // SAMT_Requests_3
        public DbSet<SamtRequestSubject> SamtRequestSubjects { get; set; } // SAMT_RequestSubjects
        public DbSet<SamtResourceCategory> SamtResourceCategories { get; set; } // SAMT_ResourceCategory
        public DbSet<SamtResourceCategoryType> SamtResourceCategoryTypes { get; set; } // SAMT_ResourceCategoryType
        public DbSet<SamtResourceType> SamtResourceTypes { get; set; } // SAMT_ResourceTypes
        public DbSet<SamtStructure> SamtStructures { get; set; } // SAMT_Structures
        public DbSet<SamtStructureType> SamtStructureTypes { get; set; } // SAMT_StructureTypes
        public DbSet<SamtSubFormat> SamtSubFormats { get; set; } // SAMT_SubFormat
        public DbSet<SamtSubject> SamtSubjects { get; set; } // SAMT_Subjects
        public DbSet<SamtSubStructure> SamtSubStructures { get; set; } // SAMT_SubStructures
        public DbSet<SamTUser> SamTUsers { get; set; } // SamT_Users
        public DbSet<Samtv2PlanTopic> Samtv2PlanTopic { get; set; } // SAMTV2_PlanTopics
        public DbSet<Samtv2PlanYearlyCommitment> Samtv2PlanYearlyCommitment { get; set; } // SAMTV2_PlanYearlyCommitment
        public DbSet<Samtv2ProgramTopic> Samtv2ProgramTopic { get; set; } // SAMTV2_ProgramTopics
        public DbSet<Samtv3Assessment> Samtv3Assessment { get; set; } // SAMTV3_Assessment
        public DbSet<Samtv3AssessmentAttachment> Samtv3AssessmentAttachment { get; set; } // SAMTV3_AssessmentAttachments
        public DbSet<Samtv3AssessmentStrengthsWeakness> Samtv3AssessmentStrengthsWeakness { get; set; } // SAMTV3_AssessmentStrengthsWeaknesses
        public DbSet<Samtv3Attachment> Samtv3Attachment { get; set; } // SAMTV3_Attachments
        public DbSet<Samtv3AttachmentType> Samtv3AttachmentType { get; set; } // SAMTV3_AttachmentTypes
        public DbSet<Samtv3BroadcastType> Samtv3BroadcastType { get; set; } // SAMTV3_BroadcastTypes
        public DbSet<Samtv3ImportanceDegree> Samtv3ImportanceDegree { get; set; } // SAMTV3_ImportanceDegrees
        public DbSet<Samtv3Monitoring> Samtv3Monitoring { get; set; } // SAMTV3_Monitoring
        public DbSet<Samtv3MonitoringAttachment> Samtv3MonitoringAttachment { get; set; } // SAMTV3_MonitoringAttachments
        public DbSet<Samtv3MonitoringKeyword> Samtv3MonitoringKeyword { get; set; } // SAMTV3_MonitoringKeywords
        public DbSet<Samtv3MonitoringSubject> Samtv3MonitoringSubject { get; set; } // SAMTV3_MonitoringSubjects
        public DbSet<Samtv3StrengthsWeakness> Samtv3StrengthsWeakness { get; set; } // SAMTV3_StrengthsWeaknesses
        public DbSet<Samtv3Topic> Samtv3Topic { get; set; } // SAMTV3_Topics
        public DbSet<ShabakeOmidClipArt> ShabakeOmidClipArts { get; set; } // shabakeOmidClipArts
        public DbSet<ShiftAgentReport> ShiftAgentReports { get; set; } // Shift_AgentReport
        public DbSet<ShiftCrewRewardFine> ShiftCrewRewardFines { get; set; } // Shift_CrewRewardFine
        public DbSet<ShiftCrewRewardFineReason> ShiftCrewRewardFineReasons { get; set; } // Shift_CrewRewardFineReason
        public DbSet<ShiftEmploymentDetail> ShiftEmploymentDetails { get; set; } // Shift_EmploymentDetail
        public DbSet<ShiftLocation> ShiftLocations { get; set; } // Shift_Location
        public DbSet<ShiftLog> ShiftLogs { get; set; } // Shift_Log
        public DbSet<ShiftRevisionProblem> ShiftRevisionProblems { get; set; } // Shift_RevisionProblem
        public DbSet<ShiftShift> ShiftShifts { get; set; } // Shift_Shift
        public DbSet<ShiftShiftTablet> ShiftShiftTablets { get; set; } // Shift_ShiftTablet
        public DbSet<ShiftShiftTabletCrew> ShiftShiftTabletCrews { get; set; } // Shift_ShiftTabletCrew
        public DbSet<ShiftShiftTabletCrewReplacement> ShiftShiftTabletCrewReplacements { get; set; } // Shift_ShiftTabletCrewReplacement
        public DbSet<ShiftShiftTabletLocation> ShiftShiftTabletLocations { get; set; } // Shift_ShiftTabletLocation
        public DbSet<ShiftTabletConductor> ShiftTabletConductors { get; set; } // ShiftTabletConductor
        public DbSet<ShiftTabletConductorChanx> ShiftTabletConductorChanges { get; set; } // Shift_TabletConductorChanges
        public DbSet<ShiftTabletNeededResource> ShiftTabletNeededResources { get; set; } // shiftTabletNeededResource
        public DbSet<ShiftTabletScriptSupervisorDescription> ShiftTabletScriptSupervisorDescriptions { get; set; } // Shift_TabletScriptSupervisorDescription
        public DbSet<SimaDataLog> SimaDataLogs { get; set; } // SimaDataLogs
        public DbSet<SimaRequest> SimaRequests { get; set; } // SIMA_Requests
        public DbSet<SimaTempid> SimaTempids { get; set; } // SIMA_TEMPIDS
        public DbSet<SimaTempstatu> SimaTempstatus { get; set; } // SIMA_TEMPSTATUS
        public DbSet<State> States { get; set; } // States
        public DbSet<Step5Removed> Step5Removed { get; set; } // step5_removed
        public DbSet<Step5Removed1> Step5Removed1 { get; set; } // step5_removed1
        public DbSet<Step6Removed> Step6Removed { get; set; } // step6_removed
        public DbSet<TblEpg> TblEpgs { get; set; } // tblEPG
        public DbSet<TelavatAgentPost> TelavatAgentPosts { get; set; } // TelavatAgentPosts
        public DbSet<TelavatAgentResourceType> TelavatAgentResourceTypes { get; set; } // TelavatAgentResourceTypes
        public DbSet<TelavatBandSound> TelavatBandSounds { get; set; } // TelavatBandSounds
        public DbSet<TelavatBudget> TelavatBudgets { get; set; } // TelavatBudgets
        public DbSet<TelavatBuilderReviewsItem> TelavatBuilderReviewsItems { get; set; } // TelavatBuilderReviewsItems
        public DbSet<TelavatBuilderReviewsTitrage> TelavatBuilderReviewsTitrages { get; set; } // TelavatBuilderReviewsTitrages
        public DbSet<TelavatBuilderReviewsWelle> TelavatBuilderReviewsWelles { get; set; } // TelavatBuilderReviewsWelle
        public DbSet<TelavatCategoryAge> TelavatCategoryAges { get; set; } // TelavatCategoryAges
        public DbSet<TelavatCertification> TelavatCertifications { get; set; } // TelavatCertifications
        public DbSet<TelavatContentPriority> TelavatContentPriorities { get; set; } // TelavatContentPriority
        public DbSet<TelavatEquipment> TelavatEquipments { get; set; } // TelavatEquipments
        public DbSet<TelavatEquipmentCategory> TelavatEquipmentCategories { get; set; } // TelavatEquipmentCategories
        public DbSet<TelavatGroupPermission> TelavatGroupPermissions { get; set; } // TelavatGroupPermissions
        public DbSet<TelavatGroupPermissionsTemp> TelavatGroupPermissionsTemps { get; set; } // TelavatGroupPermissions_temp
        public DbSet<TelavatGroupsBudget> TelavatGroupsBudgets { get; set; } // TelavatGroupsBudgets
        public DbSet<TelavatHumanOutNeed> TelavatHumanOutNeeds { get; set; } // TelavatHumanOutNeeds
        public DbSet<TelavatInfoProduction> TelavatInfoProductions { get; set; } // TelavatInfoProductions
        public DbSet<TelavatPaymentLog> TelavatPaymentLogs { get; set; } // TelavatPaymentLogs
        public DbSet<TelavatPaymentLogDetail> TelavatPaymentLogDetails { get; set; } // TelavatPaymentLogDetails
        public DbSet<TelavatPlaybackObserverReport> TelavatPlaybackObserverReports { get; set; } // TelavatPlaybackObserverReports
        public DbSet<TelavatPlaybackReport> TelavatPlaybackReports { get; set; } // TelavatPlaybackReports
        public DbSet<TelavatPlayStatu> TelavatPlayStatus { get; set; } // TelavatPlayStatus
        public DbSet<TelavatProductionAgent> TelavatProductionAgents { get; set; } // TelavatProductionAgents
        public DbSet<TelavatProductionCondition> TelavatProductionConditions { get; set; } // TelavatProductionConditions
        public DbSet<TelavatProductionReport> TelavatProductionReports { get; set; } // TelavatProductionReports
        public DbSet<TelavatProgramExpert> TelavatProgramExperts { get; set; } // TelavatProgramExperts
        public DbSet<TelavatProgramOccasion> TelavatProgramOccasions { get; set; } // TelavatProgramOccasions
        public DbSet<TelavatProgramStatu> TelavatProgramStatus { get; set; } // TelavatProgramStatus
        public DbSet<TelavatProgramStepPermission> TelavatProgramStepPermissions { get; set; } // TelavatProgramStepPermissions
        public DbSet<TelavatProgramType> TelavatProgramTypes { get; set; } // TelavatProgramTypes
        public DbSet<TelavatProgramVideo> TelavatProgramVideos { get; set; } // TelavatProgramVideos
        public DbSet<TelavatProgramVideoExpert> TelavatProgramVideoExperts { get; set; } // TelavatProgramVideoExperts
        public DbSet<TelavatRequestFileTag> TelavatRequestFileTags { get; set; } // TelavatRequestFileTags
        public DbSet<TelavatRequestsCondition> TelavatRequestsConditions { get; set; } // TelavatRequestsConditions
        public DbSet<TelavatRequestsStructureType> TelavatRequestsStructureTypes { get; set; } // TelavatRequestsStructureTypes
        public DbSet<TelavatRequestStatus> TelavatRequestStatus { get; set; } // TelavatRequestStatuses
        public DbSet<TelavatSmsLog> TelavatSmsLogs { get; set; } // TelavatSmsLogs
        public DbSet<TelavatSourceType> TelavatSourceTypes { get; set; } // TelavatSourceTypes
        public DbSet<TelavatStatus> TelavatStatus { get; set; } // TelavatStatuses
        public DbSet<TelavatStatusPermission> TelavatStatusPermissions { get; set; } // TelavatStatusPermissions
        public DbSet<TelavatStructure> TelavatStructures { get; set; } // TelavatStructures
        public DbSet<TelavatSubsidiarySubject> TelavatSubsidiarySubjects { get; set; } // TelavatSubsidiarySubjects
        public DbSet<TelavatSubtitleStatu> TelavatSubtitleStatus { get; set; } // TelavatSubtitleStatus
        public DbSet<TelavatSura> TelavatSuras { get; set; } // TelavatSuras
        public DbSet<TelavatTopic> TelavatTopics { get; set; } // TelavatTopics
        public DbSet<TelavatUnit> TelavatUnits { get; set; } // TelavatUnits
        public DbSet<TelavatWorkType> TelavatWorkTypes { get; set; } // TelavatWorkTypes
        public DbSet<TempBuilderProductionsDatesCorrected> TempBuilderProductionsDatesCorrecteds { get; set; } // TEMP_BuilderProductions_DatesCorrected
        public DbSet<TempStep5RemovedLoGs> TempStep5RemovedLoGs { get; set; } // temp_step5RemovedLOGs
        public DbSet<TempStep6RemovedLoGs> TempStep6RemovedLoGs { get; set; } // temp_step6RemovedLOGs
        public DbSet<TempStep7Removed> TempStep7Removed { get; set; } // temp_step7Removed
        public DbSet<TempStep8Removed> TempStep8Removed { get; set; } // temp_step8Removed
        public DbSet<TempStep8RemovedLoGs> TempStep8RemovedLoGs { get; set; } // temp_step8RemovedLOGs
        public DbSet<TempTopic> TempTopics { get; set; } // tempTopics
        public DbSet<TempVwBaravordSamt> TempVwBaravordSamts { get; set; } // TEMP_vwBaravordSamt
        public DbSet<TempVwSamTproposal> TempVwSamTproposals { get; set; } // TEMP_vwSAMTproposal
        public DbSet<Theme> Themes { get; set; } // Themes
        public DbSet<User> Users { get; set; } // Users
        public DbSet<UserPicture> UserPictures { get; set; } // UserPictures
        public DbSet<UserProfile> UserProfiles { get; set; } // UserProfiles
        public DbSet<UserProfileControl> UserProfileControls { get; set; } // UserProfileControls
        public DbSet<UserProfileDetail> UserProfileDetails { get; set; } // UserProfileDetails
        public DbSet<UserSecurityQuestion> UserSecurityQuestions { get; set; } // UserSecurityQuestions
        public DbSet<UsersLoginHistory> UsersLoginHistories { get; set; } // UsersLoginHistory
        public DbSet<UsersPortal> UsersPortals { get; set; } // UsersPortals
        public DbSet<UserType> UserTypes { get; set; } // UserTypes
        public DbSet<UserTypeGroup> UserTypeGroups { get; set; } // UserTypeGroups
        public DbSet<UserTypeGroupRoleMenu> UserTypeGroupRoleMenus { get; set; } // UserTypeGroupRoleMenus
        public DbSet<UserTypeGroupRoleModule> UserTypeGroupRoleModules { get; set; } // UserTypeGroupRoleModules
        public DbSet<UserUserType> UserUserTypes { get; set; } // UserUserTypes
        public DbSet<UserUserTypeGroup> UserUserTypeGroups { get; set; } // UserUserTypeGroups
        public DbSet<VAlbum> VAlbums { get; set; } // V_Albums
        public DbSet<VDynamicPageGroup> VDynamicPageGroups { get; set; } // V_DynamicPageGroups
        public DbSet<VDynamicPageSection> VDynamicPageSections { get; set; } // V_DynamicPageSections
        public DbSet<ViewSendFile1> ViewSendFile1 { get; set; } // View_SendFile1
        public DbSet<ViewSendFile2> ViewSendFile2 { get; set; } // View_SendFile2
        public DbSet<ViewSendFile3> ViewSendFile3 { get; set; } // View_SendFile3
        public DbSet<VwInternalBaravordLog> VwInternalBaravordLogs { get; set; } // VW_InternalBaravordLogs
        public DbSet<VwMojri> VwMojris { get; set; } // VWMojris
        public DbSet<VwPaymentDetailByBaseYear> VwPaymentDetailByBaseYears { get; set; } // vwPaymentDetailByBaseYear
        public DbSet<VwRequestProductionProgress> VwRequestProductionProgresses { get; set; } // VW_RequestProductionProgresses
        public DbSet<VwSamtBase> VwSamtBases { get; set; } // VW_SAMT_Base
        public DbSet<VwSamtBaseLog> VwSamtBaseLogs { get; set; } // VW_SAMT_BaseLog
        public DbSet<VwSamtBaseWithParticipation> VwSamtBaseWithParticipations { get; set; } // VW_SAMT_Base_With_Participation
        public DbSet<VwSamtBaseYearSima> VwSamtBaseYearSimas { get; set; } // VW_SAMT_BaseYear_SIMA
        public DbSet<VwSamtLogSubject> VwSamtLogSubjects { get; set; } // vw_samt_Log_subject
        public DbSet<VwSamtProductionLog> VwSamtProductionLogs { get; set; } // VW_SAMT_ProductionLog
        public DbSet<VwSamtProductionLog2> VwSamtProductionLog2 { get; set; } // VW_SAMT_ProductionLog2
        public DbSet<VwSamtProductionLogByDate> VwSamtProductionLogByDates { get; set; } // VW_SAMT_ProductionLog_byDate
        public DbSet<VwSamtProductionReviewLog> VwSamtProductionReviewLogs { get; set; } // VW_SAMT_ProductionReviewLog
        public DbSet<VwSamtProductionReviewLog2> VwSamtProductionReviewLog2 { get; set; } // VW_SAMT_ProductionReviewLog2
        public DbSet<VwSamtRequestSubject> VwSamtRequestSubjects { get; set; } // VW_SAMT_Request_Subjects
        public DbSet<VwSamtSubjectTree> VwSamtSubjectTrees { get; set; } // VW_SAMT_SubjectTree
        public DbSet<VwSamtTopicTime> VwSamtTopicTimes { get; set; } // vw_Samt_TopicTime
        public DbSet<VwSamtv2PlanYearlyCommitment> VwSamtv2PlanYearlyCommitment { get; set; } // VW_SAMTV2_PlanYearlyCommitment
        public DbSet<VwSamtv2ProgramTopic> VwSamtv2ProgramTopic { get; set; } // VW_SAMTV2_ProgramTopics
        public DbSet<Widget> Widgets { get; set; } // Widgets
        public DbSet<WidgetDefinition> WidgetDefinitions { get; set; } // WidgetDefinitions

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured && _configuration != null)
            {
                optionsBuilder.UseSqlServer(_configuration.GetConnectionString(@"DefaultConnection"));
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new AConfiguration());
            modelBuilder.ApplyConfiguration(new AdvertisConfiguration());
            modelBuilder.ApplyConfiguration(new AdvertiseCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new ApiResourceConfiguration());
            modelBuilder.ApplyConfiguration(new ApiResourceClaimConfiguration());
            modelBuilder.ApplyConfiguration(new ApiResourcePropertyConfiguration());
            modelBuilder.ApplyConfiguration(new ApiResourceScopeConfiguration());
            modelBuilder.ApplyConfiguration(new ApiResourceSecretConfiguration());
            modelBuilder.ApplyConfiguration(new ApiScopeConfiguration());
            modelBuilder.ApplyConfiguration(new ApiScopeClaimConfiguration());
            modelBuilder.ApplyConfiguration(new ApiScopePropertyConfiguration());
            modelBuilder.ApplyConfiguration(new BaseInfoConfiguration());
            modelBuilder.ApplyConfiguration(new BaseInfoCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new BroadcastFrameConfiguration());
            modelBuilder.ApplyConfiguration(new BroadcastProgramTypeConfiguration());
            modelBuilder.ApplyConfiguration(new CalendarConfiguration());
            modelBuilder.ApplyConfiguration(new ChannelGroupConfiguration());
            modelBuilder.ApplyConfiguration(new CityConfiguration());
            modelBuilder.ApplyConfiguration(new ClientConfiguration());
            modelBuilder.ApplyConfiguration(new ClientClaimConfiguration());
            modelBuilder.ApplyConfiguration(new ClientCorsOriginConfiguration());
            modelBuilder.ApplyConfiguration(new ClientGrantTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ClientIdPRestrictionConfiguration());
            modelBuilder.ApplyConfiguration(new ClientPostLogoutRedirectUriConfiguration());
            modelBuilder.ApplyConfiguration(new ClientPropertyConfiguration());
            modelBuilder.ApplyConfiguration(new ClientRedirectUriConfiguration());
            modelBuilder.ApplyConfiguration(new ClientScopeConfiguration());
            modelBuilder.ApplyConfiguration(new ClientSecretConfiguration());
            modelBuilder.ApplyConfiguration(new CondactorChannelProgSubCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorAutoFileNumberConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorAzanTimeConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorBoxConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorBoxItemConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorBoxRequestConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorBoxRequesterUnitConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorBoxRequestStatusDefinitionConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorBoxTemplateConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorBoxTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorBroadcastCertificateConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorBroadcastLicensConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChangeLogConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgramConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgramAgentConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgramAgeRanxConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgramApprovalLogConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgramEventConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgramInfoConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgramInTagConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgramSubjectConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgramSupplyTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorChannelProgramTagConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorDispatchDetailConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorItemDispatchConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorItemDispatchAgentConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorItemDispatchEventConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorItemDispatchLogConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorItemDispatchSubjectConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorOfoghConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorProgramApproachConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorProgramTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorSendHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorSubTitleConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorTableConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorTablePakhshConfiguration());
            modelBuilder.ApplyConfiguration(new ConductorTaminGroupConfiguration());
            modelBuilder.ApplyConfiguration(new ContentsTabbedConfiguration());
            modelBuilder.ApplyConfiguration(new ContentTabGroupConfiguration());
            modelBuilder.ApplyConfiguration(new CorrectionDataSamtHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new DateFormatConfiguration());
            modelBuilder.ApplyConfiguration(new DeviceCodeConfiguration());
            modelBuilder.ApplyConfiguration(new DispatchTypeValueConfiguration());
            modelBuilder.ApplyConfiguration(new DynamicPageConfiguration());
            modelBuilder.ApplyConfiguration(new DynamicPageCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new DynamicPageFileConfiguration());
            modelBuilder.ApplyConfiguration(new EpgNetworkConfiguration());
            modelBuilder.ApplyConfiguration(new FidsSamtRequestLogConfiguration());
            modelBuilder.ApplyConfiguration(new FidsSamtRequestLogStatuConfiguration());
            modelBuilder.ApplyConfiguration(new FidsTelavatBuilderProductionConfiguration());
            modelBuilder.ApplyConfiguration(new FidsTelavatBuilderReviewConfiguration());
            modelBuilder.ApplyConfiguration(new FidsTelavatRequestMediaConfiguration());
            modelBuilder.ApplyConfiguration(new FidsTelavatRequestPaymentConfiguration());
            modelBuilder.ApplyConfiguration(new HijriCalendarAdjustmentConfiguration());
            modelBuilder.ApplyConfiguration(new IdentityResourceConfiguration());
            modelBuilder.ApplyConfiguration(new IdentityResourceClaimConfiguration());
            modelBuilder.ApplyConfiguration(new IdentityResourcePropertyConfiguration());
            modelBuilder.ApplyConfiguration(new ImageAlbumConfiguration());
            modelBuilder.ApplyConfiguration(new ImageGalleryConfiguration());
            modelBuilder.ApplyConfiguration(new ImagePhotoConfiguration());
            modelBuilder.ApplyConfiguration(new ImageViewerConfiguration());
            modelBuilder.ApplyConfiguration(new IndexBefore1400Configuration());
            modelBuilder.ApplyConfiguration(new InitProgramSubjectConfiguration());
            modelBuilder.ApplyConfiguration(new InsideBaseInfoConfiguration());
            modelBuilder.ApplyConfiguration(new InternalBaravordConfiguration());
            modelBuilder.ApplyConfiguration(new InternalBaravordLogConfiguration());
            modelBuilder.ApplyConfiguration(new InternalResourceConfiguration());
            modelBuilder.ApplyConfiguration(new IranHijriCalendarSettingConfiguration());
            modelBuilder.ApplyConfiguration(new LinkConfiguration());
            modelBuilder.ApplyConfiguration(new LinkCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new MainMenuConfiguration());
            modelBuilder.ApplyConfiguration(new MainQualityConfiguration());
            modelBuilder.ApplyConfiguration(new MeEpgConfiguration());
            modelBuilder.ApplyConfiguration(new MeMediumConfiguration());
            modelBuilder.ApplyConfiguration(new MenuConfiguration());
            modelBuilder.ApplyConfiguration(new MojriEducationConfiguration());
            modelBuilder.ApplyConfiguration(new MojriFilmographyConfiguration());
            modelBuilder.ApplyConfiguration(new MojriMediaConfiguration());
            modelBuilder.ApplyConfiguration(new MojriReprimandConfiguration());
            modelBuilder.ApplyConfiguration(new NewsConfiguration());
            modelBuilder.ApplyConfiguration(new News2Configuration());
            modelBuilder.ApplyConfiguration(new NewsAccessUserConfiguration());
            modelBuilder.ApplyConfiguration(new NewsAgenciesUserConfiguration());
            modelBuilder.ApplyConfiguration(new NewsAgencyConfiguration());
            modelBuilder.ApplyConfiguration(new NewsCommentConfiguration());
            modelBuilder.ApplyConfiguration(new NewsFeedConfiguration());
            modelBuilder.ApplyConfiguration(new NewsFileConfiguration());
            modelBuilder.ApplyConfiguration(new NewsLetterNewConfiguration());
            modelBuilder.ApplyConfiguration(new NewsLetterUserConfiguration());
            modelBuilder.ApplyConfiguration(new NewsLogConfiguration());
            modelBuilder.ApplyConfiguration(new NewsPriorityConfiguration());
            modelBuilder.ApplyConfiguration(new NewsRatingConfiguration());
            modelBuilder.ApplyConfiguration(new NewsRelatedConfiguration());
            modelBuilder.ApplyConfiguration(new NewsRssConfiguration());
            modelBuilder.ApplyConfiguration(new NewsTagConfiguration());
            modelBuilder.ApplyConfiguration(new OauthLogConfiguration());
            modelBuilder.ApplyConfiguration(new OldTelavatGrades2Configuration());
            modelBuilder.ApplyConfiguration(new PageTemplateConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshChannelLocationConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshChannelSettingConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshCooperationTypeConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshEncouragementPunishmentTitleConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshEncouragmentUserConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshManageShiftConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshPersonConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshPersonTitleConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshShiftDetailConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshShiftSettingConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshTabletShiftConfiguration());
            modelBuilder.ApplyConfiguration(new PakhshTabletShiftLogConfiguration());
            modelBuilder.ApplyConfiguration(new PersistedGrantConfiguration());
            modelBuilder.ApplyConfiguration(new PollConfiguration());
            modelBuilder.ApplyConfiguration(new PortalConfiguration());
            modelBuilder.ApplyConfiguration(new PortalAddressConfiguration());
            modelBuilder.ApplyConfiguration(new ProcessStatuConfiguration());
            modelBuilder.ApplyConfiguration(new ProcessStepConfiguration());
            modelBuilder.ApplyConfiguration(new ProductionTechnicalQualityConfiguration());
            modelBuilder.ApplyConfiguration(new ProgramAgeRanxConfiguration());
            modelBuilder.ApplyConfiguration(new ProgramAgeWarningConfiguration());
            modelBuilder.ApplyConfiguration(new ProgramLicenseItemConfiguration());
            modelBuilder.ApplyConfiguration(new QuestionConfiguration());
            modelBuilder.ApplyConfiguration(new RayanCounterConfiguration());
            modelBuilder.ApplyConfiguration(new RayanCounterOnlineUserConfiguration());
            modelBuilder.ApplyConfiguration(new RayanLinkSelectionConfiguration());
            modelBuilder.ApplyConfiguration(new RayanMenuConfiguration());
            modelBuilder.ApplyConfiguration(new RayanModuleConfiguration());
            modelBuilder.ApplyConfiguration(new RayanModuleDefinitionConfiguration());
            modelBuilder.ApplyConfiguration(new RayanModuleDefinitionLogConfiguration());
            modelBuilder.ApplyConfiguration(new RayanModuleHelpConfiguration());
            modelBuilder.ApplyConfiguration(new RayanModuleProcessConfiguration());
            modelBuilder.ApplyConfiguration(new RayanSettingConfiguration());
            modelBuilder.ApplyConfiguration(new RequestBackupConfiguration());
            modelBuilder.ApplyConfiguration(new RequestBackup2Configuration());
            modelBuilder.ApplyConfiguration(new RequestLogQualityConfiguration());
            modelBuilder.ApplyConfiguration(new SamtAfterProductionConfiguration());
            modelBuilder.ApplyConfiguration(new SamtAgentConfiguration());
            modelBuilder.ApplyConfiguration(new SamtApproachConfiguration());
            modelBuilder.ApplyConfiguration(new SamtBaravordHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new SamtBaravordStatuConfiguration());
            modelBuilder.ApplyConfiguration(new SamtBaravordStatusCodeConfiguration());
            modelBuilder.ApplyConfiguration(new SamtBeforeProductionConfiguration());
            modelBuilder.ApplyConfiguration(new SamtBeforeProductionAgentConfiguration());
            modelBuilder.ApplyConfiguration(new SamtBroadcastDurationConfiguration());
            modelBuilder.ApplyConfiguration(new SamtBroadcastLicenseConfiguration());
            modelBuilder.ApplyConfiguration(new SamtBuilderProductionConfiguration());
            modelBuilder.ApplyConfiguration(new SamtBuilderReviewConfiguration());
            modelBuilder.ApplyConfiguration(new SamtCategoryCostConfiguration());
            modelBuilder.ApplyConfiguration(new SamtDuringProductionConfiguration());
            modelBuilder.ApplyConfiguration(new SamtEventConfiguration());
            modelBuilder.ApplyConfiguration(new SamtGradeConfiguration());
            modelBuilder.ApplyConfiguration(new SamtGroupConfiguration());
            modelBuilder.ApplyConfiguration(new SamtHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new SamtHistoryAgentConfiguration());
            modelBuilder.ApplyConfiguration(new SamtHrCooperationTypeConfiguration());
            modelBuilder.ApplyConfiguration(new SamtHrjobConfiguration());
            modelBuilder.ApplyConfiguration(new SamtMojriConfiguration());
            modelBuilder.ApplyConfiguration(new SamtMonthlyBudgetConfiguration());
            modelBuilder.ApplyConfiguration(new SamtPresentationTypeConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProductionAdminReportConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProductionAgentStepConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProductionEventConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProductionProgressConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProductionSettingConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProductionSettingFieldConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProductionSettingItemConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProductionSettingVersionConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProgramTransferConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProposalAgeRangeConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProposalDptConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProposalEducationConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProposalGenderConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProposalHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProposalStatuConfiguration());
            modelBuilder.ApplyConfiguration(new SamtProposalStatusCodeConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRepeatConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestAgentConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestApproachConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestApproachTempConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestCostConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestEventConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestFileConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestLogConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestLogPlanConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestLogStatuConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestLogSubjectConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestMediaConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestPaymentConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestProductionConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestProductionEventConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestProductionProgressConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestProductionSubjectConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequestResourceCostConfiguration());
            modelBuilder.ApplyConfiguration(new SamtRequests3Configuration());
            modelBuilder.ApplyConfiguration(new SamtRequestSubjectConfiguration());
            modelBuilder.ApplyConfiguration(new SamtResourceCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new SamtResourceCategoryTypeConfiguration());
            modelBuilder.ApplyConfiguration(new SamtResourceTypeConfiguration());
            modelBuilder.ApplyConfiguration(new SamtStructureConfiguration());
            modelBuilder.ApplyConfiguration(new SamtStructureTypeConfiguration());
            modelBuilder.ApplyConfiguration(new SamtSubFormatConfiguration());
            modelBuilder.ApplyConfiguration(new SamtSubjectConfiguration());
            modelBuilder.ApplyConfiguration(new SamtSubStructureConfiguration());
            modelBuilder.ApplyConfiguration(new SamTUserConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv2PlanTopicConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv2PlanYearlyCommitmentConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv2ProgramTopicConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3AssessmentConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3AssessmentAttachmentConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3AssessmentStrengthsWeaknessConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3AttachmentConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3AttachmentTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3BroadcastTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3ImportanceDegreeConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3MonitoringConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3MonitoringAttachmentConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3MonitoringKeywordConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3MonitoringSubjectConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3StrengthsWeaknessConfiguration());
            modelBuilder.ApplyConfiguration(new Samtv3TopicConfiguration());
            modelBuilder.ApplyConfiguration(new ShabakeOmidClipArtConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftAgentReportConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftCrewRewardFineConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftCrewRewardFineReasonConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftEmploymentDetailConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftLocationConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftLogConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftRevisionProblemConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftShiftConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftShiftTabletConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftShiftTabletCrewConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftShiftTabletCrewReplacementConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftShiftTabletLocationConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftTabletConductorConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftTabletConductorChanxConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftTabletNeededResourceConfiguration());
            modelBuilder.ApplyConfiguration(new ShiftTabletScriptSupervisorDescriptionConfiguration());
            modelBuilder.ApplyConfiguration(new SimaDataLogConfiguration());
            modelBuilder.ApplyConfiguration(new SimaRequestConfiguration());
            modelBuilder.ApplyConfiguration(new SimaTempidConfiguration());
            modelBuilder.ApplyConfiguration(new SimaTempstatuConfiguration());
            modelBuilder.ApplyConfiguration(new StateConfiguration());
            modelBuilder.ApplyConfiguration(new Step5RemovedConfiguration());
            modelBuilder.ApplyConfiguration(new Step5Removed1Configuration());
            modelBuilder.ApplyConfiguration(new Step6RemovedConfiguration());
            modelBuilder.ApplyConfiguration(new TblEpgConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatAgentPostConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatAgentResourceTypeConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatBandSoundConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatBudgetConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatBuilderReviewsItemConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatBuilderReviewsTitrageConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatBuilderReviewsWelleConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatCategoryAgeConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatCertificationConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatContentPriorityConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatEquipmentConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatEquipmentCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatGroupPermissionConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatGroupPermissionsTempConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatGroupsBudgetConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatHumanOutNeedConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatInfoProductionConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatPaymentLogConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatPaymentLogDetailConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatPlaybackObserverReportConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatPlaybackReportConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatPlayStatuConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatProductionAgentConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatProductionConditionConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatProductionReportConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatProgramExpertConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatProgramOccasionConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatProgramStatuConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatProgramStepPermissionConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatProgramTypeConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatProgramVideoConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatProgramVideoExpertConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatRequestFileTagConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatRequestsConditionConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatRequestsStructureTypeConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatRequestStatusConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatSmsLogConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatSourceTypeConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatStatusConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatStatusPermissionConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatStructureConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatSubsidiarySubjectConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatSubtitleStatuConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatSuraConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatTopicConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatUnitConfiguration());
            modelBuilder.ApplyConfiguration(new TelavatWorkTypeConfiguration());
            modelBuilder.ApplyConfiguration(new TempBuilderProductionsDatesCorrectedConfiguration());
            modelBuilder.ApplyConfiguration(new TempStep5RemovedLoGsConfiguration());
            modelBuilder.ApplyConfiguration(new TempStep6RemovedLoGsConfiguration());
            modelBuilder.ApplyConfiguration(new TempStep7RemovedConfiguration());
            modelBuilder.ApplyConfiguration(new TempStep8RemovedConfiguration());
            modelBuilder.ApplyConfiguration(new TempStep8RemovedLoGsConfiguration());
            modelBuilder.ApplyConfiguration(new TempTopicConfiguration());
            modelBuilder.ApplyConfiguration(new TempVwBaravordSamtConfiguration());
            modelBuilder.ApplyConfiguration(new TempVwSamTproposalConfiguration());
            modelBuilder.ApplyConfiguration(new ThemeConfiguration());
            modelBuilder.ApplyConfiguration(new UserConfiguration());
            modelBuilder.ApplyConfiguration(new UserPictureConfiguration());
            modelBuilder.ApplyConfiguration(new UserProfileConfiguration());
            modelBuilder.ApplyConfiguration(new UserProfileControlConfiguration());
            modelBuilder.ApplyConfiguration(new UserProfileDetailConfiguration());
            modelBuilder.ApplyConfiguration(new UserSecurityQuestionConfiguration());
            modelBuilder.ApplyConfiguration(new UsersLoginHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new UsersPortalConfiguration());
            modelBuilder.ApplyConfiguration(new UserTypeConfiguration());
            modelBuilder.ApplyConfiguration(new UserTypeGroupConfiguration());
            modelBuilder.ApplyConfiguration(new UserTypeGroupRoleMenuConfiguration());
            modelBuilder.ApplyConfiguration(new UserTypeGroupRoleModuleConfiguration());
            modelBuilder.ApplyConfiguration(new UserUserTypeConfiguration());
            modelBuilder.ApplyConfiguration(new UserUserTypeGroupConfiguration());
            modelBuilder.ApplyConfiguration(new VAlbumConfiguration());
            modelBuilder.ApplyConfiguration(new VDynamicPageGroupConfiguration());
            modelBuilder.ApplyConfiguration(new VDynamicPageSectionConfiguration());
            modelBuilder.ApplyConfiguration(new ViewSendFile1Configuration());
            modelBuilder.ApplyConfiguration(new ViewSendFile2Configuration());
            modelBuilder.ApplyConfiguration(new ViewSendFile3Configuration());
            modelBuilder.ApplyConfiguration(new VwInternalBaravordLogConfiguration());
            modelBuilder.ApplyConfiguration(new VwMojriConfiguration());
            modelBuilder.ApplyConfiguration(new VwPaymentDetailByBaseYearConfiguration());
            modelBuilder.ApplyConfiguration(new VwRequestProductionProgressConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtBaseConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtBaseLogConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtBaseWithParticipationConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtBaseYearSimaConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtLogSubjectConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtProductionLogConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtProductionLog2Configuration());
            modelBuilder.ApplyConfiguration(new VwSamtProductionLogByDateConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtProductionReviewLogConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtProductionReviewLog2Configuration());
            modelBuilder.ApplyConfiguration(new VwSamtRequestSubjectConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtSubjectTreeConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtTopicTimeConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtv2PlanYearlyCommitmentConfiguration());
            modelBuilder.ApplyConfiguration(new VwSamtv2ProgramTopicConfiguration());
            modelBuilder.ApplyConfiguration(new WidgetConfiguration());
            modelBuilder.ApplyConfiguration(new WidgetDefinitionConfiguration());

            modelBuilder.Entity<SpBaravordRemindReturnModel>().HasNoKey();
            modelBuilder.Entity<SpBuilderReviewGradesByChannelGroupReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByBuilderReviewGradesByChannelGroupReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByChannelsApproachReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByChannelsPerformanceReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByChannelsProgramsStatusCountReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByChannelsProgramsStatusCount2ReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByEstimateOutlineReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByGetAgentDetailReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByGradeByChannelsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByGroupPerformancePerGradeReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByGroupsproductionReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByPaymentDetailByBaseYearReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByPerformanceOfGroupByGradeAndChannelIdReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByPortalPerformancePerGradeReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByPortalPerformancePerGradeNamayesheiReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByPortalPerformancePerGradeNamayeshei2ReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByProductionGradesByChannelGroupReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByProductionProgressReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByProductNamayeshGradesByChannelGroupReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByProductNamayeshGradesByChannelGroup2ReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByProgramsFlagReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByProgramsFlagAllReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByProgramStructuresReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByProgramStructures2ReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByRequestAgentsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpBySubjectL3CloudReturnModel>().HasNoKey();
            modelBuilder.Entity<SpBySubjectPercentReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByTagSubjectReportReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByTagSubjectReport2ReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByV2ProgramTopicsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByV2ProgramTopicsCountReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByV2ProgramTopicsCountFirstLevelReturnModel>().HasNoKey();
            modelBuilder.Entity<SpByV2ProgramTopicsFirstLevelReturnModel>().HasNoKey();
            modelBuilder.Entity<SpChanelsParticipationReturnModel>().HasNoKey();
            modelBuilder.Entity<SpChannelsApproachReturnModel>().HasNoKey();
            modelBuilder.Entity<SpChannelsPerformanceReturnModel>().HasNoKey();
            modelBuilder.Entity<SpChannelsproductionReturnModel>().HasNoKey();
            modelBuilder.Entity<SpChartsByV2ProgramSubjectsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpChartsByV2ProgramTopicsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpChartsByV2SubjectsByChannelReturnModel>().HasNoKey();
            modelBuilder.Entity<SpChartsByV2SubjectsL2ReturnModel>().HasNoKey();
            modelBuilder.Entity<SpConflictBaseYearReturnModel>().HasNoKey();
            modelBuilder.Entity<SpConflictBaseYearReportReturnModel>().HasNoKey();
            modelBuilder.Entity<SpDeatilQualityListReturnModel>().HasNoKey();
            modelBuilder.Entity<SpDetailEventReportReturnModel>().HasNoKey();
            modelBuilder.Entity<SpDeviationRateReturnModel>().HasNoKey();
            modelBuilder.Entity<SpEventReportReturnModel>().HasNoKey();
            modelBuilder.Entity<SpFullPaymentReportReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetComparativeLastVersionReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetComparativeLastVersionTvReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetConductorBoxUsageReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetConductorBoxUsagePerTypeReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetConductorByProgramIdReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetEpgMediaConductorReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetEpgNetworksReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetFileAutoNumberReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetPlanTopicsHierarchyReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetProgramDetailReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetSubjectsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetVersionsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGetVersionsPakhshReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGradeByChannelsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGroupPerformancePerGradeReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGroupsproductionNamayesheiReturnModel>().HasNoKey();
            modelBuilder.Entity<SpGroupsproductionNamayeshei2ReturnModel>().HasNoKey();
            modelBuilder.Entity<SpMojriListReportReturnModel>().HasNoKey();
            modelBuilder.Entity<SpMojriPerformanceReturnModel>().HasNoKey();
            modelBuilder.Entity<SpMojriProgramReportReturnModel>().HasNoKey();
            modelBuilder.Entity<SpMojriProgramsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpNamayeshiProgramsStatusReturnModel>().HasNoKey();
            modelBuilder.Entity<SpPerformanceOfGroupByGradeAndChannelIdReturnModel>().HasNoKey();
            modelBuilder.Entity<SpPortalPerformancePerGradeReturnModel>().HasNoKey();
            modelBuilder.Entity<SpProducerInfoReturnModel>().HasNoKey();
            modelBuilder.Entity<SpProductionGradesByChannelGroupReturnModel>().HasNoKey();
            modelBuilder.Entity<SpProductionProgressByRequestIdReturnModel>().HasNoKey();
            modelBuilder.Entity<SpProgramParticipationReturnModel>().HasNoKey();
            modelBuilder.Entity<SpProgramsQualityListReturnModel>().HasNoKey();
            modelBuilder.Entity<SpProgramsQualityListAllReturnModel>().HasNoKey();
            modelBuilder.Entity<SpProgramStructuresReturnModel>().HasNoKey();
            modelBuilder.Entity<SpQualityByPortalReturnModel>().HasNoKey();
            modelBuilder.Entity<SpRequestProductionProgressReturnModel>().HasNoKey();
            modelBuilder.Entity<SpSamtAllPlanTopicTimeReturnModel>().HasNoKey();
            modelBuilder.Entity<SpSamtAllPlanTopicTimeL2ReturnModel>().HasNoKey();
            modelBuilder.Entity<SpSamtAllPortalsTimeFailReturnModel>().HasNoKey();
            modelBuilder.Entity<SpSamtPortalPlanTopicReturnModel>().HasNoKey();
            modelBuilder.Entity<SpSamtRunTimeChanelsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpSearchConductorReturnModel>().HasNoKey();
            modelBuilder.Entity<SpSearchRegieConductorReturnModel>().HasNoKey();
            modelBuilder.Entity<SpSearchRegieConductorBySpecificVersionReturnModel>().HasNoKey();
            modelBuilder.Entity<SpShiftGetShiftByPortalIdReturnModel>().HasNoKey();
            modelBuilder.Entity<SpTotalProductionProgressReturnModel>().HasNoKey();
            modelBuilder.Entity<SpUserHitReportReturnModel>().HasNoKey();
            modelBuilder.Entity<SpUserHitReport2ReturnModel>().HasNoKey();
            modelBuilder.Entity<SpUsersHitReportReturnModel>().HasNoKey();
            modelBuilder.Entity<SpV2ProductionFlowByDateReturnModel>().HasNoKey();
            modelBuilder.Entity<SpWriteProductionProgressReturnModel>().HasNoKey();

            OnModelCreatingPartial(modelBuilder);
        }


        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
        static partial void OnCreateModelPartial(ModelBuilder modelBuilder, string schema);

        // Stored Procedures
        public List<SpBaravordRemindReturnModel> SpBaravordRemind(int? baseYear, int? portalId, string program, string licenseNumber, string estimateNumer)
        {
            int procResult;
            return SpBaravordRemind(baseYear, portalId, program, licenseNumber, estimateNumer, out procResult);
        }

        public List<SpBaravordRemindReturnModel> SpBaravordRemind(int? baseYear, int? portalId, string program, string licenseNumber, string estimateNumer, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var programParam = new SqlParameter { ParameterName = "@Program", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = program, Size = 1000 };
            if (programParam.Value == null)
                programParam.Value = DBNull.Value;

            var licenseNumberParam = new SqlParameter { ParameterName = "@LicenseNumber", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNumber, Size = 20 };
            if (licenseNumberParam.Value == null)
                licenseNumberParam.Value = DBNull.Value;

            var estimateNumerParam = new SqlParameter { ParameterName = "@EstimateNumer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNumer, Size = 12 };
            if (estimateNumerParam.Value == null)
                estimateNumerParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BaravordRemind] @BaseYear, @PortalID, @Program, @LicenseNumber, @EstimateNumer";
            var procResultData = Set<SpBaravordRemindReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, programParam, licenseNumberParam, estimateNumerParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpBaravordRemindReturnModel>> SpBaravordRemindAsync(int? baseYear, int? portalId, string program, string licenseNumber, string estimateNumer)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var programParam = new SqlParameter { ParameterName = "@Program", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = program, Size = 1000 };
            if (programParam.Value == null)
                programParam.Value = DBNull.Value;

            var licenseNumberParam = new SqlParameter { ParameterName = "@LicenseNumber", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNumber, Size = 20 };
            if (licenseNumberParam.Value == null)
                licenseNumberParam.Value = DBNull.Value;

            var estimateNumerParam = new SqlParameter { ParameterName = "@EstimateNumer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNumer, Size = 12 };
            if (estimateNumerParam.Value == null)
                estimateNumerParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BaravordRemind] @BaseYear, @PortalID, @Program, @LicenseNumber, @EstimateNumer";
            var procResultData = await Set<SpBaravordRemindReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, programParam, licenseNumberParam, estimateNumerParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpBuilderReviewGradesByChannelGroupReturnModel> SpBuilderReviewGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            int procResult;
            return SpBuilderReviewGradesByChannelGroup(baseYear, channelIds, groupIds, fromdate, todate, out procResult);
        }

        public List<SpBuilderReviewGradesByChannelGroupReturnModel> SpBuilderReviewGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BuilderReviewGradesByChannelGroup] @BaseYear, @channelIds, @groupIds, @fromdate, @todate";
            var procResultData = Set<SpBuilderReviewGradesByChannelGroupReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam, fromdateParam, todateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpBuilderReviewGradesByChannelGroupReturnModel>> SpBuilderReviewGradesByChannelGroupAsync(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BuilderReviewGradesByChannelGroup] @BaseYear, @channelIds, @groupIds, @fromdate, @todate";
            var procResultData = await Set<SpBuilderReviewGradesByChannelGroupReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam, fromdateParam, todateParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByBuilderReviewGradesByChannelGroupReturnModel> SpByBuilderReviewGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            int procResult;
            return SpByBuilderReviewGradesByChannelGroup(baseYear, channelIds, groupIds, fromdate, todate, out procResult);
        }

        public List<SpByBuilderReviewGradesByChannelGroupReturnModel> SpByBuilderReviewGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_BuilderReviewGradesByChannelGroup] @BaseYear, @channelIds, @groupIds, @fromdate, @todate";
            var procResultData = Set<SpByBuilderReviewGradesByChannelGroupReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam, fromdateParam, todateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByBuilderReviewGradesByChannelGroupReturnModel>> SpByBuilderReviewGradesByChannelGroupAsync(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_BuilderReviewGradesByChannelGroup] @BaseYear, @channelIds, @groupIds, @fromdate, @todate";
            var procResultData = await Set<SpByBuilderReviewGradesByChannelGroupReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam, fromdateParam, todateParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByChannelGradeReport(int? baseYear, int? portalId, string flags)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@Flags", SqlDbType = SqlDbType.Char, Direction = ParameterDirection.Input, Value = flags, Size = 3 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ChannelGradeReport] @BaseYear, @PortalID, @Flags", baseYearParam, portalIdParam, flagsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByChannelGradeReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByChannelGradeReportNamayeshi(int? baseYear, int? portalId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ChannelGradeReportNamayeshi] @BaseYear, @PortalID", baseYearParam, portalIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByChannelGradeReportNamayeshiAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByChannelGradeReportNamayeshi2(int? baseYear, int? portalId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ChannelGradeReportNamayeshi_2] @BaseYear, @PortalID", baseYearParam, portalIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByChannelGradeReportNamayeshi2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByChannelsApproachReturnModel> SpByChannelsApproach(int? baseYear, string channelIds)
        {
            int procResult;
            return SpByChannelsApproach(baseYear, channelIds, out procResult);
        }

        public List<SpByChannelsApproachReturnModel> SpByChannelsApproach(int? baseYear, string channelIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_channelsApproach] @BaseYear, @channelIds";
            var procResultData = Set<SpByChannelsApproachReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByChannelsApproachReturnModel>> SpByChannelsApproachAsync(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_channelsApproach] @BaseYear, @channelIds";
            var procResultData = await Set<SpByChannelsApproachReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByChannelsApproach2(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_channelsApproach2] @BaseYear, @channelIds", baseYearParam, channelIdsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByChannelsApproach2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByChannelsPerformanceReturnModel> SpByChannelsPerformance(int? baseYear, string channelIds, int? eventId, string flags)
        {
            int procResult;
            return SpByChannelsPerformance(baseYear, channelIds, eventId, flags, out procResult);
        }

        public List<SpByChannelsPerformanceReturnModel> SpByChannelsPerformance(int? baseYear, string channelIds, int? eventId, string flags, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 1000 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ChannelsPerformance] @BaseYear, @channelIds, @eventId, @flags";
            var procResultData = Set<SpByChannelsPerformanceReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, eventIdParam, flagsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByChannelsPerformanceReturnModel>> SpByChannelsPerformanceAsync(int? baseYear, string channelIds, int? eventId, string flags)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 1000 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ChannelsPerformance] @BaseYear, @channelIds, @eventId, @flags";
            var procResultData = await Set<SpByChannelsPerformanceReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, eventIdParam, flagsParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByChannelsPerformance2(int? baseYear, string channelIds, int? eventId, string flags)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 1000 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ChannelsPerformance2] @BaseYear, @channelIds, @eventId, @flags", baseYearParam, channelIdsParam, eventIdParam, flagsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByChannelsPerformance2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByChannelsProgramsStatus(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? startrow, int? pagesize, int? orderbyWhat, int? hasproduction, int? eventId, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, string deliveryDateFrom, string deliveryDateTo, string flags, int? approachId, string productionEndtDate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerIdParam = new SqlParameter { ParameterName = "@producerId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = producerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!producerId.HasValue)
                producerIdParam.Value = DBNull.Value;

            var isTranferedParam = new SqlParameter { ParameterName = "@isTranfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTranfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTranfered.HasValue)
                isTranferedParam.Value = DBNull.Value;

            var hasPrposalStatusParam = new SqlParameter { ParameterName = "@hasPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasPrposalStatus, Size = 1500 };
            if (hasPrposalStatusParam.Value == null)
                hasPrposalStatusParam.Value = DBNull.Value;

            var hasNotPrposalStatusParam = new SqlParameter { ParameterName = "@hasNotPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotPrposalStatus, Size = 1500 };
            if (hasNotPrposalStatusParam.Value == null)
                hasNotPrposalStatusParam.Value = DBNull.Value;

            var hasBaravordStatusParam = new SqlParameter { ParameterName = "@hasBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasBaravordStatus, Size = 1500 };
            if (hasBaravordStatusParam.Value == null)
                hasBaravordStatusParam.Value = DBNull.Value;

            var hasNotBaravordStatusParam = new SqlParameter { ParameterName = "@hasNotBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotBaravordStatus, Size = 1500 };
            if (hasNotBaravordStatusParam.Value == null)
                hasNotBaravordStatusParam.Value = DBNull.Value;

            var hasEstimateParam = new SqlParameter { ParameterName = "@hasEstimate", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasEstimate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasEstimate.HasValue)
                hasEstimateParam.Value = DBNull.Value;

            var subjectlevel1Param = new SqlParameter { ParameterName = "@subjectlevel1", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel1.HasValue)
                subjectlevel1Param.Value = DBNull.Value;

            var subjectlevel2Param = new SqlParameter { ParameterName = "@subjectlevel2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel2.HasValue)
                subjectlevel2Param.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@orderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var productionProgressFromParam = new SqlParameter { ParameterName = "@ProductionProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressFrom.HasValue)
                productionProgressFromParam.Value = DBNull.Value;

            var productionProgressToParam = new SqlParameter { ParameterName = "@ProductionProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressTo.HasValue)
                productionProgressToParam.Value = DBNull.Value;

            var playProgressFromParam = new SqlParameter { ParameterName = "@PlayProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressFrom.HasValue)
                playProgressFromParam.Value = DBNull.Value;

            var playProgressToParam = new SqlParameter { ParameterName = "@PlayProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressTo.HasValue)
                playProgressToParam.Value = DBNull.Value;

            var paymentProgressFromParam = new SqlParameter { ParameterName = "@PaymentProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressFrom.HasValue)
                paymentProgressFromParam.Value = DBNull.Value;

            var paymentProgressToParam = new SqlParameter { ParameterName = "@PaymentProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressTo.HasValue)
                paymentProgressToParam.Value = DBNull.Value;

            var deliveryDateFromParam = new SqlParameter { ParameterName = "@DeliveryDateFrom", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = deliveryDateFrom, Size = 10 };
            if (deliveryDateFromParam.Value == null)
                deliveryDateFromParam.Value = DBNull.Value;

            var deliveryDateToParam = new SqlParameter { ParameterName = "@DeliveryDateTo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = deliveryDateTo, Size = 10 };
            if (deliveryDateToParam.Value == null)
                deliveryDateToParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 10 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var productionEndtDateParam = new SqlParameter { ParameterName = "@ProductionEndtDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = productionEndtDate, Size = 10 };
            if (productionEndtDateParam.Value == null)
                productionEndtDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ChannelsProgramsStatus] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerId, @isTranfered, @hasPrposalStatus, @hasNotPrposalStatus, @hasBaravordStatus, @hasNotBaravordStatus, @hasEstimate, @subjectlevel1, @subjectlevel2, @startrow, @pagesize, @orderbyWhat, @hasproduction, @eventId, @ProductionProgressFrom, @ProductionProgressTo, @PlayProgressFrom, @PlayProgressTo, @PaymentProgressFrom, @PaymentProgressTo, @DeliveryDateFrom, @DeliveryDateTo, @flags, @approachId, @ProductionEndtDate", baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerIdParam, isTranferedParam, hasPrposalStatusParam, hasNotPrposalStatusParam, hasBaravordStatusParam, hasNotBaravordStatusParam, hasEstimateParam, subjectlevel1Param, subjectlevel2Param, startrowParam, pagesizeParam, orderbyWhatParam, hasproductionParam, eventIdParam, productionProgressFromParam, productionProgressToParam, playProgressFromParam, playProgressToParam, paymentProgressFromParam, paymentProgressToParam, deliveryDateFromParam, deliveryDateToParam, flagsParam, approachIdParam, productionEndtDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByChannelsProgramsStatusAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByChannelsProgramsStatus2(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? startrow, int? pagesize, int? orderbyWhat, string productionEndtDate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerNameParam = new SqlParameter { ParameterName = "@producerName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = producerName, Size = 50 };
            if (producerNameParam.Value == null)
                producerNameParam.Value = DBNull.Value;

            var isTranferedParam = new SqlParameter { ParameterName = "@isTranfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTranfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTranfered.HasValue)
                isTranferedParam.Value = DBNull.Value;

            var hasPrposalStatusParam = new SqlParameter { ParameterName = "@hasPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasPrposalStatus, Size = 1500 };
            if (hasPrposalStatusParam.Value == null)
                hasPrposalStatusParam.Value = DBNull.Value;

            var hasNotPrposalStatusParam = new SqlParameter { ParameterName = "@hasNotPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotPrposalStatus, Size = 1500 };
            if (hasNotPrposalStatusParam.Value == null)
                hasNotPrposalStatusParam.Value = DBNull.Value;

            var hasBaravordStatusParam = new SqlParameter { ParameterName = "@hasBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasBaravordStatus, Size = 1500 };
            if (hasBaravordStatusParam.Value == null)
                hasBaravordStatusParam.Value = DBNull.Value;

            var hasNotBaravordStatusParam = new SqlParameter { ParameterName = "@hasNotBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotBaravordStatus, Size = 1500 };
            if (hasNotBaravordStatusParam.Value == null)
                hasNotBaravordStatusParam.Value = DBNull.Value;

            var hasEstimateParam = new SqlParameter { ParameterName = "@hasEstimate", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasEstimate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasEstimate.HasValue)
                hasEstimateParam.Value = DBNull.Value;

            var subjectlevel1Param = new SqlParameter { ParameterName = "@subjectlevel1", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel1.HasValue)
                subjectlevel1Param.Value = DBNull.Value;

            var subjectlevel2Param = new SqlParameter { ParameterName = "@subjectlevel2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel2.HasValue)
                subjectlevel2Param.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@orderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            var productionEndtDateParam = new SqlParameter { ParameterName = "@ProductionEndtDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = productionEndtDate, Size = 10 };
            if (productionEndtDateParam.Value == null)
                productionEndtDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ChannelsProgramsStatus2] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerName, @isTranfered, @hasPrposalStatus, @hasNotPrposalStatus, @hasBaravordStatus, @hasNotBaravordStatus, @hasEstimate, @subjectlevel1, @subjectlevel2, @startrow, @pagesize, @orderbyWhat, @ProductionEndtDate", baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerNameParam, isTranferedParam, hasPrposalStatusParam, hasNotPrposalStatusParam, hasBaravordStatusParam, hasNotBaravordStatusParam, hasEstimateParam, subjectlevel1Param, subjectlevel2Param, startrowParam, pagesizeParam, orderbyWhatParam, productionEndtDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByChannelsProgramsStatus2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByChannelsProgramsStatus3(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? startrow, int? pagesize, int? orderbyWhat, int? hasproduction, int? eventId, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, string deliveryDateFrom, string deliveryDateTo, string flags)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerIdParam = new SqlParameter { ParameterName = "@producerId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = producerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!producerId.HasValue)
                producerIdParam.Value = DBNull.Value;

            var isTranferedParam = new SqlParameter { ParameterName = "@isTranfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTranfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTranfered.HasValue)
                isTranferedParam.Value = DBNull.Value;

            var hasPrposalStatusParam = new SqlParameter { ParameterName = "@hasPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasPrposalStatus, Size = 1500 };
            if (hasPrposalStatusParam.Value == null)
                hasPrposalStatusParam.Value = DBNull.Value;

            var hasNotPrposalStatusParam = new SqlParameter { ParameterName = "@hasNotPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotPrposalStatus, Size = 1500 };
            if (hasNotPrposalStatusParam.Value == null)
                hasNotPrposalStatusParam.Value = DBNull.Value;

            var hasBaravordStatusParam = new SqlParameter { ParameterName = "@hasBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasBaravordStatus, Size = 1500 };
            if (hasBaravordStatusParam.Value == null)
                hasBaravordStatusParam.Value = DBNull.Value;

            var hasNotBaravordStatusParam = new SqlParameter { ParameterName = "@hasNotBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotBaravordStatus, Size = 1500 };
            if (hasNotBaravordStatusParam.Value == null)
                hasNotBaravordStatusParam.Value = DBNull.Value;

            var hasEstimateParam = new SqlParameter { ParameterName = "@hasEstimate", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasEstimate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasEstimate.HasValue)
                hasEstimateParam.Value = DBNull.Value;

            var subjectlevel1Param = new SqlParameter { ParameterName = "@subjectlevel1", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel1.HasValue)
                subjectlevel1Param.Value = DBNull.Value;

            var subjectlevel2Param = new SqlParameter { ParameterName = "@subjectlevel2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel2.HasValue)
                subjectlevel2Param.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@orderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var productionProgressFromParam = new SqlParameter { ParameterName = "@ProductionProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressFrom.HasValue)
                productionProgressFromParam.Value = DBNull.Value;

            var productionProgressToParam = new SqlParameter { ParameterName = "@ProductionProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressTo.HasValue)
                productionProgressToParam.Value = DBNull.Value;

            var playProgressFromParam = new SqlParameter { ParameterName = "@PlayProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressFrom.HasValue)
                playProgressFromParam.Value = DBNull.Value;

            var playProgressToParam = new SqlParameter { ParameterName = "@PlayProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressTo.HasValue)
                playProgressToParam.Value = DBNull.Value;

            var paymentProgressFromParam = new SqlParameter { ParameterName = "@PaymentProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressFrom.HasValue)
                paymentProgressFromParam.Value = DBNull.Value;

            var paymentProgressToParam = new SqlParameter { ParameterName = "@PaymentProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressTo.HasValue)
                paymentProgressToParam.Value = DBNull.Value;

            var deliveryDateFromParam = new SqlParameter { ParameterName = "@DeliveryDateFrom", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = deliveryDateFrom, Size = 10 };
            if (deliveryDateFromParam.Value == null)
                deliveryDateFromParam.Value = DBNull.Value;

            var deliveryDateToParam = new SqlParameter { ParameterName = "@DeliveryDateTo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = deliveryDateTo, Size = 10 };
            if (deliveryDateToParam.Value == null)
                deliveryDateToParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 10 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ChannelsProgramsStatus3] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerId, @isTranfered, @hasPrposalStatus, @hasNotPrposalStatus, @hasBaravordStatus, @hasNotBaravordStatus, @hasEstimate, @subjectlevel1, @subjectlevel2, @startrow, @pagesize, @orderbyWhat, @hasproduction, @eventId, @ProductionProgressFrom, @ProductionProgressTo, @PlayProgressFrom, @PlayProgressTo, @PaymentProgressFrom, @PaymentProgressTo, @DeliveryDateFrom, @DeliveryDateTo, @flags", baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerIdParam, isTranferedParam, hasPrposalStatusParam, hasNotPrposalStatusParam, hasBaravordStatusParam, hasNotBaravordStatusParam, hasEstimateParam, subjectlevel1Param, subjectlevel2Param, startrowParam, pagesizeParam, orderbyWhatParam, hasproductionParam, eventIdParam, productionProgressFromParam, productionProgressToParam, playProgressFromParam, playProgressToParam, paymentProgressFromParam, paymentProgressToParam, deliveryDateFromParam, deliveryDateToParam, flagsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByChannelsProgramsStatus3Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByChannelsProgramsStatusAll(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? hasproduction, int? eventId, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, string deliveryDateFrom, string deliveryDateTo, string flags, int? approachId, string productionEndtDate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerIdParam = new SqlParameter { ParameterName = "@producerId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = producerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!producerId.HasValue)
                producerIdParam.Value = DBNull.Value;

            var isTranferedParam = new SqlParameter { ParameterName = "@isTranfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTranfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTranfered.HasValue)
                isTranferedParam.Value = DBNull.Value;

            var hasPrposalStatusParam = new SqlParameter { ParameterName = "@hasPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasPrposalStatus, Size = 1500 };
            if (hasPrposalStatusParam.Value == null)
                hasPrposalStatusParam.Value = DBNull.Value;

            var hasNotPrposalStatusParam = new SqlParameter { ParameterName = "@hasNotPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotPrposalStatus, Size = 1500 };
            if (hasNotPrposalStatusParam.Value == null)
                hasNotPrposalStatusParam.Value = DBNull.Value;

            var hasBaravordStatusParam = new SqlParameter { ParameterName = "@hasBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasBaravordStatus, Size = 1500 };
            if (hasBaravordStatusParam.Value == null)
                hasBaravordStatusParam.Value = DBNull.Value;

            var hasNotBaravordStatusParam = new SqlParameter { ParameterName = "@hasNotBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotBaravordStatus, Size = 1500 };
            if (hasNotBaravordStatusParam.Value == null)
                hasNotBaravordStatusParam.Value = DBNull.Value;

            var hasEstimateParam = new SqlParameter { ParameterName = "@hasEstimate", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasEstimate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasEstimate.HasValue)
                hasEstimateParam.Value = DBNull.Value;

            var subjectlevel1Param = new SqlParameter { ParameterName = "@subjectlevel1", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel1.HasValue)
                subjectlevel1Param.Value = DBNull.Value;

            var subjectlevel2Param = new SqlParameter { ParameterName = "@subjectlevel2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel2.HasValue)
                subjectlevel2Param.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var productionProgressFromParam = new SqlParameter { ParameterName = "@ProductionProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressFrom.HasValue)
                productionProgressFromParam.Value = DBNull.Value;

            var productionProgressToParam = new SqlParameter { ParameterName = "@ProductionProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressTo.HasValue)
                productionProgressToParam.Value = DBNull.Value;

            var playProgressFromParam = new SqlParameter { ParameterName = "@PlayProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressFrom.HasValue)
                playProgressFromParam.Value = DBNull.Value;

            var playProgressToParam = new SqlParameter { ParameterName = "@PlayProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressTo.HasValue)
                playProgressToParam.Value = DBNull.Value;

            var paymentProgressFromParam = new SqlParameter { ParameterName = "@PaymentProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressFrom.HasValue)
                paymentProgressFromParam.Value = DBNull.Value;

            var paymentProgressToParam = new SqlParameter { ParameterName = "@PaymentProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressTo.HasValue)
                paymentProgressToParam.Value = DBNull.Value;

            var deliveryDateFromParam = new SqlParameter { ParameterName = "@DeliveryDateFrom", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = deliveryDateFrom, Size = 10 };
            if (deliveryDateFromParam.Value == null)
                deliveryDateFromParam.Value = DBNull.Value;

            var deliveryDateToParam = new SqlParameter { ParameterName = "@DeliveryDateTo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = deliveryDateTo, Size = 10 };
            if (deliveryDateToParam.Value == null)
                deliveryDateToParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 10 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var productionEndtDateParam = new SqlParameter { ParameterName = "@ProductionEndtDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = productionEndtDate, Size = 10 };
            if (productionEndtDateParam.Value == null)
                productionEndtDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ChannelsProgramsStatus_All] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerId, @isTranfered, @hasPrposalStatus, @hasNotPrposalStatus, @hasBaravordStatus, @hasNotBaravordStatus, @hasEstimate, @subjectlevel1, @subjectlevel2, @hasproduction, @eventId, @ProductionProgressFrom, @ProductionProgressTo, @PlayProgressFrom, @PlayProgressTo, @PaymentProgressFrom, @PaymentProgressTo, @DeliveryDateFrom, @DeliveryDateTo, @flags, @approachId, @ProductionEndtDate", baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerIdParam, isTranferedParam, hasPrposalStatusParam, hasNotPrposalStatusParam, hasBaravordStatusParam, hasNotBaravordStatusParam, hasEstimateParam, subjectlevel1Param, subjectlevel2Param, hasproductionParam, eventIdParam, productionProgressFromParam, productionProgressToParam, playProgressFromParam, playProgressToParam, paymentProgressFromParam, paymentProgressToParam, deliveryDateFromParam, deliveryDateToParam, flagsParam, approachIdParam, productionEndtDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByChannelsProgramsStatusAllAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByChannelsProgramsStatusAll2(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? hasproduction, int? eventId, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, string deliveryDateFrom, string deliveryDateTo, string flags, string productionEndtDate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerIdParam = new SqlParameter { ParameterName = "@producerId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = producerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!producerId.HasValue)
                producerIdParam.Value = DBNull.Value;

            var isTranferedParam = new SqlParameter { ParameterName = "@isTranfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTranfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTranfered.HasValue)
                isTranferedParam.Value = DBNull.Value;

            var hasPrposalStatusParam = new SqlParameter { ParameterName = "@hasPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasPrposalStatus, Size = 1500 };
            if (hasPrposalStatusParam.Value == null)
                hasPrposalStatusParam.Value = DBNull.Value;

            var hasNotPrposalStatusParam = new SqlParameter { ParameterName = "@hasNotPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotPrposalStatus, Size = 1500 };
            if (hasNotPrposalStatusParam.Value == null)
                hasNotPrposalStatusParam.Value = DBNull.Value;

            var hasBaravordStatusParam = new SqlParameter { ParameterName = "@hasBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasBaravordStatus, Size = 1500 };
            if (hasBaravordStatusParam.Value == null)
                hasBaravordStatusParam.Value = DBNull.Value;

            var hasNotBaravordStatusParam = new SqlParameter { ParameterName = "@hasNotBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotBaravordStatus, Size = 1500 };
            if (hasNotBaravordStatusParam.Value == null)
                hasNotBaravordStatusParam.Value = DBNull.Value;

            var hasEstimateParam = new SqlParameter { ParameterName = "@hasEstimate", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasEstimate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasEstimate.HasValue)
                hasEstimateParam.Value = DBNull.Value;

            var subjectlevel1Param = new SqlParameter { ParameterName = "@subjectlevel1", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel1.HasValue)
                subjectlevel1Param.Value = DBNull.Value;

            var subjectlevel2Param = new SqlParameter { ParameterName = "@subjectlevel2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel2.HasValue)
                subjectlevel2Param.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var productionProgressFromParam = new SqlParameter { ParameterName = "@ProductionProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressFrom.HasValue)
                productionProgressFromParam.Value = DBNull.Value;

            var productionProgressToParam = new SqlParameter { ParameterName = "@ProductionProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressTo.HasValue)
                productionProgressToParam.Value = DBNull.Value;

            var playProgressFromParam = new SqlParameter { ParameterName = "@PlayProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressFrom.HasValue)
                playProgressFromParam.Value = DBNull.Value;

            var playProgressToParam = new SqlParameter { ParameterName = "@PlayProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressTo.HasValue)
                playProgressToParam.Value = DBNull.Value;

            var paymentProgressFromParam = new SqlParameter { ParameterName = "@PaymentProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressFrom.HasValue)
                paymentProgressFromParam.Value = DBNull.Value;

            var paymentProgressToParam = new SqlParameter { ParameterName = "@PaymentProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressTo.HasValue)
                paymentProgressToParam.Value = DBNull.Value;

            var deliveryDateFromParam = new SqlParameter { ParameterName = "@DeliveryDateFrom", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = deliveryDateFrom, Size = 10 };
            if (deliveryDateFromParam.Value == null)
                deliveryDateFromParam.Value = DBNull.Value;

            var deliveryDateToParam = new SqlParameter { ParameterName = "@DeliveryDateTo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = deliveryDateTo, Size = 10 };
            if (deliveryDateToParam.Value == null)
                deliveryDateToParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 10 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var productionEndtDateParam = new SqlParameter { ParameterName = "@ProductionEndtDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = productionEndtDate, Size = 10 };
            if (productionEndtDateParam.Value == null)
                productionEndtDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ChannelsProgramsStatus_All2] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerId, @isTranfered, @hasPrposalStatus, @hasNotPrposalStatus, @hasBaravordStatus, @hasNotBaravordStatus, @hasEstimate, @subjectlevel1, @subjectlevel2, @hasproduction, @eventId, @ProductionProgressFrom, @ProductionProgressTo, @PlayProgressFrom, @PlayProgressTo, @PaymentProgressFrom, @PaymentProgressTo, @DeliveryDateFrom, @DeliveryDateTo, @flags, @ProductionEndtDate", baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerIdParam, isTranferedParam, hasPrposalStatusParam, hasNotPrposalStatusParam, hasBaravordStatusParam, hasNotBaravordStatusParam, hasEstimateParam, subjectlevel1Param, subjectlevel2Param, hasproductionParam, eventIdParam, productionProgressFromParam, productionProgressToParam, playProgressFromParam, playProgressToParam, paymentProgressFromParam, paymentProgressToParam, deliveryDateFromParam, deliveryDateToParam, flagsParam, productionEndtDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByChannelsProgramsStatusAll2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByChannelsProgramsStatusCountReturnModel> SpByChannelsProgramsStatusCount(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? hasproduction)
        {
            int procResult;
            return SpByChannelsProgramsStatusCount(baseYear, portalId, groupId, progname, estimateNo, licenseNo, gradeId, structureId, structureTypeId, justDeleted, producerName, isTranfered, hasPrposalStatus, hasNotPrposalStatus, hasBaravordStatus, hasNotBaravordStatus, hasEstimate, subjectlevel1, subjectlevel2, hasproduction, out procResult);
        }

        public List<SpByChannelsProgramsStatusCountReturnModel> SpByChannelsProgramsStatusCount(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? hasproduction, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerNameParam = new SqlParameter { ParameterName = "@producerName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = producerName, Size = 50 };
            if (producerNameParam.Value == null)
                producerNameParam.Value = DBNull.Value;

            var isTranferedParam = new SqlParameter { ParameterName = "@isTranfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTranfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTranfered.HasValue)
                isTranferedParam.Value = DBNull.Value;

            var hasPrposalStatusParam = new SqlParameter { ParameterName = "@hasPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasPrposalStatus, Size = 1500 };
            if (hasPrposalStatusParam.Value == null)
                hasPrposalStatusParam.Value = DBNull.Value;

            var hasNotPrposalStatusParam = new SqlParameter { ParameterName = "@hasNotPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotPrposalStatus, Size = 1500 };
            if (hasNotPrposalStatusParam.Value == null)
                hasNotPrposalStatusParam.Value = DBNull.Value;

            var hasBaravordStatusParam = new SqlParameter { ParameterName = "@hasBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasBaravordStatus, Size = 1500 };
            if (hasBaravordStatusParam.Value == null)
                hasBaravordStatusParam.Value = DBNull.Value;

            var hasNotBaravordStatusParam = new SqlParameter { ParameterName = "@hasNotBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotBaravordStatus, Size = 1500 };
            if (hasNotBaravordStatusParam.Value == null)
                hasNotBaravordStatusParam.Value = DBNull.Value;

            var hasEstimateParam = new SqlParameter { ParameterName = "@hasEstimate", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasEstimate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasEstimate.HasValue)
                hasEstimateParam.Value = DBNull.Value;

            var subjectlevel1Param = new SqlParameter { ParameterName = "@subjectlevel1", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel1.HasValue)
                subjectlevel1Param.Value = DBNull.Value;

            var subjectlevel2Param = new SqlParameter { ParameterName = "@subjectlevel2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel2.HasValue)
                subjectlevel2Param.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ChannelsProgramsStatus_Count] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerName, @isTranfered, @hasPrposalStatus, @hasNotPrposalStatus, @hasBaravordStatus, @hasNotBaravordStatus, @hasEstimate, @subjectlevel1, @subjectlevel2, @hasproduction";
            var procResultData = Set<SpByChannelsProgramsStatusCountReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerNameParam, isTranferedParam, hasPrposalStatusParam, hasNotPrposalStatusParam, hasBaravordStatusParam, hasNotBaravordStatusParam, hasEstimateParam, subjectlevel1Param, subjectlevel2Param, hasproductionParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByChannelsProgramsStatusCountReturnModel>> SpByChannelsProgramsStatusCountAsync(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? hasproduction)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerNameParam = new SqlParameter { ParameterName = "@producerName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = producerName, Size = 50 };
            if (producerNameParam.Value == null)
                producerNameParam.Value = DBNull.Value;

            var isTranferedParam = new SqlParameter { ParameterName = "@isTranfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTranfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTranfered.HasValue)
                isTranferedParam.Value = DBNull.Value;

            var hasPrposalStatusParam = new SqlParameter { ParameterName = "@hasPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasPrposalStatus, Size = 1500 };
            if (hasPrposalStatusParam.Value == null)
                hasPrposalStatusParam.Value = DBNull.Value;

            var hasNotPrposalStatusParam = new SqlParameter { ParameterName = "@hasNotPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotPrposalStatus, Size = 1500 };
            if (hasNotPrposalStatusParam.Value == null)
                hasNotPrposalStatusParam.Value = DBNull.Value;

            var hasBaravordStatusParam = new SqlParameter { ParameterName = "@hasBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasBaravordStatus, Size = 1500 };
            if (hasBaravordStatusParam.Value == null)
                hasBaravordStatusParam.Value = DBNull.Value;

            var hasNotBaravordStatusParam = new SqlParameter { ParameterName = "@hasNotBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotBaravordStatus, Size = 1500 };
            if (hasNotBaravordStatusParam.Value == null)
                hasNotBaravordStatusParam.Value = DBNull.Value;

            var hasEstimateParam = new SqlParameter { ParameterName = "@hasEstimate", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasEstimate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasEstimate.HasValue)
                hasEstimateParam.Value = DBNull.Value;

            var subjectlevel1Param = new SqlParameter { ParameterName = "@subjectlevel1", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel1.HasValue)
                subjectlevel1Param.Value = DBNull.Value;

            var subjectlevel2Param = new SqlParameter { ParameterName = "@subjectlevel2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel2.HasValue)
                subjectlevel2Param.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ChannelsProgramsStatus_Count] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerName, @isTranfered, @hasPrposalStatus, @hasNotPrposalStatus, @hasBaravordStatus, @hasNotBaravordStatus, @hasEstimate, @subjectlevel1, @subjectlevel2, @hasproduction";
            var procResultData = await Set<SpByChannelsProgramsStatusCountReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerNameParam, isTranferedParam, hasPrposalStatusParam, hasNotPrposalStatusParam, hasBaravordStatusParam, hasNotBaravordStatusParam, hasEstimateParam, subjectlevel1Param, subjectlevel2Param, hasproductionParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByChannelsProgramsStatusCount2ReturnModel> SpByChannelsProgramsStatusCount2(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2)
        {
            int procResult;
            return SpByChannelsProgramsStatusCount2(baseYear, portalId, groupId, progname, estimateNo, licenseNo, gradeId, structureId, structureTypeId, justDeleted, producerName, isTranfered, hasPrposalStatus, hasNotPrposalStatus, hasBaravordStatus, hasNotBaravordStatus, hasEstimate, subjectlevel1, subjectlevel2, out procResult);
        }

        public List<SpByChannelsProgramsStatusCount2ReturnModel> SpByChannelsProgramsStatusCount2(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerNameParam = new SqlParameter { ParameterName = "@producerName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = producerName, Size = 50 };
            if (producerNameParam.Value == null)
                producerNameParam.Value = DBNull.Value;

            var isTranferedParam = new SqlParameter { ParameterName = "@isTranfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTranfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTranfered.HasValue)
                isTranferedParam.Value = DBNull.Value;

            var hasPrposalStatusParam = new SqlParameter { ParameterName = "@hasPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasPrposalStatus, Size = 1500 };
            if (hasPrposalStatusParam.Value == null)
                hasPrposalStatusParam.Value = DBNull.Value;

            var hasNotPrposalStatusParam = new SqlParameter { ParameterName = "@hasNotPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotPrposalStatus, Size = 1500 };
            if (hasNotPrposalStatusParam.Value == null)
                hasNotPrposalStatusParam.Value = DBNull.Value;

            var hasBaravordStatusParam = new SqlParameter { ParameterName = "@hasBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasBaravordStatus, Size = 1500 };
            if (hasBaravordStatusParam.Value == null)
                hasBaravordStatusParam.Value = DBNull.Value;

            var hasNotBaravordStatusParam = new SqlParameter { ParameterName = "@hasNotBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotBaravordStatus, Size = 1500 };
            if (hasNotBaravordStatusParam.Value == null)
                hasNotBaravordStatusParam.Value = DBNull.Value;

            var hasEstimateParam = new SqlParameter { ParameterName = "@hasEstimate", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasEstimate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasEstimate.HasValue)
                hasEstimateParam.Value = DBNull.Value;

            var subjectlevel1Param = new SqlParameter { ParameterName = "@subjectlevel1", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel1.HasValue)
                subjectlevel1Param.Value = DBNull.Value;

            var subjectlevel2Param = new SqlParameter { ParameterName = "@subjectlevel2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel2.HasValue)
                subjectlevel2Param.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ChannelsProgramsStatus_Count2] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerName, @isTranfered, @hasPrposalStatus, @hasNotPrposalStatus, @hasBaravordStatus, @hasNotBaravordStatus, @hasEstimate, @subjectlevel1, @subjectlevel2";
            var procResultData = Set<SpByChannelsProgramsStatusCount2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerNameParam, isTranferedParam, hasPrposalStatusParam, hasNotPrposalStatusParam, hasBaravordStatusParam, hasNotBaravordStatusParam, hasEstimateParam, subjectlevel1Param, subjectlevel2Param, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByChannelsProgramsStatusCount2ReturnModel>> SpByChannelsProgramsStatusCount2Async(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerNameParam = new SqlParameter { ParameterName = "@producerName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = producerName, Size = 50 };
            if (producerNameParam.Value == null)
                producerNameParam.Value = DBNull.Value;

            var isTranferedParam = new SqlParameter { ParameterName = "@isTranfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTranfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTranfered.HasValue)
                isTranferedParam.Value = DBNull.Value;

            var hasPrposalStatusParam = new SqlParameter { ParameterName = "@hasPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasPrposalStatus, Size = 1500 };
            if (hasPrposalStatusParam.Value == null)
                hasPrposalStatusParam.Value = DBNull.Value;

            var hasNotPrposalStatusParam = new SqlParameter { ParameterName = "@hasNotPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotPrposalStatus, Size = 1500 };
            if (hasNotPrposalStatusParam.Value == null)
                hasNotPrposalStatusParam.Value = DBNull.Value;

            var hasBaravordStatusParam = new SqlParameter { ParameterName = "@hasBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasBaravordStatus, Size = 1500 };
            if (hasBaravordStatusParam.Value == null)
                hasBaravordStatusParam.Value = DBNull.Value;

            var hasNotBaravordStatusParam = new SqlParameter { ParameterName = "@hasNotBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotBaravordStatus, Size = 1500 };
            if (hasNotBaravordStatusParam.Value == null)
                hasNotBaravordStatusParam.Value = DBNull.Value;

            var hasEstimateParam = new SqlParameter { ParameterName = "@hasEstimate", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasEstimate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasEstimate.HasValue)
                hasEstimateParam.Value = DBNull.Value;

            var subjectlevel1Param = new SqlParameter { ParameterName = "@subjectlevel1", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel1.HasValue)
                subjectlevel1Param.Value = DBNull.Value;

            var subjectlevel2Param = new SqlParameter { ParameterName = "@subjectlevel2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel2.HasValue)
                subjectlevel2Param.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ChannelsProgramsStatus_Count2] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerName, @isTranfered, @hasPrposalStatus, @hasNotPrposalStatus, @hasBaravordStatus, @hasNotBaravordStatus, @hasEstimate, @subjectlevel1, @subjectlevel2";
            var procResultData = await Set<SpByChannelsProgramsStatusCount2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerNameParam, isTranferedParam, hasPrposalStatusParam, hasNotPrposalStatusParam, hasBaravordStatusParam, hasNotBaravordStatusParam, hasEstimateParam, subjectlevel1Param, subjectlevel2Param)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByEstimateOutlineReturnModel> SpByEstimateOutline(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? approachId)
        {
            int procResult;
            return SpByEstimateOutline(baseYear, portalId, fromDate, toDate, groupId, progname, estimateNo, gradeId, structureId, structureTypeId, justDeleted, approachId, out procResult);
        }

        public List<SpByEstimateOutlineReturnModel> SpByEstimateOutline(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? approachId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_EstimateOutline] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @approachId";
            var procResultData = Set<SpByEstimateOutlineReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, approachIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByEstimateOutlineReturnModel>> SpByEstimateOutlineAsync(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? approachId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_EstimateOutline] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @approachId";
            var procResultData = await Set<SpByEstimateOutlineReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, approachIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByGeneralVu(int? baseYear, string channelIds, string flags, string structureTypeIDs)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 1000 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var structureTypeIDsParam = new SqlParameter { ParameterName = "@StructureTypeIDs", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = structureTypeIDs, Size = 1000 };
            if (structureTypeIDsParam.Value == null)
                structureTypeIDsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_GeneralVU] @BaseYear, @channelIds, @flags, @StructureTypeIDs", baseYearParam, channelIdsParam, flagsParam, structureTypeIDsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByGeneralVuAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByGeneralVu2(int? baseYear, string channelIds, string flags, string structureTypeIDs)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 1000 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var structureTypeIDsParam = new SqlParameter { ParameterName = "@StructureTypeIDs", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = structureTypeIDs, Size = 1000 };
            if (structureTypeIDsParam.Value == null)
                structureTypeIDsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_GeneralVU2] @BaseYear, @channelIds, @flags, @StructureTypeIDs", baseYearParam, channelIdsParam, flagsParam, structureTypeIDsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByGeneralVu2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByGeneralVu3(int? baseYear, string channelIds, string flags, string structureTypeIDs)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 1000 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var structureTypeIDsParam = new SqlParameter { ParameterName = "@StructureTypeIDs", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = structureTypeIDs, Size = 1000 };
            if (structureTypeIDsParam.Value == null)
                structureTypeIDsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_GeneralVU3] @BaseYear, @channelIds, @flags, @StructureTypeIDs", baseYearParam, channelIdsParam, flagsParam, structureTypeIDsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByGeneralVu3Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByGetAgentDetailReturnModel> SpByGetAgentDetail(int? agentId, int? baseYear)
        {
            int procResult;
            return SpByGetAgentDetail(agentId, baseYear, out procResult);
        }

        public List<SpByGetAgentDetailReturnModel> SpByGetAgentDetail(int? agentId, int? baseYear, out int procResult)
        {
            var agentIdParam = new SqlParameter { ParameterName = "@AgentId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = agentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!agentId.HasValue)
                agentIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_GetAgentDetail] @AgentId, @BaseYear";
            var procResultData = Set<SpByGetAgentDetailReturnModel>()
                .FromSqlRaw(sqlCommand, agentIdParam, baseYearParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByGetAgentDetailReturnModel>> SpByGetAgentDetailAsync(int? agentId, int? baseYear)
        {
            var agentIdParam = new SqlParameter { ParameterName = "@AgentId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = agentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!agentId.HasValue)
                agentIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_GetAgentDetail] @AgentId, @BaseYear";
            var procResultData = await Set<SpByGetAgentDetailReturnModel>()
                .FromSqlRaw(sqlCommand, agentIdParam, baseYearParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByGradeByChannelsReturnModel> SpByGradeByChannels(int? baseYear, string channelIds)
        {
            int procResult;
            return SpByGradeByChannels(baseYear, channelIds, out procResult);
        }

        public List<SpByGradeByChannelsReturnModel> SpByGradeByChannels(int? baseYear, string channelIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_GradeByChannels] @BaseYear, @channelIds";
            var procResultData = Set<SpByGradeByChannelsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByGradeByChannelsReturnModel>> SpByGradeByChannelsAsync(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_GradeByChannels] @BaseYear, @channelIds";
            var procResultData = await Set<SpByGradeByChannelsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByGradeByChannels2(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_GradeByChannels2] @BaseYear, @channelIds", baseYearParam, channelIdsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByGradeByChannels2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByGroupPerformancePerGradeReturnModel> SpByGroupPerformancePerGrade(int? baseYear, int? groupId)
        {
            int procResult;
            return SpByGroupPerformancePerGrade(baseYear, groupId, out procResult);
        }

        public List<SpByGroupPerformancePerGradeReturnModel> SpByGroupPerformancePerGrade(int? baseYear, int? groupId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@GroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_GroupPerformancePerGrade] @BaseYear, @GroupID";
            var procResultData = Set<SpByGroupPerformancePerGradeReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, groupIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByGroupPerformancePerGradeReturnModel>> SpByGroupPerformancePerGradeAsync(int? baseYear, int? groupId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@GroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_GroupPerformancePerGrade] @BaseYear, @GroupID";
            var procResultData = await Set<SpByGroupPerformancePerGradeReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, groupIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByGroupsproductionReturnModel> SpByGroupsproduction(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            int procResult;
            return SpByGroupsproduction(baseYear, portalId, groupIds, fromdate, todate, out procResult);
        }

        public List<SpByGroupsproductionReturnModel> SpByGroupsproduction(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@GroupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_Groupsproduction] @BaseYear, @PortalID, @GroupIds, @fromdate, @todate";
            var procResultData = Set<SpByGroupsproductionReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdsParam, fromdateParam, todateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByGroupsproductionReturnModel>> SpByGroupsproductionAsync(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@GroupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_Groupsproduction] @BaseYear, @PortalID, @GroupIds, @fromdate, @todate";
            var procResultData = await Set<SpByGroupsproductionReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdsParam, fromdateParam, todateParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByGroupsproduction2(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@GroupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_Groupsproduction2] @BaseYear, @PortalID, @GroupIds, @fromdate, @todate", baseYearParam, portalIdParam, groupIdsParam, fromdateParam, todateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByGroupsproduction2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByPaymentDetailByBaseYearReturnModel> SpByPaymentDetailByBaseYear(int? requestId, int? portalId)
        {
            int procResult;
            return SpByPaymentDetailByBaseYear(requestId, portalId, out procResult);
        }

        public List<SpByPaymentDetailByBaseYearReturnModel> SpByPaymentDetailByBaseYear(int? requestId, int? portalId, out int procResult)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@requestId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_PaymentDetailByBaseYear] @requestId, @portalId";
            var procResultData = Set<SpByPaymentDetailByBaseYearReturnModel>()
                .FromSqlRaw(sqlCommand, requestIdParam, portalIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByPaymentDetailByBaseYearReturnModel>> SpByPaymentDetailByBaseYearAsync(int? requestId, int? portalId)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@requestId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_PaymentDetailByBaseYear] @requestId, @portalId";
            var procResultData = await Set<SpByPaymentDetailByBaseYearReturnModel>()
                .FromSqlRaw(sqlCommand, requestIdParam, portalIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByPaymentReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? hasproduction, int? prodPercentFrom, int? prodPercentto, int? haspayment, int? paymentPercentFrom, int? paymentPercentto, int? orderbywhat, int? approachId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDate.GetValueOrDefault() };
            if (!fromDate.HasValue)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDate.GetValueOrDefault() };
            if (!toDate.HasValue)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerIdParam = new SqlParameter { ParameterName = "@producerId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = producerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!producerId.HasValue)
                producerIdParam.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            var prodPercentFromParam = new SqlParameter { ParameterName = "@prodPercentFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = prodPercentFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!prodPercentFrom.HasValue)
                prodPercentFromParam.Value = DBNull.Value;

            var prodPercenttoParam = new SqlParameter { ParameterName = "@prodPercentto", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = prodPercentto.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!prodPercentto.HasValue)
                prodPercenttoParam.Value = DBNull.Value;

            var haspaymentParam = new SqlParameter { ParameterName = "@haspayment", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = haspayment.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!haspayment.HasValue)
                haspaymentParam.Value = DBNull.Value;

            var paymentPercentFromParam = new SqlParameter { ParameterName = "@paymentPercentFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentPercentFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentPercentFrom.HasValue)
                paymentPercentFromParam.Value = DBNull.Value;

            var paymentPercenttoParam = new SqlParameter { ParameterName = "@paymentPercentto", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentPercentto.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentPercentto.HasValue)
                paymentPercenttoParam.Value = DBNull.Value;

            var orderbywhatParam = new SqlParameter { ParameterName = "@orderbywhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbywhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbywhat.HasValue)
                orderbywhatParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_PaymentReport] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerId, @hasproduction, @prodPercentFrom, @prodPercentto, @haspayment, @paymentPercentFrom, @paymentPercentto, @orderbywhat, @approachId", baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerIdParam, hasproductionParam, prodPercentFromParam, prodPercenttoParam, haspaymentParam, paymentPercentFromParam, paymentPercenttoParam, orderbywhatParam, approachIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByPaymentReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByPerformanceOfGroupByGradeAndChannelIdReturnModel> SpByPerformanceOfGroupByGradeAndChannelId(int? baseYear, int? channelIds, int? gradeId, int? structureId, int? approachId, string flags, int? eventId)
        {
            int procResult;
            return SpByPerformanceOfGroupByGradeAndChannelId(baseYear, channelIds, gradeId, structureId, approachId, flags, eventId, out procResult);
        }

        public List<SpByPerformanceOfGroupByGradeAndChannelIdReturnModel> SpByPerformanceOfGroupByGradeAndChannelId(int? baseYear, int? channelIds, int? gradeId, int? structureId, int? approachId, string flags, int? eventId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelIds.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelIds.HasValue)
                channelIdsParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_PerformanceOfGroupByGradeAndChannelId] @BaseYear, @channelIds, @gradeId, @structureId, @approachId, @flags, @eventId";
            var procResultData = Set<SpByPerformanceOfGroupByGradeAndChannelIdReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, gradeIdParam, structureIdParam, approachIdParam, flagsParam, eventIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByPerformanceOfGroupByGradeAndChannelIdReturnModel>> SpByPerformanceOfGroupByGradeAndChannelIdAsync(int? baseYear, int? channelIds, int? gradeId, int? structureId, int? approachId, string flags, int? eventId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelIds.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelIds.HasValue)
                channelIdsParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_PerformanceOfGroupByGradeAndChannelId] @BaseYear, @channelIds, @gradeId, @structureId, @approachId, @flags, @eventId";
            var procResultData = await Set<SpByPerformanceOfGroupByGradeAndChannelIdReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, gradeIdParam, structureIdParam, approachIdParam, flagsParam, eventIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByPerformanceOfGroupByGradeAndChannelId2(int? baseYear, int? channelIds, int? gradeId, int? structureId, int? approachId, string flags, int? eventId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelIds.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelIds.HasValue)
                channelIdsParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_PerformanceOfGroupByGradeAndChannelId2] @BaseYear, @channelIds, @gradeId, @structureId, @approachId, @flags, @eventId", baseYearParam, channelIdsParam, gradeIdParam, structureIdParam, approachIdParam, flagsParam, eventIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByPerformanceOfGroupByGradeAndChannelId2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByPortalPerformancePerGradeReturnModel> SpByPortalPerformancePerGrade(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, int? eventId)
        {
            int procResult;
            return SpByPortalPerformancePerGrade(baseYear, portalId, structureId, approachId, flags, eventId, out procResult);
        }

        public List<SpByPortalPerformancePerGradeReturnModel> SpByPortalPerformancePerGrade(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, int? eventId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_PortalPerformancePerGrade] @BaseYear, @PortalID, @structureId, @approachId, @flags, @eventId";
            var procResultData = Set<SpByPortalPerformancePerGradeReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, structureIdParam, approachIdParam, flagsParam, eventIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByPortalPerformancePerGradeReturnModel>> SpByPortalPerformancePerGradeAsync(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, int? eventId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_PortalPerformancePerGrade] @BaseYear, @PortalID, @structureId, @approachId, @flags, @eventId";
            var procResultData = await Set<SpByPortalPerformancePerGradeReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, structureIdParam, approachIdParam, flagsParam, eventIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByPortalPerformancePerGrade2(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, int? eventId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_PortalPerformancePerGrade2] @BaseYear, @PortalID, @structureId, @approachId, @flags, @eventId", baseYearParam, portalIdParam, structureIdParam, approachIdParam, flagsParam, eventIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByPortalPerformancePerGrade2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByPortalPerformancePerGradeNamayesheiReturnModel> SpByPortalPerformancePerGradeNamayeshei(int? baseYear, int? portalId, int? structureId, int? approachId, string flags)
        {
            int procResult;
            return SpByPortalPerformancePerGradeNamayeshei(baseYear, portalId, structureId, approachId, flags, out procResult);
        }

        public List<SpByPortalPerformancePerGradeNamayesheiReturnModel> SpByPortalPerformancePerGradeNamayeshei(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_PortalPerformancePerGradeNamayeshei] @BaseYear, @PortalID, @structureId, @approachId, @flags";
            var procResultData = Set<SpByPortalPerformancePerGradeNamayesheiReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, structureIdParam, approachIdParam, flagsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByPortalPerformancePerGradeNamayesheiReturnModel>> SpByPortalPerformancePerGradeNamayesheiAsync(int? baseYear, int? portalId, int? structureId, int? approachId, string flags)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_PortalPerformancePerGradeNamayeshei] @BaseYear, @PortalID, @structureId, @approachId, @flags";
            var procResultData = await Set<SpByPortalPerformancePerGradeNamayesheiReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, structureIdParam, approachIdParam, flagsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByPortalPerformancePerGradeNamayeshei2ReturnModel> SpByPortalPerformancePerGradeNamayeshei2(int? baseYear, int? portalId, int? structureId, int? approachId, string flags)
        {
            int procResult;
            return SpByPortalPerformancePerGradeNamayeshei2(baseYear, portalId, structureId, approachId, flags, out procResult);
        }

        public List<SpByPortalPerformancePerGradeNamayeshei2ReturnModel> SpByPortalPerformancePerGradeNamayeshei2(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_PortalPerformancePerGradeNamayeshei_2] @BaseYear, @PortalID, @structureId, @approachId, @flags";
            var procResultData = Set<SpByPortalPerformancePerGradeNamayeshei2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, structureIdParam, approachIdParam, flagsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByPortalPerformancePerGradeNamayeshei2ReturnModel>> SpByPortalPerformancePerGradeNamayeshei2Async(int? baseYear, int? portalId, int? structureId, int? approachId, string flags)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_PortalPerformancePerGradeNamayeshei_2] @BaseYear, @PortalID, @structureId, @approachId, @flags";
            var procResultData = await Set<SpByPortalPerformancePerGradeNamayeshei2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, structureIdParam, approachIdParam, flagsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByProductionGradesByChannelGroupReturnModel> SpByProductionGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            int procResult;
            return SpByProductionGradesByChannelGroup(baseYear, channelIds, groupIds, fromdate, todate, out procResult);
        }

        public List<SpByProductionGradesByChannelGroupReturnModel> SpByProductionGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ProductionGradesByChannelGroup] @BaseYear, @channelIds, @groupIds, @fromdate, @todate";
            var procResultData = Set<SpByProductionGradesByChannelGroupReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam, fromdateParam, todateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByProductionGradesByChannelGroupReturnModel>> SpByProductionGradesByChannelGroupAsync(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ProductionGradesByChannelGroup] @BaseYear, @channelIds, @groupIds, @fromdate, @todate";
            var procResultData = await Set<SpByProductionGradesByChannelGroupReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam, fromdateParam, todateParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByProductionGradesByChannelGroup2(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ProductionGradesByChannelGroup2] @BaseYear, @channelIds, @groupIds, @fromdate, @todate", baseYearParam, channelIdsParam, groupIdsParam, fromdateParam, todateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByProductionGradesByChannelGroup2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByProductionProgressReturnModel> SpByProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo)
        {
            int procResult;
            return SpByProductionProgress(baseYear, portalId, fromDate, toDate, groupId, progname, estimateNo, gradeId, structureId, structureTypeId, justDeleted, writingProgressFrom, writingProgressTo, beforeProgressFrom, beforeProgressTo, durringProgressFrom, durringProgressTo, afterProgressFrom, afterProgressTo, out procResult);
        }

        public List<SpByProductionProgressReturnModel> SpByProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var beforeProgressFromParam = new SqlParameter { ParameterName = "@BeforeProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressFrom.HasValue)
                beforeProgressFromParam.Value = DBNull.Value;

            var beforeProgressToParam = new SqlParameter { ParameterName = "@BeforeProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressTo.HasValue)
                beforeProgressToParam.Value = DBNull.Value;

            var durringProgressFromParam = new SqlParameter { ParameterName = "@DurringProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressFrom.HasValue)
                durringProgressFromParam.Value = DBNull.Value;

            var durringProgressToParam = new SqlParameter { ParameterName = "@DurringProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressTo.HasValue)
                durringProgressToParam.Value = DBNull.Value;

            var afterProgressFromParam = new SqlParameter { ParameterName = "@AfterProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressFrom.HasValue)
                afterProgressFromParam.Value = DBNull.Value;

            var afterProgressToParam = new SqlParameter { ParameterName = "@AfterProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressTo.HasValue)
                afterProgressToParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ProductionProgress] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @WritingProgressFrom, @WritingProgressTo, @BeforeProgressFrom, @BeforeProgressTo, @DurringProgressFrom, @DurringProgressTo, @AfterProgressFrom, @AfterProgressTo";
            var procResultData = Set<SpByProductionProgressReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, writingProgressFromParam, writingProgressToParam, beforeProgressFromParam, beforeProgressToParam, durringProgressFromParam, durringProgressToParam, afterProgressFromParam, afterProgressToParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByProductionProgressReturnModel>> SpByProductionProgressAsync(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var beforeProgressFromParam = new SqlParameter { ParameterName = "@BeforeProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressFrom.HasValue)
                beforeProgressFromParam.Value = DBNull.Value;

            var beforeProgressToParam = new SqlParameter { ParameterName = "@BeforeProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressTo.HasValue)
                beforeProgressToParam.Value = DBNull.Value;

            var durringProgressFromParam = new SqlParameter { ParameterName = "@DurringProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressFrom.HasValue)
                durringProgressFromParam.Value = DBNull.Value;

            var durringProgressToParam = new SqlParameter { ParameterName = "@DurringProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressTo.HasValue)
                durringProgressToParam.Value = DBNull.Value;

            var afterProgressFromParam = new SqlParameter { ParameterName = "@AfterProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressFrom.HasValue)
                afterProgressFromParam.Value = DBNull.Value;

            var afterProgressToParam = new SqlParameter { ParameterName = "@AfterProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressTo.HasValue)
                afterProgressToParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ProductionProgress] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @WritingProgressFrom, @WritingProgressTo, @BeforeProgressFrom, @BeforeProgressTo, @DurringProgressFrom, @DurringProgressTo, @AfterProgressFrom, @AfterProgressTo";
            var procResultData = await Set<SpByProductionProgressReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, writingProgressFromParam, writingProgressToParam, beforeProgressFromParam, beforeProgressToParam, durringProgressFromParam, durringProgressToParam, afterProgressFromParam, afterProgressToParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByProductionProgress2(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? keyProductionTotal, int? keyAfterProductionTotal, int? keyBeforeProductionTotal, int? keyWritingTotal, bool? allRecord, int? pageNumber, int? rowsPerPage, out int? totalRowsCount)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var beforeProgressFromParam = new SqlParameter { ParameterName = "@BeforeProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressFrom.HasValue)
                beforeProgressFromParam.Value = DBNull.Value;

            var beforeProgressToParam = new SqlParameter { ParameterName = "@BeforeProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressTo.HasValue)
                beforeProgressToParam.Value = DBNull.Value;

            var durringProgressFromParam = new SqlParameter { ParameterName = "@DurringProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressFrom.HasValue)
                durringProgressFromParam.Value = DBNull.Value;

            var durringProgressToParam = new SqlParameter { ParameterName = "@DurringProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressTo.HasValue)
                durringProgressToParam.Value = DBNull.Value;

            var afterProgressFromParam = new SqlParameter { ParameterName = "@AfterProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressFrom.HasValue)
                afterProgressFromParam.Value = DBNull.Value;

            var afterProgressToParam = new SqlParameter { ParameterName = "@AfterProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressTo.HasValue)
                afterProgressToParam.Value = DBNull.Value;

            var keyProductionTotalParam = new SqlParameter { ParameterName = "@Key_Production_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyProductionTotal.HasValue)
                keyProductionTotalParam.Value = DBNull.Value;

            var keyAfterProductionTotalParam = new SqlParameter { ParameterName = "@Key_AfterProduction_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyAfterProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyAfterProductionTotal.HasValue)
                keyAfterProductionTotalParam.Value = DBNull.Value;

            var keyBeforeProductionTotalParam = new SqlParameter { ParameterName = "@Key_BeforeProduction_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyBeforeProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyBeforeProductionTotal.HasValue)
                keyBeforeProductionTotalParam.Value = DBNull.Value;

            var keyWritingTotalParam = new SqlParameter { ParameterName = "@Key_Writing_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyWritingTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyWritingTotal.HasValue)
                keyWritingTotalParam.Value = DBNull.Value;

            var allRecordParam = new SqlParameter { ParameterName = "@AllRecord", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = allRecord.GetValueOrDefault() };
            if (!allRecord.HasValue)
                allRecordParam.Value = DBNull.Value;

            var pageNumberParam = new SqlParameter { ParameterName = "@PageNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = DBNull.Value;

            var rowsPerPageParam = new SqlParameter { ParameterName = "@RowsPerPage", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = rowsPerPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowsPerPage.HasValue)
                rowsPerPageParam.Value = DBNull.Value;

            var totalRowsCountParam = new SqlParameter { ParameterName = "@TotalRowsCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ProductionProgress_2] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @WritingProgressFrom, @WritingProgressTo, @BeforeProgressFrom, @BeforeProgressTo, @DurringProgressFrom, @DurringProgressTo, @AfterProgressFrom, @AfterProgressTo, @Key_Production_Total, @Key_AfterProduction_Total, @Key_BeforeProduction_Total, @Key_Writing_Total, @AllRecord, @PageNumber, @RowsPerPage, @TotalRowsCount OUTPUT", baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, writingProgressFromParam, writingProgressToParam, beforeProgressFromParam, beforeProgressToParam, durringProgressFromParam, durringProgressToParam, afterProgressFromParam, afterProgressToParam, keyProductionTotalParam, keyAfterProductionTotalParam, keyBeforeProductionTotalParam, keyWritingTotalParam, allRecordParam, pageNumberParam, rowsPerPageParam, totalRowsCountParam, procResultParam);

            if (IsSqlParameterNull(totalRowsCountParam))
                totalRowsCount = null;
            else
                totalRowsCount = (int) totalRowsCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpByProductionProgress2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByProductionProgress3(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? productionTotal, int? afterProductionTotal, int? beforeProductionTotal, int? writingTotal, int? pageNumber, int? rowsPerPage, out int? totalRowsCount)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var beforeProgressFromParam = new SqlParameter { ParameterName = "@BeforeProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressFrom.HasValue)
                beforeProgressFromParam.Value = DBNull.Value;

            var beforeProgressToParam = new SqlParameter { ParameterName = "@BeforeProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressTo.HasValue)
                beforeProgressToParam.Value = DBNull.Value;

            var durringProgressFromParam = new SqlParameter { ParameterName = "@DurringProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressFrom.HasValue)
                durringProgressFromParam.Value = DBNull.Value;

            var durringProgressToParam = new SqlParameter { ParameterName = "@DurringProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressTo.HasValue)
                durringProgressToParam.Value = DBNull.Value;

            var afterProgressFromParam = new SqlParameter { ParameterName = "@AfterProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressFrom.HasValue)
                afterProgressFromParam.Value = DBNull.Value;

            var afterProgressToParam = new SqlParameter { ParameterName = "@AfterProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressTo.HasValue)
                afterProgressToParam.Value = DBNull.Value;

            var productionTotalParam = new SqlParameter { ParameterName = "@Production_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionTotal.HasValue)
                productionTotalParam.Value = DBNull.Value;

            var afterProductionTotalParam = new SqlParameter { ParameterName = "@AfterProduction_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProductionTotal.HasValue)
                afterProductionTotalParam.Value = DBNull.Value;

            var beforeProductionTotalParam = new SqlParameter { ParameterName = "@BeforeProduction_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProductionTotal.HasValue)
                beforeProductionTotalParam.Value = DBNull.Value;

            var writingTotalParam = new SqlParameter { ParameterName = "@Writing_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingTotal.HasValue)
                writingTotalParam.Value = DBNull.Value;

            var pageNumberParam = new SqlParameter { ParameterName = "@PageNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = DBNull.Value;

            var rowsPerPageParam = new SqlParameter { ParameterName = "@RowsPerPage", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = rowsPerPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowsPerPage.HasValue)
                rowsPerPageParam.Value = DBNull.Value;

            var totalRowsCountParam = new SqlParameter { ParameterName = "@TotalRowsCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_BY_ProductionProgress_3] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @WritingProgressFrom, @WritingProgressTo, @BeforeProgressFrom, @BeforeProgressTo, @DurringProgressFrom, @DurringProgressTo, @AfterProgressFrom, @AfterProgressTo, @Production_Total, @AfterProduction_Total, @BeforeProduction_Total, @Writing_Total, @PageNumber, @RowsPerPage, @TotalRowsCount OUTPUT", baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, writingProgressFromParam, writingProgressToParam, beforeProgressFromParam, beforeProgressToParam, durringProgressFromParam, durringProgressToParam, afterProgressFromParam, afterProgressToParam, productionTotalParam, afterProductionTotalParam, beforeProductionTotalParam, writingTotalParam, pageNumberParam, rowsPerPageParam, totalRowsCountParam, procResultParam);

            if (IsSqlParameterNull(totalRowsCountParam))
                totalRowsCount = null;
            else
                totalRowsCount = (int) totalRowsCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpByProductionProgress3Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByProductNamayeshGradesByChannelGroupReturnModel> SpByProductNamayeshGradesByChannelGroup(int? baseYear, string channelIds, string groupIds)
        {
            int procResult;
            return SpByProductNamayeshGradesByChannelGroup(baseYear, channelIds, groupIds, out procResult);
        }

        public List<SpByProductNamayeshGradesByChannelGroupReturnModel> SpByProductNamayeshGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ProductNamayeshGradesByChannelGroup] @BaseYear, @channelIds, @groupIds";
            var procResultData = Set<SpByProductNamayeshGradesByChannelGroupReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByProductNamayeshGradesByChannelGroupReturnModel>> SpByProductNamayeshGradesByChannelGroupAsync(int? baseYear, string channelIds, string groupIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ProductNamayeshGradesByChannelGroup] @BaseYear, @channelIds, @groupIds";
            var procResultData = await Set<SpByProductNamayeshGradesByChannelGroupReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByProductNamayeshGradesByChannelGroup2ReturnModel> SpByProductNamayeshGradesByChannelGroup2(int? baseYear, string channelIds, string groupIds)
        {
            int procResult;
            return SpByProductNamayeshGradesByChannelGroup2(baseYear, channelIds, groupIds, out procResult);
        }

        public List<SpByProductNamayeshGradesByChannelGroup2ReturnModel> SpByProductNamayeshGradesByChannelGroup2(int? baseYear, string channelIds, string groupIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ProductNamayeshGradesByChannelGroup_2] @BaseYear, @channelIds, @groupIds";
            var procResultData = Set<SpByProductNamayeshGradesByChannelGroup2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByProductNamayeshGradesByChannelGroup2ReturnModel>> SpByProductNamayeshGradesByChannelGroup2Async(int? baseYear, string channelIds, string groupIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ProductNamayeshGradesByChannelGroup_2] @BaseYear, @channelIds, @groupIds";
            var procResultData = await Set<SpByProductNamayeshGradesByChannelGroup2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByProgramsFlagReturnModel> SpByProgramsFlag(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags, int? pagesize, int? startrow)
        {
            int procResult;
            return SpByProgramsFlag(baseYear, portalId, groupId, progname, estimateNo, licenseNo, gradeId, structureId, structureTypeId, flags, pagesize, startrow, out procResult);
        }

        public List<SpByProgramsFlagReturnModel> SpByProgramsFlag(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags, int? pagesize, int? startrow, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 10 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ProgramsFlag] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @flags, @pagesize, @startrow";
            var procResultData = Set<SpByProgramsFlagReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, flagsParam, pagesizeParam, startrowParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByProgramsFlagReturnModel>> SpByProgramsFlagAsync(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags, int? pagesize, int? startrow)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 10 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ProgramsFlag] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @flags, @pagesize, @startrow";
            var procResultData = await Set<SpByProgramsFlagReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, flagsParam, pagesizeParam, startrowParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByProgramsFlagAllReturnModel> SpByProgramsFlagAll(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags)
        {
            int procResult;
            return SpByProgramsFlagAll(baseYear, portalId, groupId, progname, estimateNo, licenseNo, gradeId, structureId, structureTypeId, flags, out procResult);
        }

        public List<SpByProgramsFlagAllReturnModel> SpByProgramsFlagAll(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 10 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ProgramsFlagAll] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @flags";
            var procResultData = Set<SpByProgramsFlagAllReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, flagsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByProgramsFlagAllReturnModel>> SpByProgramsFlagAllAsync(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 10 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ProgramsFlagAll] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @flags";
            var procResultData = await Set<SpByProgramsFlagAllReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, flagsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByProgramStructuresReturnModel> SpByProgramStructures(int? baseYear, string channelIds)
        {
            int procResult;
            return SpByProgramStructures(baseYear, channelIds, out procResult);
        }

        public List<SpByProgramStructuresReturnModel> SpByProgramStructures(int? baseYear, string channelIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ProgramStructures] @BaseYear, @channelIds";
            var procResultData = Set<SpByProgramStructuresReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByProgramStructuresReturnModel>> SpByProgramStructuresAsync(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ProgramStructures] @BaseYear, @channelIds";
            var procResultData = await Set<SpByProgramStructuresReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByProgramStructures2ReturnModel> SpByProgramStructures2(int? baseYear, string channelIds)
        {
            int procResult;
            return SpByProgramStructures2(baseYear, channelIds, out procResult);
        }

        public List<SpByProgramStructures2ReturnModel> SpByProgramStructures2(int? baseYear, string channelIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_ProgramStructures2] @BaseYear, @channelIds";
            var procResultData = Set<SpByProgramStructures2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByProgramStructures2ReturnModel>> SpByProgramStructures2Async(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_ProgramStructures2] @BaseYear, @channelIds";
            var procResultData = await Set<SpByProgramStructures2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByRequestAgentsReturnModel> SpByRequestAgents(int? baseYear, int? portalId, int? orderbyWhat)
        {
            int procResult;
            return SpByRequestAgents(baseYear, portalId, orderbyWhat, out procResult);
        }

        public List<SpByRequestAgentsReturnModel> SpByRequestAgents(int? baseYear, int? portalId, int? orderbyWhat, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@OrderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_RequestAgents] @BaseYear, @PortalID, @OrderbyWhat";
            var procResultData = Set<SpByRequestAgentsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, orderbyWhatParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByRequestAgentsReturnModel>> SpByRequestAgentsAsync(int? baseYear, int? portalId, int? orderbyWhat)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@OrderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_RequestAgents] @BaseYear, @PortalID, @OrderbyWhat";
            var procResultData = await Set<SpByRequestAgentsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, orderbyWhatParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpBySubjectL3CloudReturnModel> SpBySubjectL3Cloud(int? baseYear, int? portalId, int? gradeId, int? structureId, string flags)
        {
            int procResult;
            return SpBySubjectL3Cloud(baseYear, portalId, gradeId, structureId, flags, out procResult);
        }

        public List<SpBySubjectL3CloudReturnModel> SpBySubjectL3Cloud(int? baseYear, int? portalId, int? gradeId, int? structureId, string flags, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_by_Subject_l3_Cloud] @BaseYear, @portalId, @gradeId, @structureId, @flags";
            var procResultData = Set<SpBySubjectL3CloudReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, gradeIdParam, structureIdParam, flagsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpBySubjectL3CloudReturnModel>> SpBySubjectL3CloudAsync(int? baseYear, int? portalId, int? gradeId, int? structureId, string flags)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = flags, Size = 16 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_by_Subject_l3_Cloud] @BaseYear, @portalId, @gradeId, @structureId, @flags";
            var procResultData = await Set<SpBySubjectL3CloudReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, gradeIdParam, structureIdParam, flagsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpBySubjectPercentReturnModel> SpBySubjectPercent(int? baseYear, string channelIds)
        {
            int procResult;
            return SpBySubjectPercent(baseYear, channelIds, out procResult);
        }

        public List<SpBySubjectPercentReturnModel> SpBySubjectPercent(int? baseYear, string channelIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_SubjectPercent] @BaseYear, @channelIds";
            var procResultData = Set<SpBySubjectPercentReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpBySubjectPercentReturnModel>> SpBySubjectPercentAsync(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_SubjectPercent] @BaseYear, @channelIds";
            var procResultData = await Set<SpBySubjectPercentReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByTagSubjectReportReturnModel> SpByTagSubjectReport(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds)
        {
            int procResult;
            return SpByTagSubjectReport(baseYear, portalId, groupIds, tagText, subjectIds, out procResult);
        }

        public List<SpByTagSubjectReportReturnModel> SpByTagSubjectReport(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var tagTextParam = new SqlParameter { ParameterName = "@tagText", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tagText, Size = 1500 };
            if (tagTextParam.Value == null)
                tagTextParam.Value = DBNull.Value;

            var subjectIdsParam = new SqlParameter { ParameterName = "@subjectIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = subjectIds, Size = -1 };
            if (subjectIdsParam.Value == null)
                subjectIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SP_BY_TagSubjectReport] @baseYear, @portalId, @groupIds, @tagText, @subjectIds";
            var procResultData = Set<SpByTagSubjectReportReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdsParam, tagTextParam, subjectIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByTagSubjectReportReturnModel>> SpByTagSubjectReportAsync(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var tagTextParam = new SqlParameter { ParameterName = "@tagText", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tagText, Size = 1500 };
            if (tagTextParam.Value == null)
                tagTextParam.Value = DBNull.Value;

            var subjectIdsParam = new SqlParameter { ParameterName = "@subjectIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = subjectIds, Size = -1 };
            if (subjectIdsParam.Value == null)
                subjectIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[SP_BY_TagSubjectReport] @baseYear, @portalId, @groupIds, @tagText, @subjectIds";
            var procResultData = await Set<SpByTagSubjectReportReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdsParam, tagTextParam, subjectIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByTagSubjectReport2ReturnModel> SpByTagSubjectReport2(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds)
        {
            int procResult;
            return SpByTagSubjectReport2(baseYear, portalId, groupIds, tagText, subjectIds, out procResult);
        }

        public List<SpByTagSubjectReport2ReturnModel> SpByTagSubjectReport2(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var tagTextParam = new SqlParameter { ParameterName = "@tagText", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tagText, Size = 1500 };
            if (tagTextParam.Value == null)
                tagTextParam.Value = DBNull.Value;

            var subjectIdsParam = new SqlParameter { ParameterName = "@subjectIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = subjectIds, Size = -1 };
            if (subjectIdsParam.Value == null)
                subjectIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SP_BY_TagSubjectReport2] @baseYear, @portalId, @groupIds, @tagText, @subjectIds";
            var procResultData = Set<SpByTagSubjectReport2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdsParam, tagTextParam, subjectIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByTagSubjectReport2ReturnModel>> SpByTagSubjectReport2Async(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var tagTextParam = new SqlParameter { ParameterName = "@tagText", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tagText, Size = 1500 };
            if (tagTextParam.Value == null)
                tagTextParam.Value = DBNull.Value;

            var subjectIdsParam = new SqlParameter { ParameterName = "@subjectIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = subjectIds, Size = -1 };
            if (subjectIdsParam.Value == null)
                subjectIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[SP_BY_TagSubjectReport2] @baseYear, @portalId, @groupIds, @tagText, @subjectIds";
            var procResultData = await Set<SpByTagSubjectReport2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdsParam, tagTextParam, subjectIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpByTagSubjectReportTemp(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds, int? enableLike)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var tagTextParam = new SqlParameter { ParameterName = "@tagText", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tagText, Size = 1500 };
            if (tagTextParam.Value == null)
                tagTextParam.Value = DBNull.Value;

            var subjectIdsParam = new SqlParameter { ParameterName = "@subjectIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = subjectIds, Size = -1 };
            if (subjectIdsParam.Value == null)
                subjectIdsParam.Value = DBNull.Value;

            var enableLikeParam = new SqlParameter { ParameterName = "@EnableLike", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = enableLike.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!enableLike.HasValue)
                enableLikeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[SP_BY_TagSubjectReport_Temp] @baseYear, @portalId, @groupIds, @tagText, @subjectIds, @EnableLike", baseYearParam, portalIdParam, groupIdsParam, tagTextParam, subjectIdsParam, enableLikeParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByTagSubjectReportTempAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByTagSubjectReportTempDetail(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds, int? requestId, int? enableLike, int? pageNumber, int? rowspPage, out int? totalRowsCount)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var tagTextParam = new SqlParameter { ParameterName = "@tagText", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tagText, Size = 1500 };
            if (tagTextParam.Value == null)
                tagTextParam.Value = DBNull.Value;

            var subjectIdsParam = new SqlParameter { ParameterName = "@subjectIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = subjectIds, Size = -1 };
            if (subjectIdsParam.Value == null)
                subjectIdsParam.Value = DBNull.Value;

            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var enableLikeParam = new SqlParameter { ParameterName = "@EnableLike", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = enableLike.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!enableLike.HasValue)
                enableLikeParam.Value = DBNull.Value;

            var pageNumberParam = new SqlParameter { ParameterName = "@PageNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = DBNull.Value;

            var rowspPageParam = new SqlParameter { ParameterName = "@RowspPage", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = rowspPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowspPage.HasValue)
                rowspPageParam.Value = DBNull.Value;

            var totalRowsCountParam = new SqlParameter { ParameterName = "@TotalRowsCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[SP_BY_TagSubjectReport_Temp_Detail] @baseYear, @portalId, @groupIds, @tagText, @subjectIds, @RequestID, @EnableLike, @PageNumber, @RowspPage, @TotalRowsCount OUTPUT", baseYearParam, portalIdParam, groupIdsParam, tagTextParam, subjectIdsParam, requestIdParam, enableLikeParam, pageNumberParam, rowspPageParam, totalRowsCountParam, procResultParam);

            if (IsSqlParameterNull(totalRowsCountParam))
                totalRowsCount = null;
            else
                totalRowsCount = (int) totalRowsCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpByTagSubjectReportTempDetailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpByTagSubjectReportTempDetailForExcel(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds, int? requestId, int? enableLike)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var tagTextParam = new SqlParameter { ParameterName = "@tagText", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tagText, Size = 1500 };
            if (tagTextParam.Value == null)
                tagTextParam.Value = DBNull.Value;

            var subjectIdsParam = new SqlParameter { ParameterName = "@subjectIds", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = subjectIds, Size = -1 };
            if (subjectIdsParam.Value == null)
                subjectIdsParam.Value = DBNull.Value;

            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var enableLikeParam = new SqlParameter { ParameterName = "@EnableLike", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = enableLike.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!enableLike.HasValue)
                enableLikeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[SP_BY_TagSubjectReport_Temp_Detail_ForExcel] @baseYear, @portalId, @groupIds, @tagText, @subjectIds, @RequestID, @EnableLike", baseYearParam, portalIdParam, groupIdsParam, tagTextParam, subjectIdsParam, requestIdParam, enableLikeParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpByTagSubjectReportTempDetailForExcelAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpByV2ProgramTopicsReturnModel> SpByV2ProgramTopics(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize)
        {
            int procResult;
            return SpByV2ProgramTopics(baseYear, portalId, groupId, progname, licenseNo, estimateNo, gradeId, structureId, l1Id, l2Id, l3Id, startrow, pagesize, out procResult);
        }

        public List<SpByV2ProgramTopicsReturnModel> SpByV2ProgramTopics(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var l1IdParam = new SqlParameter { ParameterName = "@l1Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l1Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l1Id.HasValue)
                l1IdParam.Value = DBNull.Value;

            var l2IdParam = new SqlParameter { ParameterName = "@l2Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l2Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l2Id.HasValue)
                l2IdParam.Value = DBNull.Value;

            var l3IdParam = new SqlParameter { ParameterName = "@l3Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l3Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l3Id.HasValue)
                l3IdParam.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_V2_programTopics] @baseYear, @portalId, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @l1Id, @l2Id, @l3Id, @startrow, @pagesize";
            var procResultData = Set<SpByV2ProgramTopicsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, l1IdParam, l2IdParam, l3IdParam, startrowParam, pagesizeParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByV2ProgramTopicsReturnModel>> SpByV2ProgramTopicsAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var l1IdParam = new SqlParameter { ParameterName = "@l1Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l1Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l1Id.HasValue)
                l1IdParam.Value = DBNull.Value;

            var l2IdParam = new SqlParameter { ParameterName = "@l2Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l2Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l2Id.HasValue)
                l2IdParam.Value = DBNull.Value;

            var l3IdParam = new SqlParameter { ParameterName = "@l3Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l3Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l3Id.HasValue)
                l3IdParam.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_V2_programTopics] @baseYear, @portalId, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @l1Id, @l2Id, @l3Id, @startrow, @pagesize";
            var procResultData = await Set<SpByV2ProgramTopicsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, l1IdParam, l2IdParam, l3IdParam, startrowParam, pagesizeParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByV2ProgramTopicsCountReturnModel> SpByV2ProgramTopicsCount(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id)
        {
            int procResult;
            return SpByV2ProgramTopicsCount(baseYear, portalId, groupId, progname, licenseNo, estimateNo, gradeId, structureId, l1Id, l2Id, l3Id, out procResult);
        }

        public List<SpByV2ProgramTopicsCountReturnModel> SpByV2ProgramTopicsCount(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var l1IdParam = new SqlParameter { ParameterName = "@l1Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l1Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l1Id.HasValue)
                l1IdParam.Value = DBNull.Value;

            var l2IdParam = new SqlParameter { ParameterName = "@l2Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l2Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l2Id.HasValue)
                l2IdParam.Value = DBNull.Value;

            var l3IdParam = new SqlParameter { ParameterName = "@l3Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l3Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l3Id.HasValue)
                l3IdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_V2_programTopicsCount] @baseYear, @portalId, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @l1Id, @l2Id, @l3Id";
            var procResultData = Set<SpByV2ProgramTopicsCountReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, l1IdParam, l2IdParam, l3IdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByV2ProgramTopicsCountReturnModel>> SpByV2ProgramTopicsCountAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var l1IdParam = new SqlParameter { ParameterName = "@l1Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l1Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l1Id.HasValue)
                l1IdParam.Value = DBNull.Value;

            var l2IdParam = new SqlParameter { ParameterName = "@l2Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l2Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l2Id.HasValue)
                l2IdParam.Value = DBNull.Value;

            var l3IdParam = new SqlParameter { ParameterName = "@l3Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l3Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l3Id.HasValue)
                l3IdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_V2_programTopicsCount] @baseYear, @portalId, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @l1Id, @l2Id, @l3Id";
            var procResultData = await Set<SpByV2ProgramTopicsCountReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, l1IdParam, l2IdParam, l3IdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByV2ProgramTopicsCountFirstLevelReturnModel> SpByV2ProgramTopicsCountFirstLevel(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id)
        {
            int procResult;
            return SpByV2ProgramTopicsCountFirstLevel(baseYear, portalId, groupId, progname, licenseNo, estimateNo, gradeId, structureId, l1Id, l2Id, l3Id, out procResult);
        }

        public List<SpByV2ProgramTopicsCountFirstLevelReturnModel> SpByV2ProgramTopicsCountFirstLevel(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var l1IdParam = new SqlParameter { ParameterName = "@l1Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l1Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l1Id.HasValue)
                l1IdParam.Value = DBNull.Value;

            var l2IdParam = new SqlParameter { ParameterName = "@l2Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l2Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l2Id.HasValue)
                l2IdParam.Value = DBNull.Value;

            var l3IdParam = new SqlParameter { ParameterName = "@l3Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l3Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l3Id.HasValue)
                l3IdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_V2_programTopicsCountFirstLevel] @baseYear, @portalId, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @l1Id, @l2Id, @l3Id";
            var procResultData = Set<SpByV2ProgramTopicsCountFirstLevelReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, l1IdParam, l2IdParam, l3IdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByV2ProgramTopicsCountFirstLevelReturnModel>> SpByV2ProgramTopicsCountFirstLevelAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var l1IdParam = new SqlParameter { ParameterName = "@l1Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l1Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l1Id.HasValue)
                l1IdParam.Value = DBNull.Value;

            var l2IdParam = new SqlParameter { ParameterName = "@l2Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l2Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l2Id.HasValue)
                l2IdParam.Value = DBNull.Value;

            var l3IdParam = new SqlParameter { ParameterName = "@l3Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l3Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l3Id.HasValue)
                l3IdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_V2_programTopicsCountFirstLevel] @baseYear, @portalId, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @l1Id, @l2Id, @l3Id";
            var procResultData = await Set<SpByV2ProgramTopicsCountFirstLevelReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, l1IdParam, l2IdParam, l3IdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpByV2ProgramTopicsFirstLevelReturnModel> SpByV2ProgramTopicsFirstLevel(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize)
        {
            int procResult;
            return SpByV2ProgramTopicsFirstLevel(baseYear, portalId, groupId, progname, licenseNo, estimateNo, gradeId, structureId, l1Id, l2Id, l3Id, startrow, pagesize, out procResult);
        }

        public List<SpByV2ProgramTopicsFirstLevelReturnModel> SpByV2ProgramTopicsFirstLevel(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var l1IdParam = new SqlParameter { ParameterName = "@l1Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l1Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l1Id.HasValue)
                l1IdParam.Value = DBNull.Value;

            var l2IdParam = new SqlParameter { ParameterName = "@l2Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l2Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l2Id.HasValue)
                l2IdParam.Value = DBNull.Value;

            var l3IdParam = new SqlParameter { ParameterName = "@l3Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l3Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l3Id.HasValue)
                l3IdParam.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_BY_V2_programTopicsFirstLevel] @baseYear, @portalId, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @l1Id, @l2Id, @l3Id, @startrow, @pagesize";
            var procResultData = Set<SpByV2ProgramTopicsFirstLevelReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, l1IdParam, l2IdParam, l3IdParam, startrowParam, pagesizeParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpByV2ProgramTopicsFirstLevelReturnModel>> SpByV2ProgramTopicsFirstLevelAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var l1IdParam = new SqlParameter { ParameterName = "@l1Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l1Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l1Id.HasValue)
                l1IdParam.Value = DBNull.Value;

            var l2IdParam = new SqlParameter { ParameterName = "@l2Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l2Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l2Id.HasValue)
                l2IdParam.Value = DBNull.Value;

            var l3IdParam = new SqlParameter { ParameterName = "@l3Id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = l3Id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!l3Id.HasValue)
                l3IdParam.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_BY_V2_programTopicsFirstLevel] @baseYear, @portalId, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @l1Id, @l2Id, @l3Id, @startrow, @pagesize";
            var procResultData = await Set<SpByV2ProgramTopicsFirstLevelReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, l1IdParam, l2IdParam, l3IdParam, startrowParam, pagesizeParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpChanelsParticipationReturnModel> SpChanelsParticipation(string portalIds, int? baseYear)
        {
            int procResult;
            return SpChanelsParticipation(portalIds, baseYear, out procResult);
        }

        public List<SpChanelsParticipationReturnModel> SpChanelsParticipation(string portalIds, int? baseYear, out int procResult)
        {
            var portalIdsParam = new SqlParameter { ParameterName = "@PortalIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = portalIds, Size = 100 };
            if (portalIdsParam.Value == null)
                portalIdsParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ChanelsParticipation] @PortalIds, @baseYear";
            var procResultData = Set<SpChanelsParticipationReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdsParam, baseYearParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpChanelsParticipationReturnModel>> SpChanelsParticipationAsync(string portalIds, int? baseYear)
        {
            var portalIdsParam = new SqlParameter { ParameterName = "@PortalIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = portalIds, Size = 100 };
            if (portalIdsParam.Value == null)
                portalIdsParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ChanelsParticipation] @PortalIds, @baseYear";
            var procResultData = await Set<SpChanelsParticipationReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdsParam, baseYearParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpChannelsApproachReturnModel> SpChannelsApproach(int? baseYear, string channelIds)
        {
            int procResult;
            return SpChannelsApproach(baseYear, channelIds, out procResult);
        }

        public List<SpChannelsApproachReturnModel> SpChannelsApproach(int? baseYear, string channelIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_channelsApproach] @BaseYear, @channelIds";
            var procResultData = Set<SpChannelsApproachReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpChannelsApproachReturnModel>> SpChannelsApproachAsync(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_channelsApproach] @BaseYear, @channelIds";
            var procResultData = await Set<SpChannelsApproachReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpChannelsPerformanceReturnModel> SpChannelsPerformance(int? baseYear, string channelIds, int? eventId)
        {
            int procResult;
            return SpChannelsPerformance(baseYear, channelIds, eventId, out procResult);
        }

        public List<SpChannelsPerformanceReturnModel> SpChannelsPerformance(int? baseYear, string channelIds, int? eventId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ChannelsPerformance] @BaseYear, @channelIds, @eventId";
            var procResultData = Set<SpChannelsPerformanceReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, eventIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpChannelsPerformanceReturnModel>> SpChannelsPerformanceAsync(int? baseYear, string channelIds, int? eventId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ChannelsPerformance] @BaseYear, @channelIds, @eventId";
            var procResultData = await Set<SpChannelsPerformanceReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, eventIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpChannelsproductionReturnModel> SpChannelsproduction(int? baseYear, string channelIds, DateTime? fromdate, DateTime? todate)
        {
            int procResult;
            return SpChannelsproduction(baseYear, channelIds, fromdate, todate, out procResult);
        }

        public List<SpChannelsproductionReturnModel> SpChannelsproduction(int? baseYear, string channelIds, DateTime? fromdate, DateTime? todate, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_Channelsproduction] @BaseYear, @channelIds, @fromdate, @todate";
            var procResultData = Set<SpChannelsproductionReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, fromdateParam, todateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpChannelsproductionReturnModel>> SpChannelsproductionAsync(int? baseYear, string channelIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_Channelsproduction] @BaseYear, @channelIds, @fromdate, @todate";
            var procResultData = await Set<SpChannelsproductionReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, fromdateParam, todateParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpChannelsProgramsStatus3(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? startrow, int? pagesize, int? orderbyWhat, int? hasproduction, int? eventId, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, string deliveryDateFrom, string deliveryDateTo, string flags, string productionEndtDate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerIdParam = new SqlParameter { ParameterName = "@producerId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = producerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!producerId.HasValue)
                producerIdParam.Value = DBNull.Value;

            var isTranferedParam = new SqlParameter { ParameterName = "@isTranfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTranfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTranfered.HasValue)
                isTranferedParam.Value = DBNull.Value;

            var hasPrposalStatusParam = new SqlParameter { ParameterName = "@hasPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasPrposalStatus, Size = 1500 };
            if (hasPrposalStatusParam.Value == null)
                hasPrposalStatusParam.Value = DBNull.Value;

            var hasNotPrposalStatusParam = new SqlParameter { ParameterName = "@hasNotPrposalStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotPrposalStatus, Size = 1500 };
            if (hasNotPrposalStatusParam.Value == null)
                hasNotPrposalStatusParam.Value = DBNull.Value;

            var hasBaravordStatusParam = new SqlParameter { ParameterName = "@hasBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasBaravordStatus, Size = 1500 };
            if (hasBaravordStatusParam.Value == null)
                hasBaravordStatusParam.Value = DBNull.Value;

            var hasNotBaravordStatusParam = new SqlParameter { ParameterName = "@hasNotBaravordStatus", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = hasNotBaravordStatus, Size = 1500 };
            if (hasNotBaravordStatusParam.Value == null)
                hasNotBaravordStatusParam.Value = DBNull.Value;

            var hasEstimateParam = new SqlParameter { ParameterName = "@hasEstimate", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasEstimate.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasEstimate.HasValue)
                hasEstimateParam.Value = DBNull.Value;

            var subjectlevel1Param = new SqlParameter { ParameterName = "@subjectlevel1", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel1.HasValue)
                subjectlevel1Param.Value = DBNull.Value;

            var subjectlevel2Param = new SqlParameter { ParameterName = "@subjectlevel2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = subjectlevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!subjectlevel2.HasValue)
                subjectlevel2Param.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@orderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var productionProgressFromParam = new SqlParameter { ParameterName = "@ProductionProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressFrom.HasValue)
                productionProgressFromParam.Value = DBNull.Value;

            var productionProgressToParam = new SqlParameter { ParameterName = "@ProductionProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressTo.HasValue)
                productionProgressToParam.Value = DBNull.Value;

            var playProgressFromParam = new SqlParameter { ParameterName = "@PlayProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressFrom.HasValue)
                playProgressFromParam.Value = DBNull.Value;

            var playProgressToParam = new SqlParameter { ParameterName = "@PlayProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressTo.HasValue)
                playProgressToParam.Value = DBNull.Value;

            var paymentProgressFromParam = new SqlParameter { ParameterName = "@PaymentProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressFrom.HasValue)
                paymentProgressFromParam.Value = DBNull.Value;

            var paymentProgressToParam = new SqlParameter { ParameterName = "@PaymentProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressTo.HasValue)
                paymentProgressToParam.Value = DBNull.Value;

            var deliveryDateFromParam = new SqlParameter { ParameterName = "@DeliveryDateFrom", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = deliveryDateFrom, Size = 10 };
            if (deliveryDateFromParam.Value == null)
                deliveryDateFromParam.Value = DBNull.Value;

            var deliveryDateToParam = new SqlParameter { ParameterName = "@DeliveryDateTo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = deliveryDateTo, Size = 10 };
            if (deliveryDateToParam.Value == null)
                deliveryDateToParam.Value = DBNull.Value;

            var flagsParam = new SqlParameter { ParameterName = "@flags", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = flags, Size = 10 };
            if (flagsParam.Value == null)
                flagsParam.Value = DBNull.Value;

            var productionEndtDateParam = new SqlParameter { ParameterName = "@ProductionEndtDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = productionEndtDate, Size = 10 };
            if (productionEndtDateParam.Value == null)
                productionEndtDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_ChannelsProgramsStatus3] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerId, @isTranfered, @hasPrposalStatus, @hasNotPrposalStatus, @hasBaravordStatus, @hasNotBaravordStatus, @hasEstimate, @subjectlevel1, @subjectlevel2, @startrow, @pagesize, @orderbyWhat, @hasproduction, @eventId, @ProductionProgressFrom, @ProductionProgressTo, @PlayProgressFrom, @PlayProgressTo, @PaymentProgressFrom, @PaymentProgressTo, @DeliveryDateFrom, @DeliveryDateTo, @flags, @ProductionEndtDate", baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerIdParam, isTranferedParam, hasPrposalStatusParam, hasNotPrposalStatusParam, hasBaravordStatusParam, hasNotBaravordStatusParam, hasEstimateParam, subjectlevel1Param, subjectlevel2Param, startrowParam, pagesizeParam, orderbyWhatParam, hasproductionParam, eventIdParam, productionProgressFromParam, productionProgressToParam, playProgressFromParam, playProgressToParam, paymentProgressFromParam, paymentProgressToParam, deliveryDateFromParam, deliveryDateToParam, flagsParam, productionEndtDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpChannelsProgramsStatus3Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpChartsByV2ProgramSubjectsReturnModel> SpChartsByV2ProgramSubjects(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour)
        {
            int procResult;
            return SpChartsByV2ProgramSubjects(baseYear, portalId, gradeId, structureId, minHour, out procResult);
        }

        public List<SpChartsByV2ProgramSubjectsReturnModel> SpChartsByV2ProgramSubjects(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var minHourParam = new SqlParameter { ParameterName = "@MinHour", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = minHour.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!minHour.HasValue)
                minHourParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_Charts_BY_V2_programSubjects] @baseYear, @portalId, @gradeId, @structureId, @MinHour";
            var procResultData = Set<SpChartsByV2ProgramSubjectsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, gradeIdParam, structureIdParam, minHourParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpChartsByV2ProgramSubjectsReturnModel>> SpChartsByV2ProgramSubjectsAsync(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var minHourParam = new SqlParameter { ParameterName = "@MinHour", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = minHour.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!minHour.HasValue)
                minHourParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_Charts_BY_V2_programSubjects] @baseYear, @portalId, @gradeId, @structureId, @MinHour";
            var procResultData = await Set<SpChartsByV2ProgramSubjectsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, gradeIdParam, structureIdParam, minHourParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpChartsByV2ProgramTopicsReturnModel> SpChartsByV2ProgramTopics(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour)
        {
            int procResult;
            return SpChartsByV2ProgramTopics(baseYear, portalId, gradeId, structureId, minHour, out procResult);
        }

        public List<SpChartsByV2ProgramTopicsReturnModel> SpChartsByV2ProgramTopics(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var minHourParam = new SqlParameter { ParameterName = "@MinHour", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = minHour.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!minHour.HasValue)
                minHourParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_Charts_BY_V2_programTopics] @baseYear, @portalId, @gradeId, @structureId, @MinHour";
            var procResultData = Set<SpChartsByV2ProgramTopicsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, gradeIdParam, structureIdParam, minHourParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpChartsByV2ProgramTopicsReturnModel>> SpChartsByV2ProgramTopicsAsync(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var minHourParam = new SqlParameter { ParameterName = "@MinHour", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = minHour.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!minHour.HasValue)
                minHourParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_Charts_BY_V2_programTopics] @baseYear, @portalId, @gradeId, @structureId, @MinHour";
            var procResultData = await Set<SpChartsByV2ProgramTopicsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, gradeIdParam, structureIdParam, minHourParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpChartsByV2SubjectsByChannelReturnModel> SpChartsByV2SubjectsByChannel(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour)
        {
            int procResult;
            return SpChartsByV2SubjectsByChannel(baseYear, portalId, gradeId, structureId, minHour, out procResult);
        }

        public List<SpChartsByV2SubjectsByChannelReturnModel> SpChartsByV2SubjectsByChannel(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var minHourParam = new SqlParameter { ParameterName = "@MinHour", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = minHour.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!minHour.HasValue)
                minHourParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_Charts_BY_V2_SubjectsByChannel] @baseYear, @portalId, @gradeId, @structureId, @MinHour";
            var procResultData = Set<SpChartsByV2SubjectsByChannelReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, gradeIdParam, structureIdParam, minHourParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpChartsByV2SubjectsByChannelReturnModel>> SpChartsByV2SubjectsByChannelAsync(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var minHourParam = new SqlParameter { ParameterName = "@MinHour", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = minHour.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!minHour.HasValue)
                minHourParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_Charts_BY_V2_SubjectsByChannel] @baseYear, @portalId, @gradeId, @structureId, @MinHour";
            var procResultData = await Set<SpChartsByV2SubjectsByChannelReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, gradeIdParam, structureIdParam, minHourParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpChartsByV2SubjectsL2ReturnModel> SpChartsByV2SubjectsL2(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour)
        {
            int procResult;
            return SpChartsByV2SubjectsL2(baseYear, portalId, gradeId, structureId, minHour, out procResult);
        }

        public List<SpChartsByV2SubjectsL2ReturnModel> SpChartsByV2SubjectsL2(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var minHourParam = new SqlParameter { ParameterName = "@MinHour", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = minHour.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!minHour.HasValue)
                minHourParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_Charts_BY_V2_Subjects_L2] @baseYear, @portalId, @gradeId, @structureId, @MinHour";
            var procResultData = Set<SpChartsByV2SubjectsL2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, gradeIdParam, structureIdParam, minHourParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpChartsByV2SubjectsL2ReturnModel>> SpChartsByV2SubjectsL2Async(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var minHourParam = new SqlParameter { ParameterName = "@MinHour", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = minHour.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!minHour.HasValue)
                minHourParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_Charts_BY_V2_Subjects_L2] @baseYear, @portalId, @gradeId, @structureId, @MinHour";
            var procResultData = await Set<SpChartsByV2SubjectsL2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, gradeIdParam, structureIdParam, minHourParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpChartsByV2SubjectsTrendL4(int? baseYear, int? portalId, int? gradeId, int? structureId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_Charts_BY_V2_SubjectsTrend_L4] @baseYear, @portalId, @gradeId, @structureId", baseYearParam, portalIdParam, gradeIdParam, structureIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpChartsByV2SubjectsTrendL4Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpConductorChannelDetailPakhsh(string fromDate, string toDate)
        {
            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[SP_ConductorChannelDetailPakhsh] @fromDate, @toDate", fromDateParam, toDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpConductorChannelDetailPakhshAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpConductorChannelDetailTamin(string fromDate, string toDate)
        {
            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[SP_ConductorChannelDetailTamin] @fromDate, @toDate", fromDateParam, toDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpConductorChannelDetailTaminAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpConductorTablePakhshReport(int? channelId, int? chGroupId, string fromDate, string toDate)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var chGroupIdParam = new SqlParameter { ParameterName = "@chGroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = chGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!chGroupId.HasValue)
                chGroupIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[SP_ConductorTablePakhshReport] @ChannelID, @chGroupID, @fromDate, @toDate", channelIdParam, chGroupIdParam, fromDateParam, toDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpConductorTablePakhshReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpConductorTablePakhshReportTotal(int? channelId, int? chGroupId, string fromDate, string toDate)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var chGroupIdParam = new SqlParameter { ParameterName = "@chGroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = chGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!chGroupId.HasValue)
                chGroupIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[SP_ConductorTablePakhshReportTotal] @ChannelID, @chGroupID, @fromDate, @toDate", channelIdParam, chGroupIdParam, fromDateParam, toDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpConductorTablePakhshReportTotalAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpConductorTableTaminReport(int? channelId, int? chGroupId, string fromDate, string toDate)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var chGroupIdParam = new SqlParameter { ParameterName = "@chGroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = chGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!chGroupId.HasValue)
                chGroupIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[SP_ConductorTableTaminReport] @ChannelID, @chGroupID, @fromDate, @toDate", channelIdParam, chGroupIdParam, fromDateParam, toDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpConductorTableTaminReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpConductorTableTaminReportTotal(int? channelId, int? chGroupId, string fromDate, string toDate)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var chGroupIdParam = new SqlParameter { ParameterName = "@chGroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = chGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!chGroupId.HasValue)
                chGroupIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[SP_ConductorTableTaminReportTotal] @ChannelID, @chGroupID, @fromDate, @toDate", channelIdParam, chGroupIdParam, fromDateParam, toDateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpConductorTableTaminReportTotalAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpConflictBaseYearReturnModel> SpConflictBaseYear(int? requestId)
        {
            int procResult;
            return SpConflictBaseYear(requestId, out procResult);
        }

        public List<SpConflictBaseYearReturnModel> SpConflictBaseYear(int? requestId, out int procResult)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ConflictBaseYear] @RequestID";
            var procResultData = Set<SpConflictBaseYearReturnModel>()
                .FromSqlRaw(sqlCommand, requestIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpConflictBaseYearReturnModel>> SpConflictBaseYearAsync(int? requestId)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ConflictBaseYear] @RequestID";
            var procResultData = await Set<SpConflictBaseYearReturnModel>()
                .FromSqlRaw(sqlCommand, requestIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpConflictBaseYearReportReturnModel> SpConflictBaseYearReport(int? year, int? portalId, int? groupId)
        {
            int procResult;
            return SpConflictBaseYearReport(year, portalId, groupId, out procResult);
        }

        public List<SpConflictBaseYearReportReturnModel> SpConflictBaseYearReport(int? year, int? portalId, int? groupId, out int procResult)
        {
            var yearParam = new SqlParameter { ParameterName = "@Year", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = year.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!year.HasValue)
                yearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@GroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ConflictBaseYearReport] @Year, @PortalID, @GroupID";
            var procResultData = Set<SpConflictBaseYearReportReturnModel>()
                .FromSqlRaw(sqlCommand, yearParam, portalIdParam, groupIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpConflictBaseYearReportReturnModel>> SpConflictBaseYearReportAsync(int? year, int? portalId, int? groupId)
        {
            var yearParam = new SqlParameter { ParameterName = "@Year", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = year.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!year.HasValue)
                yearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@GroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ConflictBaseYearReport] @Year, @PortalID, @GroupID";
            var procResultData = await Set<SpConflictBaseYearReportReturnModel>()
                .FromSqlRaw(sqlCommand, yearParam, portalIdParam, groupIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpCopyConductor(string fdate, string tdate, int? channelId, int? userId, int? targetWeekNumber, int? targetVersionNumber, bool? copyByTime, TimeSpan? fromS, TimeSpan? fromE, TimeSpan? toS)
        {
            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@userID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var targetWeekNumberParam = new SqlParameter { ParameterName = "@targetWeekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = targetWeekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!targetWeekNumber.HasValue)
                targetWeekNumberParam.Value = DBNull.Value;

            var targetVersionNumberParam = new SqlParameter { ParameterName = "@targetVersionNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = targetVersionNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!targetVersionNumber.HasValue)
                targetVersionNumberParam.Value = DBNull.Value;

            var copyByTimeParam = new SqlParameter { ParameterName = "@copyByTime", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = copyByTime.GetValueOrDefault() };
            if (!copyByTime.HasValue)
                copyByTimeParam.Value = DBNull.Value;

            var fromSParam = new SqlParameter { ParameterName = "@FromS", SqlDbType = SqlDbType.Time, Direction = ParameterDirection.Input, Value = fromS.GetValueOrDefault() };
            if (!fromS.HasValue)
                fromSParam.Value = DBNull.Value;

            var fromEParam = new SqlParameter { ParameterName = "@FromE", SqlDbType = SqlDbType.Time, Direction = ParameterDirection.Input, Value = fromE.GetValueOrDefault() };
            if (!fromE.HasValue)
                fromEParam.Value = DBNull.Value;

            var toSParam = new SqlParameter { ParameterName = "@toS", SqlDbType = SqlDbType.Time, Direction = ParameterDirection.Input, Value = toS.GetValueOrDefault() };
            if (!toS.HasValue)
                toSParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_CopyConductor] @fdate, @tdate, @ChannelID, @userID, @targetWeekNumber, @targetVersionNumber, @copyByTime, @FromS, @FromE, @toS", fdateParam, tdateParam, channelIdParam, userIdParam, targetWeekNumberParam, targetVersionNumberParam, copyByTimeParam, fromSParam, fromEParam, toSParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpCopyConductorAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpCreateNewVersion(int? channelId, int? weekNumber, int? userId, string fdate, string tdate)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@userID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_CreateNewVersion] @ChannelID, @weekNumber, @userID, @fdate, @tdate", channelIdParam, weekNumberParam, userIdParam, fdateParam, tdateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpCreateNewVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpCreateNewVersionPakhsh(int? channelId, int? weekNumber, int? userId, string fdate, string tdate, bool? isB)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@userID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var isBParam = new SqlParameter { ParameterName = "@isB", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isB.GetValueOrDefault() };
            if (!isB.HasValue)
                isBParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_CreateNewVersion_Pakhsh] @ChannelID, @weekNumber, @userID, @fdate, @tdate, @isB", channelIdParam, weekNumberParam, userIdParam, fdateParam, tdateParam, isBParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpCreateNewVersionPakhshAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpDeatilQualityListReturnModel> SpDeatilQualityList(int? requestId)
        {
            int procResult;
            return SpDeatilQualityList(requestId, out procResult);
        }

        public List<SpDeatilQualityListReturnModel> SpDeatilQualityList(int? requestId, out int procResult)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_DeatilQualityList] @RequestID";
            var procResultData = Set<SpDeatilQualityListReturnModel>()
                .FromSqlRaw(sqlCommand, requestIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpDeatilQualityListReturnModel>> SpDeatilQualityListAsync(int? requestId)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_DeatilQualityList] @RequestID";
            var procResultData = await Set<SpDeatilQualityListReturnModel>()
                .FromSqlRaw(sqlCommand, requestIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpDetailEventReportReturnModel> SpDetailEventReport(int? portalId, int? baseYear, int? eventId)
        {
            int procResult;
            return SpDetailEventReport(portalId, baseYear, eventId, out procResult);
        }

        public List<SpDetailEventReportReturnModel> SpDetailEventReport(int? portalId, int? baseYear, int? eventId, out int procResult)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@EventID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_DetailEventReport] @PortalID, @BaseYear, @EventID";
            var procResultData = Set<SpDetailEventReportReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, baseYearParam, eventIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpDetailEventReportReturnModel>> SpDetailEventReportAsync(int? portalId, int? baseYear, int? eventId)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@EventID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_DetailEventReport] @PortalID, @BaseYear, @EventID";
            var procResultData = await Set<SpDetailEventReportReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, baseYearParam, eventIdParam)
                .ToListAsync();

            return procResultData;
        }

        // public SpDetailRequestSubjectReportReturnModel SpDetailRequestSubjectReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subjectsId, int? subsubjectId, int? subjectType) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpDetailRequestSubjectReportReturnModel> SpDetailRequestSubjectReportAsync(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subjectsId, int? subsubjectId, int? subjectType) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public SpDetailSubjectReportReturnModel SpDetailSubjectReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subsubjectId, int? subjectType) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpDetailSubjectReportReturnModel> SpDetailSubjectReportAsync(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subsubjectId, int? subjectType) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<SpDeviationRateReturnModel> SpDeviationRate(int? portalId, int? baseYear)
        {
            int procResult;
            return SpDeviationRate(portalId, baseYear, out procResult);
        }

        public List<SpDeviationRateReturnModel> SpDeviationRate(int? portalId, int? baseYear, out int procResult)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_DeviationRate] @PortalID, @BaseYear";
            var procResultData = Set<SpDeviationRateReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, baseYearParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpDeviationRateReturnModel>> SpDeviationRateAsync(int? portalId, int? baseYear)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_DeviationRate] @PortalID, @BaseYear";
            var procResultData = await Set<SpDeviationRateReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, baseYearParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpEpg(int? requestId, int? statusId, string estimateNumer)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var statusIdParam = new SqlParameter { ParameterName = "@StatusID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = statusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!statusId.HasValue)
                statusIdParam.Value = DBNull.Value;

            var estimateNumerParam = new SqlParameter { ParameterName = "@EstimateNumer", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = estimateNumer, Size = -1 };
            if (estimateNumerParam.Value == null)
                estimateNumerParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_EPG] @RequestID, @StatusID, @EstimateNumer", requestIdParam, statusIdParam, estimateNumerParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpEpgAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpEstimateOutline(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_EstimateOutline] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted", baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpEstimateOutlineAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpEvaluationReport(int? baseYear, string program, string licenseNumber, string estimateNo, int? portalId, int? groupId, int? programGradeId, int? structureId, int? structureTypeId, string fromDate, string toDate, bool? isDeleted)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var programParam = new SqlParameter { ParameterName = "@Program", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = program, Size = 1000 };
            if (programParam.Value == null)
                programParam.Value = DBNull.Value;

            var licenseNumberParam = new SqlParameter { ParameterName = "@LicenseNumber", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNumber, Size = 10 };
            if (licenseNumberParam.Value == null)
                licenseNumberParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@EstimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@GroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var programGradeIdParam = new SqlParameter { ParameterName = "@ProgramGradeID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = programGradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programGradeId.HasValue)
                programGradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@StructureID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@StructureTypeID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@FromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@ToDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var isDeletedParam = new SqlParameter { ParameterName = "@IsDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isDeleted.GetValueOrDefault() };
            if (!isDeleted.HasValue)
                isDeletedParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_EvaluationReport] @BaseYear, @Program, @LicenseNumber, @EstimateNo, @PortalID, @GroupID, @ProgramGradeID, @StructureID, @StructureTypeID, @FromDate, @ToDate, @IsDeleted", baseYearParam, programParam, licenseNumberParam, estimateNoParam, portalIdParam, groupIdParam, programGradeIdParam, structureIdParam, structureTypeIdParam, fromDateParam, toDateParam, isDeletedParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpEvaluationReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpEventReportReturnModel> SpEventReport(int? portalId, int? baseYear, int? eventId)
        {
            int procResult;
            return SpEventReport(portalId, baseYear, eventId, out procResult);
        }

        public List<SpEventReportReturnModel> SpEventReport(int? portalId, int? baseYear, int? eventId, out int procResult)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@EventID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_EventReport] @PortalID, @BaseYear, @EventID";
            var procResultData = Set<SpEventReportReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, baseYearParam, eventIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpEventReportReturnModel>> SpEventReportAsync(int? portalId, int? baseYear, int? eventId)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@EventID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_EventReport] @PortalID, @BaseYear, @EventID";
            var procResultData = await Set<SpEventReportReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, baseYearParam, eventIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpFullPaymentReportReturnModel> SpFullPaymentReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? hasproduction, int? prodPercentFrom, int? prodPercentto, int? haspayment, int? paymentPercentFrom, int? paymentPercentto, int? orderbywhat, int? approachId)
        {
            int procResult;
            return SpFullPaymentReport(baseYear, portalId, fromDate, toDate, groupId, progname, licenseNo, estimateNo, gradeId, structureId, structureTypeId, justDeleted, producerId, hasproduction, prodPercentFrom, prodPercentto, haspayment, paymentPercentFrom, paymentPercentto, orderbywhat, approachId, out procResult);
        }

        public List<SpFullPaymentReportReturnModel> SpFullPaymentReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? hasproduction, int? prodPercentFrom, int? prodPercentto, int? haspayment, int? paymentPercentFrom, int? paymentPercentto, int? orderbywhat, int? approachId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDate.GetValueOrDefault() };
            if (!fromDate.HasValue)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDate.GetValueOrDefault() };
            if (!toDate.HasValue)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerIdParam = new SqlParameter { ParameterName = "@producerId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = producerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!producerId.HasValue)
                producerIdParam.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            var prodPercentFromParam = new SqlParameter { ParameterName = "@prodPercentFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = prodPercentFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!prodPercentFrom.HasValue)
                prodPercentFromParam.Value = DBNull.Value;

            var prodPercenttoParam = new SqlParameter { ParameterName = "@prodPercentto", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = prodPercentto.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!prodPercentto.HasValue)
                prodPercenttoParam.Value = DBNull.Value;

            var haspaymentParam = new SqlParameter { ParameterName = "@haspayment", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = haspayment.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!haspayment.HasValue)
                haspaymentParam.Value = DBNull.Value;

            var paymentPercentFromParam = new SqlParameter { ParameterName = "@paymentPercentFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentPercentFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentPercentFrom.HasValue)
                paymentPercentFromParam.Value = DBNull.Value;

            var paymentPercenttoParam = new SqlParameter { ParameterName = "@paymentPercentto", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentPercentto.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentPercentto.HasValue)
                paymentPercenttoParam.Value = DBNull.Value;

            var orderbywhatParam = new SqlParameter { ParameterName = "@orderbywhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbywhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbywhat.HasValue)
                orderbywhatParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_FULL_PaymentReport] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerId, @hasproduction, @prodPercentFrom, @prodPercentto, @haspayment, @paymentPercentFrom, @paymentPercentto, @orderbywhat, @approachId";
            var procResultData = Set<SpFullPaymentReportReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerIdParam, hasproductionParam, prodPercentFromParam, prodPercenttoParam, haspaymentParam, paymentPercentFromParam, paymentPercenttoParam, orderbywhatParam, approachIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpFullPaymentReportReturnModel>> SpFullPaymentReportAsync(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? hasproduction, int? prodPercentFrom, int? prodPercentto, int? haspayment, int? paymentPercentFrom, int? paymentPercentto, int? orderbywhat, int? approachId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDate.GetValueOrDefault() };
            if (!fromDate.HasValue)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDate.GetValueOrDefault() };
            if (!toDate.HasValue)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@LicenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 20 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerIdParam = new SqlParameter { ParameterName = "@producerId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = producerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!producerId.HasValue)
                producerIdParam.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            var prodPercentFromParam = new SqlParameter { ParameterName = "@prodPercentFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = prodPercentFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!prodPercentFrom.HasValue)
                prodPercentFromParam.Value = DBNull.Value;

            var prodPercenttoParam = new SqlParameter { ParameterName = "@prodPercentto", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = prodPercentto.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!prodPercentto.HasValue)
                prodPercenttoParam.Value = DBNull.Value;

            var haspaymentParam = new SqlParameter { ParameterName = "@haspayment", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = haspayment.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!haspayment.HasValue)
                haspaymentParam.Value = DBNull.Value;

            var paymentPercentFromParam = new SqlParameter { ParameterName = "@paymentPercentFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentPercentFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentPercentFrom.HasValue)
                paymentPercentFromParam.Value = DBNull.Value;

            var paymentPercenttoParam = new SqlParameter { ParameterName = "@paymentPercentto", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentPercentto.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentPercentto.HasValue)
                paymentPercenttoParam.Value = DBNull.Value;

            var orderbywhatParam = new SqlParameter { ParameterName = "@orderbywhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbywhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbywhat.HasValue)
                orderbywhatParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_FULL_PaymentReport] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @LicenseNo, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerId, @hasproduction, @prodPercentFrom, @prodPercentto, @haspayment, @paymentPercentFrom, @paymentPercentto, @orderbywhat, @approachId";
            var procResultData = await Set<SpFullPaymentReportReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, licenseNoParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerIdParam, hasproductionParam, prodPercentFromParam, prodPercenttoParam, haspaymentParam, paymentPercentFromParam, paymentPercenttoParam, orderbywhatParam, approachIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpGeneralVu(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_GeneralVU] @BaseYear, @channelIds", baseYearParam, channelIdsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpGeneralVuAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpGeneralVutestTolid(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_GeneralVUTEST_TOLID] @BaseYear, @channelIds", baseYearParam, channelIdsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpGeneralVutestTolidAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpGetAgentDetail(int? agentId, int? baseYear)
        {
            var agentIdParam = new SqlParameter { ParameterName = "@AgentId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = agentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!agentId.HasValue)
                agentIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_GetAgentDetail] @AgentId, @BaseYear", agentIdParam, baseYearParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpGetAgentDetailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpGetComparativeLastVersionReturnModel> SpGetComparativeLastVersion(int? weekNumber, string fdate, string tdate, bool? timeafter6)
        {
            int procResult;
            return SpGetComparativeLastVersion(weekNumber, fdate, tdate, timeafter6, out procResult);
        }

        public List<SpGetComparativeLastVersionReturnModel> SpGetComparativeLastVersion(int? weekNumber, string fdate, string tdate, bool? timeafter6, out int procResult)
        {
            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var timeafter6Param = new SqlParameter { ParameterName = "@timeafter6", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = timeafter6.GetValueOrDefault() };
            if (!timeafter6.HasValue)
                timeafter6Param.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GetComparativeLastVersion] @weekNumber, @fdate, @tdate, @timeafter6";
            var procResultData = Set<SpGetComparativeLastVersionReturnModel>()
                .FromSqlRaw(sqlCommand, weekNumberParam, fdateParam, tdateParam, timeafter6Param, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetComparativeLastVersionReturnModel>> SpGetComparativeLastVersionAsync(int? weekNumber, string fdate, string tdate, bool? timeafter6)
        {
            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var timeafter6Param = new SqlParameter { ParameterName = "@timeafter6", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = timeafter6.GetValueOrDefault() };
            if (!timeafter6.HasValue)
                timeafter6Param.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GetComparativeLastVersion] @weekNumber, @fdate, @tdate, @timeafter6";
            var procResultData = await Set<SpGetComparativeLastVersionReturnModel>()
                .FromSqlRaw(sqlCommand, weekNumberParam, fdateParam, tdateParam, timeafter6Param)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGetComparativeLastVersionTvReturnModel> SpGetComparativeLastVersionTv(int? weekNumber, string fdate, string tdate)
        {
            int procResult;
            return SpGetComparativeLastVersionTv(weekNumber, fdate, tdate, out procResult);
        }

        public List<SpGetComparativeLastVersionTvReturnModel> SpGetComparativeLastVersionTv(int? weekNumber, string fdate, string tdate, out int procResult)
        {
            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GetComparativeLastVersion_tv] @weekNumber, @fdate, @tdate";
            var procResultData = Set<SpGetComparativeLastVersionTvReturnModel>()
                .FromSqlRaw(sqlCommand, weekNumberParam, fdateParam, tdateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetComparativeLastVersionTvReturnModel>> SpGetComparativeLastVersionTvAsync(int? weekNumber, string fdate, string tdate)
        {
            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GetComparativeLastVersion_tv] @weekNumber, @fdate, @tdate";
            var procResultData = await Set<SpGetComparativeLastVersionTvReturnModel>()
                .FromSqlRaw(sqlCommand, weekNumberParam, fdateParam, tdateParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpGetConductorBox(int? channelId, string fromDate, string toDate, int? pageNum, int? pageSize, out int? totalCount)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@_channelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@_fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@_toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var pageNumParam = new SqlParameter { ParameterName = "@_pageNum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNum.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNum.HasValue)
                pageNumParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@_pageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var totalCountParam = new SqlParameter { ParameterName = "@totalCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_GetConductorBox] @_channelID, @_fromDate, @_toDate, @_pageNum, @_pageSize, @totalCount OUTPUT", channelIdParam, fromDateParam, toDateParam, pageNumParam, pageSizeParam, totalCountParam, procResultParam);

            if (IsSqlParameterNull(totalCountParam))
                totalCount = null;
            else
                totalCount = (int) totalCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpGetConductorBoxAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpGetConductorBoxItems(int? conductorBoxId, int? pageNum, int? pageSize, out int? totalCount)
        {
            var conductorBoxIdParam = new SqlParameter { ParameterName = "@_conductorBoxID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = conductorBoxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!conductorBoxId.HasValue)
                conductorBoxIdParam.Value = DBNull.Value;

            var pageNumParam = new SqlParameter { ParameterName = "@_pageNum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNum.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNum.HasValue)
                pageNumParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@_pageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var totalCountParam = new SqlParameter { ParameterName = "@totalCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_GetConductorBoxItems] @_conductorBoxID, @_pageNum, @_pageSize, @totalCount OUTPUT", conductorBoxIdParam, pageNumParam, pageSizeParam, totalCountParam, procResultParam);

            if (IsSqlParameterNull(totalCountParam))
                totalCount = null;
            else
                totalCount = (int) totalCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpGetConductorBoxItemsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpGetConductorBoxRequest(int? channelId, string clipArtTitle, int? clipArtStatusId, int? clipArtTypeId, int? pageNum, int? pageSize, out int? totalCount)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@_channelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var clipArtTitleParam = new SqlParameter { ParameterName = "@_clipArtTitle", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = clipArtTitle, Size = 500 };
            if (clipArtTitleParam.Value == null)
                clipArtTitleParam.Value = DBNull.Value;

            var clipArtStatusIdParam = new SqlParameter { ParameterName = "@_clipArtStatusID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = clipArtStatusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!clipArtStatusId.HasValue)
                clipArtStatusIdParam.Value = DBNull.Value;

            var clipArtTypeIdParam = new SqlParameter { ParameterName = "@_clipArtTypeID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = clipArtTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!clipArtTypeId.HasValue)
                clipArtTypeIdParam.Value = DBNull.Value;

            var pageNumParam = new SqlParameter { ParameterName = "@_pageNum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNum.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNum.HasValue)
                pageNumParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@_pageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var totalCountParam = new SqlParameter { ParameterName = "@totalCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_GetConductorBoxRequest] @_channelID, @_clipArtTitle, @_clipArtStatusID, @_clipArtTypeID, @_pageNum, @_pageSize, @totalCount OUTPUT", channelIdParam, clipArtTitleParam, clipArtStatusIdParam, clipArtTypeIdParam, pageNumParam, pageSizeParam, totalCountParam, procResultParam);

            if (IsSqlParameterNull(totalCountParam))
                totalCount = null;
            else
                totalCount = (int) totalCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpGetConductorBoxRequestAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpGetConductorBoxRequestPrograms(int? detailTypeId, int? channelId, string clipArtTitle, int? clipArtTypeId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime, string duration, string eventTitle, string clipArtSubject, string requestUnitTitle, string tag, int? boxNumber, int? pageNum, int? pageSize, out int? totalCount)
        {
            var detailTypeIdParam = new SqlParameter { ParameterName = "@_detailTypeID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = detailTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!detailTypeId.HasValue)
                detailTypeIdParam.Value = DBNull.Value;

            var channelIdParam = new SqlParameter { ParameterName = "@_channelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var clipArtTitleParam = new SqlParameter { ParameterName = "@_clipArtTitle", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = clipArtTitle, Size = 500 };
            if (clipArtTitleParam.Value == null)
                clipArtTitleParam.Value = DBNull.Value;

            var clipArtTypeIdParam = new SqlParameter { ParameterName = "@_clipArtTypeID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = clipArtTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!clipArtTypeId.HasValue)
                clipArtTypeIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@_fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@_toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var fromDatePersianParam = new SqlParameter { ParameterName = "@_fromDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDatePersian, Size = 10 };
            if (fromDatePersianParam.Value == null)
                fromDatePersianParam.Value = DBNull.Value;

            var toDatePersianParam = new SqlParameter { ParameterName = "@_toDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDatePersian, Size = 10 };
            if (toDatePersianParam.Value == null)
                toDatePersianParam.Value = DBNull.Value;

            var fromTimeParam = new SqlParameter { ParameterName = "@_fromTime", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromTime, Size = 8 };
            if (fromTimeParam.Value == null)
                fromTimeParam.Value = DBNull.Value;

            var toTimeParam = new SqlParameter { ParameterName = "@_toTime", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toTime, Size = 8 };
            if (toTimeParam.Value == null)
                toTimeParam.Value = DBNull.Value;

            var durationParam = new SqlParameter { ParameterName = "@_duration", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = duration, Size = 8 };
            if (durationParam.Value == null)
                durationParam.Value = DBNull.Value;

            var eventTitleParam = new SqlParameter { ParameterName = "@_eventTitle", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = eventTitle, Size = 500 };
            if (eventTitleParam.Value == null)
                eventTitleParam.Value = DBNull.Value;

            var clipArtSubjectParam = new SqlParameter { ParameterName = "@_clipArtSubject", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = clipArtSubject, Size = 500 };
            if (clipArtSubjectParam.Value == null)
                clipArtSubjectParam.Value = DBNull.Value;

            var requestUnitTitleParam = new SqlParameter { ParameterName = "@_requestUnitTitle", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = requestUnitTitle, Size = 500 };
            if (requestUnitTitleParam.Value == null)
                requestUnitTitleParam.Value = DBNull.Value;

            var tagParam = new SqlParameter { ParameterName = "@_tag", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tag, Size = 500 };
            if (tagParam.Value == null)
                tagParam.Value = DBNull.Value;

            var boxNumberParam = new SqlParameter { ParameterName = "@_boxNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = boxNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!boxNumber.HasValue)
                boxNumberParam.Value = DBNull.Value;

            var pageNumParam = new SqlParameter { ParameterName = "@_pageNum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNum.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNum.HasValue)
                pageNumParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@_pageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var totalCountParam = new SqlParameter { ParameterName = "@totalCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_GetConductorBoxRequestPrograms] @_detailTypeID, @_channelID, @_clipArtTitle, @_clipArtTypeID, @_fromDate, @_toDate, @_fromDatePersian, @_toDatePersian, @_fromTime, @_toTime, @_duration, @_eventTitle, @_clipArtSubject, @_requestUnitTitle, @_tag, @_boxNumber, @_pageNum, @_pageSize, @totalCount OUTPUT", detailTypeIdParam, channelIdParam, clipArtTitleParam, clipArtTypeIdParam, fromDateParam, toDateParam, fromDatePersianParam, toDatePersianParam, fromTimeParam, toTimeParam, durationParam, eventTitleParam, clipArtSubjectParam, requestUnitTitleParam, tagParam, boxNumberParam, pageNumParam, pageSizeParam, totalCountParam, procResultParam);

            if (IsSqlParameterNull(totalCountParam))
                totalCount = null;
            else
                totalCount = (int) totalCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpGetConductorBoxRequestProgramsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpGetConductorBoxTemplatePerChannel(int? channelId, string fromDate, string toDate, int? pageNum, int? pageSize, out int? totalCount)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@_channelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@_fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@_toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var pageNumParam = new SqlParameter { ParameterName = "@_pageNum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNum.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNum.HasValue)
                pageNumParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@_pageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var totalCountParam = new SqlParameter { ParameterName = "@totalCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_GetConductorBoxTemplatePerChannel] @_channelID, @_fromDate, @_toDate, @_pageNum, @_pageSize, @totalCount OUTPUT", channelIdParam, fromDateParam, toDateParam, pageNumParam, pageSizeParam, totalCountParam, procResultParam);

            if (IsSqlParameterNull(totalCountParam))
                totalCount = null;
            else
                totalCount = (int) totalCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpGetConductorBoxTemplatePerChannelAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpGetConductorBoxUsageReturnModel> SpGetConductorBoxUsage(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime)
        {
            int procResult;
            return SpGetConductorBoxUsage(channelId, fromDate, toDate, fromDatePersian, toDatePersian, fromTime, toTime, out procResult);
        }

        public List<SpGetConductorBoxUsageReturnModel> SpGetConductorBoxUsage(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime, out int procResult)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@_channelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@_fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@_toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var fromDatePersianParam = new SqlParameter { ParameterName = "@_fromDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDatePersian, Size = 10 };
            if (fromDatePersianParam.Value == null)
                fromDatePersianParam.Value = DBNull.Value;

            var toDatePersianParam = new SqlParameter { ParameterName = "@_toDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDatePersian, Size = 10 };
            if (toDatePersianParam.Value == null)
                toDatePersianParam.Value = DBNull.Value;

            var fromTimeParam = new SqlParameter { ParameterName = "@_fromTime", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromTime, Size = 8 };
            if (fromTimeParam.Value == null)
                fromTimeParam.Value = DBNull.Value;

            var toTimeParam = new SqlParameter { ParameterName = "@_toTime", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toTime, Size = 8 };
            if (toTimeParam.Value == null)
                toTimeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GetConductorBoxUsage] @_channelID, @_fromDate, @_toDate, @_fromDatePersian, @_toDatePersian, @_fromTime, @_toTime";
            var procResultData = Set<SpGetConductorBoxUsageReturnModel>()
                .FromSqlRaw(sqlCommand, channelIdParam, fromDateParam, toDateParam, fromDatePersianParam, toDatePersianParam, fromTimeParam, toTimeParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetConductorBoxUsageReturnModel>> SpGetConductorBoxUsageAsync(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@_channelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@_fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@_toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var fromDatePersianParam = new SqlParameter { ParameterName = "@_fromDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDatePersian, Size = 10 };
            if (fromDatePersianParam.Value == null)
                fromDatePersianParam.Value = DBNull.Value;

            var toDatePersianParam = new SqlParameter { ParameterName = "@_toDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDatePersian, Size = 10 };
            if (toDatePersianParam.Value == null)
                toDatePersianParam.Value = DBNull.Value;

            var fromTimeParam = new SqlParameter { ParameterName = "@_fromTime", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromTime, Size = 8 };
            if (fromTimeParam.Value == null)
                fromTimeParam.Value = DBNull.Value;

            var toTimeParam = new SqlParameter { ParameterName = "@_toTime", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toTime, Size = 8 };
            if (toTimeParam.Value == null)
                toTimeParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GetConductorBoxUsage] @_channelID, @_fromDate, @_toDate, @_fromDatePersian, @_toDatePersian, @_fromTime, @_toTime";
            var procResultData = await Set<SpGetConductorBoxUsageReturnModel>()
                .FromSqlRaw(sqlCommand, channelIdParam, fromDateParam, toDateParam, fromDatePersianParam, toDatePersianParam, fromTimeParam, toTimeParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGetConductorBoxUsagePerTypeReturnModel> SpGetConductorBoxUsagePerType(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime)
        {
            int procResult;
            return SpGetConductorBoxUsagePerType(channelId, fromDate, toDate, fromDatePersian, toDatePersian, fromTime, toTime, out procResult);
        }

        public List<SpGetConductorBoxUsagePerTypeReturnModel> SpGetConductorBoxUsagePerType(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime, out int procResult)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@_channelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@_fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@_toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var fromDatePersianParam = new SqlParameter { ParameterName = "@_fromDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDatePersian, Size = 10 };
            if (fromDatePersianParam.Value == null)
                fromDatePersianParam.Value = DBNull.Value;

            var toDatePersianParam = new SqlParameter { ParameterName = "@_toDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDatePersian, Size = 10 };
            if (toDatePersianParam.Value == null)
                toDatePersianParam.Value = DBNull.Value;

            var fromTimeParam = new SqlParameter { ParameterName = "@_fromTime", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromTime, Size = 8 };
            if (fromTimeParam.Value == null)
                fromTimeParam.Value = DBNull.Value;

            var toTimeParam = new SqlParameter { ParameterName = "@_toTime", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toTime, Size = 8 };
            if (toTimeParam.Value == null)
                toTimeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GetConductorBoxUsagePerType] @_channelID, @_fromDate, @_toDate, @_fromDatePersian, @_toDatePersian, @_fromTime, @_toTime";
            var procResultData = Set<SpGetConductorBoxUsagePerTypeReturnModel>()
                .FromSqlRaw(sqlCommand, channelIdParam, fromDateParam, toDateParam, fromDatePersianParam, toDatePersianParam, fromTimeParam, toTimeParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetConductorBoxUsagePerTypeReturnModel>> SpGetConductorBoxUsagePerTypeAsync(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@_channelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@_fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@_toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var fromDatePersianParam = new SqlParameter { ParameterName = "@_fromDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDatePersian, Size = 10 };
            if (fromDatePersianParam.Value == null)
                fromDatePersianParam.Value = DBNull.Value;

            var toDatePersianParam = new SqlParameter { ParameterName = "@_toDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDatePersian, Size = 10 };
            if (toDatePersianParam.Value == null)
                toDatePersianParam.Value = DBNull.Value;

            var fromTimeParam = new SqlParameter { ParameterName = "@_fromTime", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromTime, Size = 8 };
            if (fromTimeParam.Value == null)
                fromTimeParam.Value = DBNull.Value;

            var toTimeParam = new SqlParameter { ParameterName = "@_toTime", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toTime, Size = 8 };
            if (toTimeParam.Value == null)
                toTimeParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GetConductorBoxUsagePerType] @_channelID, @_fromDate, @_toDate, @_fromDatePersian, @_toDatePersian, @_fromTime, @_toTime";
            var procResultData = await Set<SpGetConductorBoxUsagePerTypeReturnModel>()
                .FromSqlRaw(sqlCommand, channelIdParam, fromDateParam, toDateParam, fromDatePersianParam, toDatePersianParam, fromTimeParam, toTimeParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGetConductorByProgramIdReturnModel> SpGetConductorByProgramId(int? progid, string fromDate, string toDate, int? simaUserChId)
        {
            int procResult;
            return SpGetConductorByProgramId(progid, fromDate, toDate, simaUserChId, out procResult);
        }

        public List<SpGetConductorByProgramIdReturnModel> SpGetConductorByProgramId(int? progid, string fromDate, string toDate, int? simaUserChId, out int procResult)
        {
            var progidParam = new SqlParameter { ParameterName = "@progid", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = progid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!progid.HasValue)
                progidParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var simaUserChIdParam = new SqlParameter { ParameterName = "@simaUserChID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = simaUserChId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!simaUserChId.HasValue)
                simaUserChIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GetConductorByProgramId] @progid, @fromDate, @toDate, @simaUserChID";
            var procResultData = Set<SpGetConductorByProgramIdReturnModel>()
                .FromSqlRaw(sqlCommand, progidParam, fromDateParam, toDateParam, simaUserChIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetConductorByProgramIdReturnModel>> SpGetConductorByProgramIdAsync(int? progid, string fromDate, string toDate, int? simaUserChId)
        {
            var progidParam = new SqlParameter { ParameterName = "@progid", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = progid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!progid.HasValue)
                progidParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var simaUserChIdParam = new SqlParameter { ParameterName = "@simaUserChID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = simaUserChId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!simaUserChId.HasValue)
                simaUserChIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GetConductorByProgramId] @progid, @fromDate, @toDate, @simaUserChID";
            var procResultData = await Set<SpGetConductorByProgramIdReturnModel>()
                .FromSqlRaw(sqlCommand, progidParam, fromDateParam, toDateParam, simaUserChIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGetEpgMediaConductorReturnModel> SpGetEpgMediaConductor(string date, int? channelId)
        {
            int procResult;
            return SpGetEpgMediaConductor(date, channelId, out procResult);
        }

        public List<SpGetEpgMediaConductorReturnModel> SpGetEpgMediaConductor(string date, int? channelId, out int procResult)
        {
            var dateParam = new SqlParameter { ParameterName = "@Date", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = date, Size = 10 };
            if (dateParam.Value == null)
                dateParam.Value = DBNull.Value;

            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GetEpgMediaConductor] @Date, @ChannelID";
            var procResultData = Set<SpGetEpgMediaConductorReturnModel>()
                .FromSqlRaw(sqlCommand, dateParam, channelIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetEpgMediaConductorReturnModel>> SpGetEpgMediaConductorAsync(string date, int? channelId)
        {
            var dateParam = new SqlParameter { ParameterName = "@Date", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = date, Size = 10 };
            if (dateParam.Value == null)
                dateParam.Value = DBNull.Value;

            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GetEpgMediaConductor] @Date, @ChannelID";
            var procResultData = await Set<SpGetEpgMediaConductorReturnModel>()
                .FromSqlRaw(sqlCommand, dateParam, channelIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGetEpgNetworksReturnModel> SpGetEpgNetworks()
        {
            int procResult;
            return SpGetEpgNetworks(out procResult);
        }

        public List<SpGetEpgNetworksReturnModel> SpGetEpgNetworks(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GetEpgNetworks]";
            var procResultData = Set<SpGetEpgNetworksReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetEpgNetworksReturnModel>> SpGetEpgNetworksAsync()
        {
            const string sqlCommand = "EXEC [dbo].[sp_GetEpgNetworks]";
            var procResultData = await Set<SpGetEpgNetworksReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGetFileAutoNumberReturnModel> SpGetFileAutoNumber(string uidLevel, string estimateGid, string theDate)
        {
            int procResult;
            return SpGetFileAutoNumber(uidLevel, estimateGid, theDate, out procResult);
        }

        public List<SpGetFileAutoNumberReturnModel> SpGetFileAutoNumber(string uidLevel, string estimateGid, string theDate, out int procResult)
        {
            var uidLevelParam = new SqlParameter { ParameterName = "@UIDLevel", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = uidLevel, Size = 2 };
            if (uidLevelParam.Value == null)
                uidLevelParam.Value = DBNull.Value;

            var estimateGidParam = new SqlParameter { ParameterName = "@EstimateGID", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = estimateGid, Size = 3 };
            if (estimateGidParam.Value == null)
                estimateGidParam.Value = DBNull.Value;

            var theDateParam = new SqlParameter { ParameterName = "@theDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = theDate, Size = 50 };
            if (theDateParam.Value == null)
                theDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SP_GetFileAutoNumber] @UIDLevel, @EstimateGID, @theDate";
            var procResultData = Set<SpGetFileAutoNumberReturnModel>()
                .FromSqlRaw(sqlCommand, uidLevelParam, estimateGidParam, theDateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetFileAutoNumberReturnModel>> SpGetFileAutoNumberAsync(string uidLevel, string estimateGid, string theDate)
        {
            var uidLevelParam = new SqlParameter { ParameterName = "@UIDLevel", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = uidLevel, Size = 2 };
            if (uidLevelParam.Value == null)
                uidLevelParam.Value = DBNull.Value;

            var estimateGidParam = new SqlParameter { ParameterName = "@EstimateGID", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = estimateGid, Size = 3 };
            if (estimateGidParam.Value == null)
                estimateGidParam.Value = DBNull.Value;

            var theDateParam = new SqlParameter { ParameterName = "@theDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = theDate, Size = 50 };
            if (theDateParam.Value == null)
                theDateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[SP_GetFileAutoNumber] @UIDLevel, @EstimateGID, @theDate";
            var procResultData = await Set<SpGetFileAutoNumberReturnModel>()
                .FromSqlRaw(sqlCommand, uidLevelParam, estimateGidParam, theDateParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGetPlanTopicsHierarchyReturnModel> SpGetPlanTopicsHierarchy(int? portalId, int? requestId)
        {
            int procResult;
            return SpGetPlanTopicsHierarchy(portalId, requestId, out procResult);
        }

        public List<SpGetPlanTopicsHierarchyReturnModel> SpGetPlanTopicsHierarchy(int? portalId, int? requestId, out int procResult)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var requestIdParam = new SqlParameter { ParameterName = "@requestId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GetPlanTopicsHierarchy] @portalId, @requestId";
            var procResultData = Set<SpGetPlanTopicsHierarchyReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, requestIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetPlanTopicsHierarchyReturnModel>> SpGetPlanTopicsHierarchyAsync(int? portalId, int? requestId)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var requestIdParam = new SqlParameter { ParameterName = "@requestId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GetPlanTopicsHierarchy] @portalId, @requestId";
            var procResultData = await Set<SpGetPlanTopicsHierarchyReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, requestIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGetProgramDetailReturnModel> SpGetProgramDetail(int? programId)
        {
            int procResult;
            return SpGetProgramDetail(programId, out procResult);
        }

        public List<SpGetProgramDetailReturnModel> SpGetProgramDetail(int? programId, out int procResult)
        {
            var programIdParam = new SqlParameter { ParameterName = "@_programID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GetProgramDetail] @_programID";
            var procResultData = Set<SpGetProgramDetailReturnModel>()
                .FromSqlRaw(sqlCommand, programIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetProgramDetailReturnModel>> SpGetProgramDetailAsync(int? programId)
        {
            var programIdParam = new SqlParameter { ParameterName = "@_programID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GetProgramDetail] @_programID";
            var procResultData = await Set<SpGetProgramDetailReturnModel>()
                .FromSqlRaw(sqlCommand, programIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGetSubjectsReturnModel> SpGetSubjects()
        {
            int procResult;
            return SpGetSubjects(out procResult);
        }

        public List<SpGetSubjectsReturnModel> SpGetSubjects(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GetSubjects]";
            var procResultData = Set<SpGetSubjectsReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetSubjectsReturnModel>> SpGetSubjectsAsync()
        {
            const string sqlCommand = "EXEC [dbo].[sp_GetSubjects]";
            var procResultData = await Set<SpGetSubjectsReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public int SpGetTaminProgramDetailReport(int? programId, int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, int? pageNum, int? pageSize, out int? totalCount, out int? durationSum, out int? repeatDurationSum, out int? nonRepeatDurationSum, out int? repeatCount)
        {
            var programIdParam = new SqlParameter { ParameterName = "@_programID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = programId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!programId.HasValue)
                programIdParam.Value = DBNull.Value;

            var channelIdParam = new SqlParameter { ParameterName = "@_channelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@_fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@_toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var fromDatePersianParam = new SqlParameter { ParameterName = "@_fromDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDatePersian, Size = 10 };
            if (fromDatePersianParam.Value == null)
                fromDatePersianParam.Value = DBNull.Value;

            var toDatePersianParam = new SqlParameter { ParameterName = "@_toDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDatePersian, Size = 10 };
            if (toDatePersianParam.Value == null)
                toDatePersianParam.Value = DBNull.Value;

            var pageNumParam = new SqlParameter { ParameterName = "@_pageNum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNum.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNum.HasValue)
                pageNumParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@_pageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var totalCountParam = new SqlParameter { ParameterName = "@totalCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var durationSumParam = new SqlParameter { ParameterName = "@durationSum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var repeatDurationSumParam = new SqlParameter { ParameterName = "@repeatDurationSum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var nonRepeatDurationSumParam = new SqlParameter { ParameterName = "@nonRepeatDurationSum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var repeatCountParam = new SqlParameter { ParameterName = "@repeatCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_GetTaminProgramDetailReport] @_programID, @_channelID, @_fromDate, @_toDate, @_fromDatePersian, @_toDatePersian, @_pageNum, @_pageSize, @totalCount OUTPUT, @durationSum OUTPUT, @repeatDurationSum OUTPUT, @nonRepeatDurationSum OUTPUT, @repeatCount OUTPUT", programIdParam, channelIdParam, fromDateParam, toDateParam, fromDatePersianParam, toDatePersianParam, pageNumParam, pageSizeParam, totalCountParam, durationSumParam, repeatDurationSumParam, nonRepeatDurationSumParam, repeatCountParam, procResultParam);

            if (IsSqlParameterNull(totalCountParam))
                totalCount = null;
            else
                totalCount = (int) totalCountParam.Value;

            if (IsSqlParameterNull(durationSumParam))
                durationSum = null;
            else
                durationSum = (int) durationSumParam.Value;

            if (IsSqlParameterNull(repeatDurationSumParam))
                repeatDurationSum = null;
            else
                repeatDurationSum = (int) repeatDurationSumParam.Value;

            if (IsSqlParameterNull(nonRepeatDurationSumParam))
                nonRepeatDurationSum = null;
            else
                nonRepeatDurationSum = (int) nonRepeatDurationSumParam.Value;

            if (IsSqlParameterNull(repeatCountParam))
                repeatCount = null;
            else
                repeatCount = (int) repeatCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpGetTaminProgramDetailReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpGetTaminProgramReport(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, int? pageNum, int? pageSize, out int? totalCount)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@_channelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@_fromDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@_toDate", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var fromDatePersianParam = new SqlParameter { ParameterName = "@_fromDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = fromDatePersian, Size = 10 };
            if (fromDatePersianParam.Value == null)
                fromDatePersianParam.Value = DBNull.Value;

            var toDatePersianParam = new SqlParameter { ParameterName = "@_toDatePersian", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = toDatePersian, Size = 10 };
            if (toDatePersianParam.Value == null)
                toDatePersianParam.Value = DBNull.Value;

            var pageNumParam = new SqlParameter { ParameterName = "@_pageNum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNum.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNum.HasValue)
                pageNumParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@_pageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var totalCountParam = new SqlParameter { ParameterName = "@totalCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_GetTaminProgramReport] @_channelID, @_fromDate, @_toDate, @_fromDatePersian, @_toDatePersian, @_pageNum, @_pageSize, @totalCount OUTPUT", channelIdParam, fromDateParam, toDateParam, fromDatePersianParam, toDatePersianParam, pageNumParam, pageSizeParam, totalCountParam, procResultParam);

            if (IsSqlParameterNull(totalCountParam))
                totalCount = null;
            else
                totalCount = (int) totalCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpGetTaminProgramReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpGetVersionsReturnModel> SpGetVersions(int? channelId, int? weekNumber, string fdate, string tdate)
        {
            int procResult;
            return SpGetVersions(channelId, weekNumber, fdate, tdate, out procResult);
        }

        public List<SpGetVersionsReturnModel> SpGetVersions(int? channelId, int? weekNumber, string fdate, string tdate, out int procResult)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_getVersions] @ChannelID, @weekNumber, @fdate, @tdate";
            var procResultData = Set<SpGetVersionsReturnModel>()
                .FromSqlRaw(sqlCommand, channelIdParam, weekNumberParam, fdateParam, tdateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetVersionsReturnModel>> SpGetVersionsAsync(int? channelId, int? weekNumber, string fdate, string tdate)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_getVersions] @ChannelID, @weekNumber, @fdate, @tdate";
            var procResultData = await Set<SpGetVersionsReturnModel>()
                .FromSqlRaw(sqlCommand, channelIdParam, weekNumberParam, fdateParam, tdateParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGetVersionsPakhshReturnModel> SpGetVersionsPakhsh(int? channelId, int? weekNumber, string fdate, string tdate, bool? isB)
        {
            int procResult;
            return SpGetVersionsPakhsh(channelId, weekNumber, fdate, tdate, isB, out procResult);
        }

        public List<SpGetVersionsPakhshReturnModel> SpGetVersionsPakhsh(int? channelId, int? weekNumber, string fdate, string tdate, bool? isB, out int procResult)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var isBParam = new SqlParameter { ParameterName = "@isB", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isB.GetValueOrDefault() };
            if (!isB.HasValue)
                isBParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_getVersions_Pakhsh] @ChannelID, @weekNumber, @fdate, @tdate, @isB";
            var procResultData = Set<SpGetVersionsPakhshReturnModel>()
                .FromSqlRaw(sqlCommand, channelIdParam, weekNumberParam, fdateParam, tdateParam, isBParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGetVersionsPakhshReturnModel>> SpGetVersionsPakhshAsync(int? channelId, int? weekNumber, string fdate, string tdate, bool? isB)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var isBParam = new SqlParameter { ParameterName = "@isB", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isB.GetValueOrDefault() };
            if (!isB.HasValue)
                isBParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_getVersions_Pakhsh] @ChannelID, @weekNumber, @fdate, @tdate, @isB";
            var procResultData = await Set<SpGetVersionsPakhshReturnModel>()
                .FromSqlRaw(sqlCommand, channelIdParam, weekNumberParam, fdateParam, tdateParam, isBParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGradeByChannelsReturnModel> SpGradeByChannels(int? baseYear, string channelIds)
        {
            int procResult;
            return SpGradeByChannels(baseYear, channelIds, out procResult);
        }

        public List<SpGradeByChannelsReturnModel> SpGradeByChannels(int? baseYear, string channelIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GradeByChannels] @BaseYear, @channelIds";
            var procResultData = Set<SpGradeByChannelsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGradeByChannelsReturnModel>> SpGradeByChannelsAsync(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GradeByChannels] @BaseYear, @channelIds";
            var procResultData = await Set<SpGradeByChannelsReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGroupPerformancePerGradeReturnModel> SpGroupPerformancePerGrade(int? baseYear, int? groupId)
        {
            int procResult;
            return SpGroupPerformancePerGrade(baseYear, groupId, out procResult);
        }

        public List<SpGroupPerformancePerGradeReturnModel> SpGroupPerformancePerGrade(int? baseYear, int? groupId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@GroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GroupPerformancePerGrade] @BaseYear, @GroupID";
            var procResultData = Set<SpGroupPerformancePerGradeReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, groupIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGroupPerformancePerGradeReturnModel>> SpGroupPerformancePerGradeAsync(int? baseYear, int? groupId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@GroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GroupPerformancePerGrade] @BaseYear, @GroupID";
            var procResultData = await Set<SpGroupPerformancePerGradeReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, groupIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpGroupsproduction(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@GroupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_Groupsproduction] @BaseYear, @PortalID, @GroupIds, @fromdate, @todate", baseYearParam, portalIdParam, groupIdsParam, fromdateParam, todateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpGroupsproductionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpGroupsproductionNamayesheiReturnModel> SpGroupsproductionNamayeshei(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            int procResult;
            return SpGroupsproductionNamayeshei(baseYear, portalId, groupIds, fromdate, todate, out procResult);
        }

        public List<SpGroupsproductionNamayesheiReturnModel> SpGroupsproductionNamayeshei(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@GroupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GroupsproductionNamayeshei] @BaseYear, @PortalID, @GroupIds, @fromdate, @todate";
            var procResultData = Set<SpGroupsproductionNamayesheiReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdsParam, fromdateParam, todateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGroupsproductionNamayesheiReturnModel>> SpGroupsproductionNamayesheiAsync(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@GroupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GroupsproductionNamayeshei] @BaseYear, @PortalID, @GroupIds, @fromdate, @todate";
            var procResultData = await Set<SpGroupsproductionNamayesheiReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdsParam, fromdateParam, todateParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpGroupsproductionNamayeshei2ReturnModel> SpGroupsproductionNamayeshei2(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            int procResult;
            return SpGroupsproductionNamayeshei2(baseYear, portalId, groupIds, fromdate, todate, out procResult);
        }

        public List<SpGroupsproductionNamayeshei2ReturnModel> SpGroupsproductionNamayeshei2(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@GroupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_GroupsproductionNamayeshei2] @BaseYear, @PortalID, @GroupIds, @fromdate, @todate";
            var procResultData = Set<SpGroupsproductionNamayeshei2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdsParam, fromdateParam, todateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpGroupsproductionNamayeshei2ReturnModel>> SpGroupsproductionNamayeshei2Async(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@GroupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 1500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_GroupsproductionNamayeshei2] @BaseYear, @PortalID, @GroupIds, @fromdate, @todate";
            var procResultData = await Set<SpGroupsproductionNamayeshei2ReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdsParam, fromdateParam, todateParam)
                .ToListAsync();

            return procResultData;
        }

        // public SpModulePermissionsByUserGroupsReturnModel SpModulePermissionsByUserGroups(int? userTypeGroupId, int? moduleDefinitionId, bool? isAllModules, int? moduleId) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpModulePermissionsByUserGroupsReturnModel> SpModulePermissionsByUserGroupsAsync(int? userTypeGroupId, int? moduleDefinitionId, bool? isAllModules, int? moduleId) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public SpMojriActivityReturnModel SpMojriActivity(string fromDate, string toDate, int? active) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpMojriActivityReturnModel> SpMojriActivityAsync(string fromDate, string toDate, int? active) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public SpMojriActivityDetailReturnModel SpMojriActivityDetail(string fromDate, string toDate, int? active, int? portalId) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpMojriActivityDetailReturnModel> SpMojriActivityDetailAsync(string fromDate, string toDate, int? active, int? portalId) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<SpMojriListReportReturnModel> SpMojriListReport(int? portalId, int? agentId, string fromDate, string toDate, int? active)
        {
            int procResult;
            return SpMojriListReport(portalId, agentId, fromDate, toDate, active, out procResult);
        }

        public List<SpMojriListReportReturnModel> SpMojriListReport(int? portalId, int? agentId, string fromDate, string toDate, int? active, out int procResult)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var agentIdParam = new SqlParameter { ParameterName = "@AgentID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = agentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!agentId.HasValue)
                agentIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@FromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@ToDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var activeParam = new SqlParameter { ParameterName = "@Active", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = active.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!active.HasValue)
                activeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_MojriListReport] @portalID, @AgentID, @FromDate, @ToDate, @Active";
            var procResultData = Set<SpMojriListReportReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, agentIdParam, fromDateParam, toDateParam, activeParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpMojriListReportReturnModel>> SpMojriListReportAsync(int? portalId, int? agentId, string fromDate, string toDate, int? active)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var agentIdParam = new SqlParameter { ParameterName = "@AgentID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = agentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!agentId.HasValue)
                agentIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@FromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@ToDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var activeParam = new SqlParameter { ParameterName = "@Active", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = active.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!active.HasValue)
                activeParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_MojriListReport] @portalID, @AgentID, @FromDate, @ToDate, @Active";
            var procResultData = await Set<SpMojriListReportReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, agentIdParam, fromDateParam, toDateParam, activeParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpMojriPerformanceReturnModel> SpMojriPerformance(int? portalId, int? year)
        {
            int procResult;
            return SpMojriPerformance(portalId, year, out procResult);
        }

        public List<SpMojriPerformanceReturnModel> SpMojriPerformance(int? portalId, int? year, out int procResult)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var yearParam = new SqlParameter { ParameterName = "@Year", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = year.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!year.HasValue)
                yearParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_MojriPerformance] @portalID, @Year";
            var procResultData = Set<SpMojriPerformanceReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, yearParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpMojriPerformanceReturnModel>> SpMojriPerformanceAsync(int? portalId, int? year)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var yearParam = new SqlParameter { ParameterName = "@Year", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = year.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!year.HasValue)
                yearParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_MojriPerformance] @portalID, @Year";
            var procResultData = await Set<SpMojriPerformanceReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, yearParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpMojriProgramReportReturnModel> SpMojriProgramReport(int? mojriId)
        {
            int procResult;
            return SpMojriProgramReport(mojriId, out procResult);
        }

        public List<SpMojriProgramReportReturnModel> SpMojriProgramReport(int? mojriId, out int procResult)
        {
            var mojriIdParam = new SqlParameter { ParameterName = "@MojriID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = mojriId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mojriId.HasValue)
                mojriIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_MojriProgramReport] @MojriID";
            var procResultData = Set<SpMojriProgramReportReturnModel>()
                .FromSqlRaw(sqlCommand, mojriIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpMojriProgramReportReturnModel>> SpMojriProgramReportAsync(int? mojriId)
        {
            var mojriIdParam = new SqlParameter { ParameterName = "@MojriID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = mojriId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mojriId.HasValue)
                mojriIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_MojriProgramReport] @MojriID";
            var procResultData = await Set<SpMojriProgramReportReturnModel>()
                .FromSqlRaw(sqlCommand, mojriIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpMojriProgramsReturnModel> SpMojriPrograms(int? mojriId)
        {
            int procResult;
            return SpMojriPrograms(mojriId, out procResult);
        }

        public List<SpMojriProgramsReturnModel> SpMojriPrograms(int? mojriId, out int procResult)
        {
            var mojriIdParam = new SqlParameter { ParameterName = "@MojriID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = mojriId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mojriId.HasValue)
                mojriIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_MojriPrograms] @MojriID";
            var procResultData = Set<SpMojriProgramsReturnModel>()
                .FromSqlRaw(sqlCommand, mojriIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpMojriProgramsReturnModel>> SpMojriProgramsAsync(int? mojriId)
        {
            var mojriIdParam = new SqlParameter { ParameterName = "@MojriID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = mojriId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mojriId.HasValue)
                mojriIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_MojriPrograms] @MojriID";
            var procResultData = await Set<SpMojriProgramsReturnModel>()
                .FromSqlRaw(sqlCommand, mojriIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpNamayeshiProgramsStatusReturnModel> SpNamayeshiProgramsStatus(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureTypeId, int? eventId, int? writingProgressFrom, int? writingProgressTo, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, int? isTransfered)
        {
            int procResult;
            return SpNamayeshiProgramsStatus(baseYear, portalId, groupId, progname, estimateNo, licenseNo, gradeId, structureTypeId, eventId, writingProgressFrom, writingProgressTo, productionProgressFrom, productionProgressTo, playProgressFrom, playProgressTo, paymentProgressFrom, paymentProgressTo, isTransfered, out procResult);
        }

        public List<SpNamayeshiProgramsStatusReturnModel> SpNamayeshiProgramsStatus(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureTypeId, int? eventId, int? writingProgressFrom, int? writingProgressTo, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, int? isTransfered, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var productionProgressFromParam = new SqlParameter { ParameterName = "@ProductionProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressFrom.HasValue)
                productionProgressFromParam.Value = DBNull.Value;

            var productionProgressToParam = new SqlParameter { ParameterName = "@ProductionProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressTo.HasValue)
                productionProgressToParam.Value = DBNull.Value;

            var playProgressFromParam = new SqlParameter { ParameterName = "@PlayProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressFrom.HasValue)
                playProgressFromParam.Value = DBNull.Value;

            var playProgressToParam = new SqlParameter { ParameterName = "@PlayProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressTo.HasValue)
                playProgressToParam.Value = DBNull.Value;

            var paymentProgressFromParam = new SqlParameter { ParameterName = "@PaymentProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressFrom.HasValue)
                paymentProgressFromParam.Value = DBNull.Value;

            var paymentProgressToParam = new SqlParameter { ParameterName = "@PaymentProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressTo.HasValue)
                paymentProgressToParam.Value = DBNull.Value;

            var isTransferedParam = new SqlParameter { ParameterName = "@isTransfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTransfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTransfered.HasValue)
                isTransferedParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_NamayeshiProgramsStatus] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureTypeId, @eventId, @WritingProgressFrom, @WritingProgressTo, @ProductionProgressFrom, @ProductionProgressTo, @PlayProgressFrom, @PlayProgressTo, @PaymentProgressFrom, @PaymentProgressTo, @isTransfered";
            var procResultData = Set<SpNamayeshiProgramsStatusReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureTypeIdParam, eventIdParam, writingProgressFromParam, writingProgressToParam, productionProgressFromParam, productionProgressToParam, playProgressFromParam, playProgressToParam, paymentProgressFromParam, paymentProgressToParam, isTransferedParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpNamayeshiProgramsStatusReturnModel>> SpNamayeshiProgramsStatusAsync(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureTypeId, int? eventId, int? writingProgressFrom, int? writingProgressTo, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, int? isTransfered)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var productionProgressFromParam = new SqlParameter { ParameterName = "@ProductionProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressFrom.HasValue)
                productionProgressFromParam.Value = DBNull.Value;

            var productionProgressToParam = new SqlParameter { ParameterName = "@ProductionProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressTo.HasValue)
                productionProgressToParam.Value = DBNull.Value;

            var playProgressFromParam = new SqlParameter { ParameterName = "@PlayProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressFrom.HasValue)
                playProgressFromParam.Value = DBNull.Value;

            var playProgressToParam = new SqlParameter { ParameterName = "@PlayProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressTo.HasValue)
                playProgressToParam.Value = DBNull.Value;

            var paymentProgressFromParam = new SqlParameter { ParameterName = "@PaymentProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressFrom.HasValue)
                paymentProgressFromParam.Value = DBNull.Value;

            var paymentProgressToParam = new SqlParameter { ParameterName = "@PaymentProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressTo.HasValue)
                paymentProgressToParam.Value = DBNull.Value;

            var isTransferedParam = new SqlParameter { ParameterName = "@isTransfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTransfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTransfered.HasValue)
                isTransferedParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_NamayeshiProgramsStatus] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureTypeId, @eventId, @WritingProgressFrom, @WritingProgressTo, @ProductionProgressFrom, @ProductionProgressTo, @PlayProgressFrom, @PlayProgressTo, @PaymentProgressFrom, @PaymentProgressTo, @isTransfered";
            var procResultData = await Set<SpNamayeshiProgramsStatusReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureTypeIdParam, eventIdParam, writingProgressFromParam, writingProgressToParam, productionProgressFromParam, productionProgressToParam, playProgressFromParam, playProgressToParam, paymentProgressFromParam, paymentProgressToParam, isTransferedParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpNamayeshiProgramsStatus2(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureTypeId, int? eventId, int? writingProgressFrom, int? writingProgressTo, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, int? isTransfered, int? keyProductionTotal, int? keyAfterProductionTotal, int? keyBeforeProductionTotal, int? keyWritingTotal, string keyProgrammingPart, bool? allRecord, int? pageNumber, int? rowsPerPage, out int? totalRowsCount)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var productionProgressFromParam = new SqlParameter { ParameterName = "@ProductionProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressFrom.HasValue)
                productionProgressFromParam.Value = DBNull.Value;

            var productionProgressToParam = new SqlParameter { ParameterName = "@ProductionProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressTo.HasValue)
                productionProgressToParam.Value = DBNull.Value;

            var playProgressFromParam = new SqlParameter { ParameterName = "@PlayProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressFrom.HasValue)
                playProgressFromParam.Value = DBNull.Value;

            var playProgressToParam = new SqlParameter { ParameterName = "@PlayProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressTo.HasValue)
                playProgressToParam.Value = DBNull.Value;

            var paymentProgressFromParam = new SqlParameter { ParameterName = "@PaymentProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressFrom.HasValue)
                paymentProgressFromParam.Value = DBNull.Value;

            var paymentProgressToParam = new SqlParameter { ParameterName = "@PaymentProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressTo.HasValue)
                paymentProgressToParam.Value = DBNull.Value;

            var isTransferedParam = new SqlParameter { ParameterName = "@isTransfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTransfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTransfered.HasValue)
                isTransferedParam.Value = DBNull.Value;

            var keyProductionTotalParam = new SqlParameter { ParameterName = "@Key_Production_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyProductionTotal.HasValue)
                keyProductionTotalParam.Value = DBNull.Value;

            var keyAfterProductionTotalParam = new SqlParameter { ParameterName = "@Key_AfterProduction_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyAfterProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyAfterProductionTotal.HasValue)
                keyAfterProductionTotalParam.Value = DBNull.Value;

            var keyBeforeProductionTotalParam = new SqlParameter { ParameterName = "@Key_BeforeProduction_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyBeforeProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyBeforeProductionTotal.HasValue)
                keyBeforeProductionTotalParam.Value = DBNull.Value;

            var keyWritingTotalParam = new SqlParameter { ParameterName = "@Key_Writing_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyWritingTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyWritingTotal.HasValue)
                keyWritingTotalParam.Value = DBNull.Value;

            var keyProgrammingPartParam = new SqlParameter { ParameterName = "@Key_Programming_Part", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = keyProgrammingPart, Size = 1000 };
            if (keyProgrammingPartParam.Value == null)
                keyProgrammingPartParam.Value = DBNull.Value;

            var allRecordParam = new SqlParameter { ParameterName = "@AllRecord", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = allRecord.GetValueOrDefault() };
            if (!allRecord.HasValue)
                allRecordParam.Value = DBNull.Value;

            var pageNumberParam = new SqlParameter { ParameterName = "@PageNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = DBNull.Value;

            var rowsPerPageParam = new SqlParameter { ParameterName = "@RowsPerPage", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = rowsPerPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowsPerPage.HasValue)
                rowsPerPageParam.Value = DBNull.Value;

            var totalRowsCountParam = new SqlParameter { ParameterName = "@TotalRowsCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_NamayeshiProgramsStatus_2] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureTypeId, @eventId, @WritingProgressFrom, @WritingProgressTo, @ProductionProgressFrom, @ProductionProgressTo, @PlayProgressFrom, @PlayProgressTo, @PaymentProgressFrom, @PaymentProgressTo, @isTransfered, @Key_Production_Total, @Key_AfterProduction_Total, @Key_BeforeProduction_Total, @Key_Writing_Total, @Key_Programming_Part, @AllRecord, @PageNumber, @RowsPerPage, @TotalRowsCount OUTPUT", baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureTypeIdParam, eventIdParam, writingProgressFromParam, writingProgressToParam, productionProgressFromParam, productionProgressToParam, playProgressFromParam, playProgressToParam, paymentProgressFromParam, paymentProgressToParam, isTransferedParam, keyProductionTotalParam, keyAfterProductionTotalParam, keyBeforeProductionTotalParam, keyWritingTotalParam, keyProgrammingPartParam, allRecordParam, pageNumberParam, rowsPerPageParam, totalRowsCountParam, procResultParam);

            if (IsSqlParameterNull(totalRowsCountParam))
                totalRowsCount = null;
            else
                totalRowsCount = (int) totalRowsCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpNamayeshiProgramsStatus2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpNamayeshiProgramsStatus3(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureTypeId, int? eventId, int? writingProgressFrom, int? writingProgressTo, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, int? isTransfered, int? keyProductionTotal, int? keyAfterProductionTotal, int? keyBeforeProductionTotal, int? keyWritingTotal, string keyProgrammingPart, bool? allRecord, int? pageNumber, int? rowsPerPage, out int? totalRowsCount)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var licenseNoParam = new SqlParameter { ParameterName = "@licenseNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = licenseNo, Size = 12 };
            if (licenseNoParam.Value == null)
                licenseNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var eventIdParam = new SqlParameter { ParameterName = "@eventId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = eventId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!eventId.HasValue)
                eventIdParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var productionProgressFromParam = new SqlParameter { ParameterName = "@ProductionProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressFrom.HasValue)
                productionProgressFromParam.Value = DBNull.Value;

            var productionProgressToParam = new SqlParameter { ParameterName = "@ProductionProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = productionProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!productionProgressTo.HasValue)
                productionProgressToParam.Value = DBNull.Value;

            var playProgressFromParam = new SqlParameter { ParameterName = "@PlayProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressFrom.HasValue)
                playProgressFromParam.Value = DBNull.Value;

            var playProgressToParam = new SqlParameter { ParameterName = "@PlayProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = playProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!playProgressTo.HasValue)
                playProgressToParam.Value = DBNull.Value;

            var paymentProgressFromParam = new SqlParameter { ParameterName = "@PaymentProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressFrom.HasValue)
                paymentProgressFromParam.Value = DBNull.Value;

            var paymentProgressToParam = new SqlParameter { ParameterName = "@PaymentProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentProgressTo.HasValue)
                paymentProgressToParam.Value = DBNull.Value;

            var isTransferedParam = new SqlParameter { ParameterName = "@isTransfered", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isTransfered.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isTransfered.HasValue)
                isTransferedParam.Value = DBNull.Value;

            var keyProductionTotalParam = new SqlParameter { ParameterName = "@Key_Production_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyProductionTotal.HasValue)
                keyProductionTotalParam.Value = DBNull.Value;

            var keyAfterProductionTotalParam = new SqlParameter { ParameterName = "@Key_AfterProduction_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyAfterProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyAfterProductionTotal.HasValue)
                keyAfterProductionTotalParam.Value = DBNull.Value;

            var keyBeforeProductionTotalParam = new SqlParameter { ParameterName = "@Key_BeforeProduction_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyBeforeProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyBeforeProductionTotal.HasValue)
                keyBeforeProductionTotalParam.Value = DBNull.Value;

            var keyWritingTotalParam = new SqlParameter { ParameterName = "@Key_Writing_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyWritingTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyWritingTotal.HasValue)
                keyWritingTotalParam.Value = DBNull.Value;

            var keyProgrammingPartParam = new SqlParameter { ParameterName = "@Key_Programming_Part", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = keyProgrammingPart, Size = 1000 };
            if (keyProgrammingPartParam.Value == null)
                keyProgrammingPartParam.Value = DBNull.Value;

            var allRecordParam = new SqlParameter { ParameterName = "@AllRecord", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = allRecord.GetValueOrDefault() };
            if (!allRecord.HasValue)
                allRecordParam.Value = DBNull.Value;

            var pageNumberParam = new SqlParameter { ParameterName = "@PageNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = DBNull.Value;

            var rowsPerPageParam = new SqlParameter { ParameterName = "@RowsPerPage", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = rowsPerPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowsPerPage.HasValue)
                rowsPerPageParam.Value = DBNull.Value;

            var totalRowsCountParam = new SqlParameter { ParameterName = "@TotalRowsCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_NamayeshiProgramsStatus_3] @baseYear, @portalId, @groupId, @progname, @estimateNo, @licenseNo, @gradeId, @structureTypeId, @eventId, @WritingProgressFrom, @WritingProgressTo, @ProductionProgressFrom, @ProductionProgressTo, @PlayProgressFrom, @PlayProgressTo, @PaymentProgressFrom, @PaymentProgressTo, @isTransfered, @Key_Production_Total, @Key_AfterProduction_Total, @Key_BeforeProduction_Total, @Key_Writing_Total, @Key_Programming_Part, @AllRecord, @PageNumber, @RowsPerPage, @TotalRowsCount OUTPUT", baseYearParam, portalIdParam, groupIdParam, prognameParam, estimateNoParam, licenseNoParam, gradeIdParam, structureTypeIdParam, eventIdParam, writingProgressFromParam, writingProgressToParam, productionProgressFromParam, productionProgressToParam, playProgressFromParam, playProgressToParam, paymentProgressFromParam, paymentProgressToParam, isTransferedParam, keyProductionTotalParam, keyAfterProductionTotalParam, keyBeforeProductionTotalParam, keyWritingTotalParam, keyProgrammingPartParam, allRecordParam, pageNumberParam, rowsPerPageParam, totalRowsCountParam, procResultParam);

            if (IsSqlParameterNull(totalRowsCountParam))
                totalRowsCount = null;
            else
                totalRowsCount = (int) totalRowsCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpNamayeshiProgramsStatus3Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpPaymentReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? hasproduction, int? prodPercentFrom, int? prodPercentto, int? haspayment, int? paymentPercentFrom, int? paymentPercentto, int? orderbywhat)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromDate.GetValueOrDefault() };
            if (!fromDate.HasValue)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = toDate.GetValueOrDefault() };
            if (!toDate.HasValue)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var producerNameParam = new SqlParameter { ParameterName = "@producerName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = producerName, Size = 50 };
            if (producerNameParam.Value == null)
                producerNameParam.Value = DBNull.Value;

            var hasproductionParam = new SqlParameter { ParameterName = "@hasproduction", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasproduction.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasproduction.HasValue)
                hasproductionParam.Value = DBNull.Value;

            var prodPercentFromParam = new SqlParameter { ParameterName = "@prodPercentFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = prodPercentFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!prodPercentFrom.HasValue)
                prodPercentFromParam.Value = DBNull.Value;

            var prodPercenttoParam = new SqlParameter { ParameterName = "@prodPercentto", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = prodPercentto.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!prodPercentto.HasValue)
                prodPercenttoParam.Value = DBNull.Value;

            var haspaymentParam = new SqlParameter { ParameterName = "@haspayment", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = haspayment.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!haspayment.HasValue)
                haspaymentParam.Value = DBNull.Value;

            var paymentPercentFromParam = new SqlParameter { ParameterName = "@paymentPercentFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentPercentFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentPercentFrom.HasValue)
                paymentPercentFromParam.Value = DBNull.Value;

            var paymentPercenttoParam = new SqlParameter { ParameterName = "@paymentPercentto", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = paymentPercentto.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!paymentPercentto.HasValue)
                paymentPercenttoParam.Value = DBNull.Value;

            var orderbywhatParam = new SqlParameter { ParameterName = "@orderbywhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbywhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbywhat.HasValue)
                orderbywhatParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_PaymentReport] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @producerName, @hasproduction, @prodPercentFrom, @prodPercentto, @haspayment, @paymentPercentFrom, @paymentPercentto, @orderbywhat", baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, producerNameParam, hasproductionParam, prodPercentFromParam, prodPercenttoParam, haspaymentParam, paymentPercentFromParam, paymentPercenttoParam, orderbywhatParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpPaymentReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpPerformanceOfGroupByGradeAndChannelIdReturnModel> SpPerformanceOfGroupByGradeAndChannelId(int? baseYear, int? channelIds, int? gradeId, int? structureId)
        {
            int procResult;
            return SpPerformanceOfGroupByGradeAndChannelId(baseYear, channelIds, gradeId, structureId, out procResult);
        }

        public List<SpPerformanceOfGroupByGradeAndChannelIdReturnModel> SpPerformanceOfGroupByGradeAndChannelId(int? baseYear, int? channelIds, int? gradeId, int? structureId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelIds.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelIds.HasValue)
                channelIdsParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_PerformanceOfGroupByGradeAndChannelId] @BaseYear, @channelIds, @gradeId, @structureId";
            var procResultData = Set<SpPerformanceOfGroupByGradeAndChannelIdReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, gradeIdParam, structureIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpPerformanceOfGroupByGradeAndChannelIdReturnModel>> SpPerformanceOfGroupByGradeAndChannelIdAsync(int? baseYear, int? channelIds, int? gradeId, int? structureId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelIds.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelIds.HasValue)
                channelIdsParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_PerformanceOfGroupByGradeAndChannelId] @BaseYear, @channelIds, @gradeId, @structureId";
            var procResultData = await Set<SpPerformanceOfGroupByGradeAndChannelIdReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, gradeIdParam, structureIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpPortalPerformancePerGradeReturnModel> SpPortalPerformancePerGrade(int? baseYear, int? portalId, int? structureId, int? approachId)
        {
            int procResult;
            return SpPortalPerformancePerGrade(baseYear, portalId, structureId, approachId, out procResult);
        }

        public List<SpPortalPerformancePerGradeReturnModel> SpPortalPerformancePerGrade(int? baseYear, int? portalId, int? structureId, int? approachId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_PortalPerformancePerGrade] @BaseYear, @PortalID, @structureId, @approachId";
            var procResultData = Set<SpPortalPerformancePerGradeReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, structureIdParam, approachIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpPortalPerformancePerGradeReturnModel>> SpPortalPerformancePerGradeAsync(int? baseYear, int? portalId, int? structureId, int? approachId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var approachIdParam = new SqlParameter { ParameterName = "@approachId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = approachId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!approachId.HasValue)
                approachIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_PortalPerformancePerGrade] @BaseYear, @PortalID, @structureId, @approachId";
            var procResultData = await Set<SpPortalPerformancePerGradeReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, structureIdParam, approachIdParam)
                .ToListAsync();

            return procResultData;
        }

        // public SpPortalPerformanceTimeBudgetReturnModel SpPortalPerformanceTimeBudget(int? baseYear, int? portalId) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpPortalPerformanceTimeBudgetReturnModel> SpPortalPerformanceTimeBudgetAsync(int? baseYear, int? portalId) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public int SpPortalPerformanceTimeBudget2(int? baseYear, int? portalId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_PortalPerformanceTimeBudget2] @BaseYear, @PortalID", baseYearParam, portalIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpPortalPerformanceTimeBudget2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpProducerInfoReturnModel> SpProducerInfo(int? agentId)
        {
            int procResult;
            return SpProducerInfo(agentId, out procResult);
        }

        public List<SpProducerInfoReturnModel> SpProducerInfo(int? agentId, out int procResult)
        {
            var agentIdParam = new SqlParameter { ParameterName = "@AgentID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = agentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!agentId.HasValue)
                agentIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ProducerInfo] @AgentID";
            var procResultData = Set<SpProducerInfoReturnModel>()
                .FromSqlRaw(sqlCommand, agentIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpProducerInfoReturnModel>> SpProducerInfoAsync(int? agentId)
        {
            var agentIdParam = new SqlParameter { ParameterName = "@AgentID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = agentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!agentId.HasValue)
                agentIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ProducerInfo] @AgentID";
            var procResultData = await Set<SpProducerInfoReturnModel>()
                .FromSqlRaw(sqlCommand, agentIdParam)
                .ToListAsync();

            return procResultData;
        }

        // public SpProducerListReportReturnModel SpProducerListReport(int? portalId, int? agentId, string fromDate, string toDate, int? statusId) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpProducerListReportReturnModel> SpProducerListReportAsync(int? portalId, int? agentId, string fromDate, string toDate, int? statusId) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public SpProducerReportReturnModel SpProducerReport(int? portalId, int? agentId, string fromDate, string toDate, int? statusId) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpProducerReportReturnModel> SpProducerReportAsync(int? portalId, int? agentId, string fromDate, string toDate, int? statusId) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public SpProductionAgentReturnModel SpProductionAgent(int? logId, int? typeId, int? step) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpProductionAgentReturnModel> SpProductionAgentAsync(int? logId, int? typeId, int? step) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public SpProductionAgentByLogIdReturnModel SpProductionAgentByLogId(int? logId, int? typeId, int? step) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpProductionAgentByLogIdReturnModel> SpProductionAgentByLogIdAsync(int? logId, int? typeId, int? step) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<SpProductionGradesByChannelGroupReturnModel> SpProductionGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            int procResult;
            return SpProductionGradesByChannelGroup(baseYear, channelIds, groupIds, fromdate, todate, out procResult);
        }

        public List<SpProductionGradesByChannelGroupReturnModel> SpProductionGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ProductionGradesByChannelGroup] @BaseYear, @channelIds, @groupIds, @fromdate, @todate";
            var procResultData = Set<SpProductionGradesByChannelGroupReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam, fromdateParam, todateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpProductionGradesByChannelGroupReturnModel>> SpProductionGradesByChannelGroupAsync(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var groupIdsParam = new SqlParameter { ParameterName = "@groupIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = groupIds, Size = 500 };
            if (groupIdsParam.Value == null)
                groupIdsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ProductionGradesByChannelGroup] @BaseYear, @channelIds, @groupIds, @fromdate, @todate";
            var procResultData = await Set<SpProductionGradesByChannelGroupReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, groupIdsParam, fromdateParam, todateParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_ProductionProgress] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted", baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpProductionProgressAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpProductionProgressByRequestIdReturnModel> SpProductionProgressByRequestId(int? requestId)
        {
            int procResult;
            return SpProductionProgressByRequestId(requestId, out procResult);
        }

        public List<SpProductionProgressByRequestIdReturnModel> SpProductionProgressByRequestId(int? requestId, out int procResult)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ProductionProgressByRequestID] @RequestID";
            var procResultData = Set<SpProductionProgressByRequestIdReturnModel>()
                .FromSqlRaw(sqlCommand, requestIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpProductionProgressByRequestIdReturnModel>> SpProductionProgressByRequestIdAsync(int? requestId)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ProductionProgressByRequestID] @RequestID";
            var procResultData = await Set<SpProductionProgressByRequestIdReturnModel>()
                .FromSqlRaw(sqlCommand, requestIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpProgramParticipationReturnModel> SpProgramParticipation(int? baseYear, int? portalIds)
        {
            int procResult;
            return SpProgramParticipation(baseYear, portalIds, out procResult);
        }

        public List<SpProgramParticipationReturnModel> SpProgramParticipation(int? baseYear, int? portalIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdsParam = new SqlParameter { ParameterName = "@PortalIds", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalIds.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalIds.HasValue)
                portalIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ProgramParticipation] @baseYear, @PortalIds";
            var procResultData = Set<SpProgramParticipationReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpProgramParticipationReturnModel>> SpProgramParticipationAsync(int? baseYear, int? portalIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdsParam = new SqlParameter { ParameterName = "@PortalIds", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalIds.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalIds.HasValue)
                portalIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ProgramParticipation] @baseYear, @PortalIds";
            var procResultData = await Set<SpProgramParticipationReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdsParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpProgramsQualityListReturnModel> SpProgramsQualityList(int? baseYear, int? portalId, int? groupId, string progname, string producer, int? pagesize, int? startrow)
        {
            int procResult;
            return SpProgramsQualityList(baseYear, portalId, groupId, progname, producer, pagesize, startrow, out procResult);
        }

        public List<SpProgramsQualityListReturnModel> SpProgramsQualityList(int? baseYear, int? portalId, int? groupId, string progname, string producer, int? pagesize, int? startrow, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 100 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var producerParam = new SqlParameter { ParameterName = "@producer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = producer, Size = 100 };
            if (producerParam.Value == null)
                producerParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ProgramsQualityList] @baseYear, @portalId, @groupId, @progname, @producer, @pagesize, @startrow";
            var procResultData = Set<SpProgramsQualityListReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, producerParam, pagesizeParam, startrowParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpProgramsQualityListReturnModel>> SpProgramsQualityListAsync(int? baseYear, int? portalId, int? groupId, string progname, string producer, int? pagesize, int? startrow)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 100 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var producerParam = new SqlParameter { ParameterName = "@producer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = producer, Size = 100 };
            if (producerParam.Value == null)
                producerParam.Value = DBNull.Value;

            var pagesizeParam = new SqlParameter { ParameterName = "@pagesize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pagesize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pagesize.HasValue)
                pagesizeParam.Value = DBNull.Value;

            var startrowParam = new SqlParameter { ParameterName = "@startrow", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startrow.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startrow.HasValue)
                startrowParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ProgramsQualityList] @baseYear, @portalId, @groupId, @progname, @producer, @pagesize, @startrow";
            var procResultData = await Set<SpProgramsQualityListReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, producerParam, pagesizeParam, startrowParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpProgramsQualityListAllReturnModel> SpProgramsQualityListAll(int? baseYear, int? portalId, int? groupId, string progname, string producer)
        {
            int procResult;
            return SpProgramsQualityListAll(baseYear, portalId, groupId, progname, producer, out procResult);
        }

        public List<SpProgramsQualityListAllReturnModel> SpProgramsQualityListAll(int? baseYear, int? portalId, int? groupId, string progname, string producer, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 100 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var producerParam = new SqlParameter { ParameterName = "@producer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = producer, Size = 100 };
            if (producerParam.Value == null)
                producerParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ProgramsQualityListAll] @baseYear, @portalId, @groupId, @progname, @producer";
            var procResultData = Set<SpProgramsQualityListAllReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, producerParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpProgramsQualityListAllReturnModel>> SpProgramsQualityListAllAsync(int? baseYear, int? portalId, int? groupId, string progname, string producer)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = groupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!groupId.HasValue)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 100 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var producerParam = new SqlParameter { ParameterName = "@producer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = producer, Size = 100 };
            if (producerParam.Value == null)
                producerParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ProgramsQualityListAll] @baseYear, @portalId, @groupId, @progname, @producer";
            var procResultData = await Set<SpProgramsQualityListAllReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, groupIdParam, prognameParam, producerParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpProgramStructuresReturnModel> SpProgramStructures(int? baseYear, string channelIds)
        {
            int procResult;
            return SpProgramStructures(baseYear, channelIds, out procResult);
        }

        public List<SpProgramStructuresReturnModel> SpProgramStructures(int? baseYear, string channelIds, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_ProgramStructures] @BaseYear, @channelIds";
            var procResultData = Set<SpProgramStructuresReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpProgramStructuresReturnModel>> SpProgramStructuresAsync(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_ProgramStructures] @BaseYear, @channelIds";
            var procResultData = await Set<SpProgramStructuresReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, channelIdsParam)
                .ToListAsync();

            return procResultData;
        }

        // public SpProgramSubjectsReturnModel SpProgramSubjects(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? isTransfered, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpProgramSubjectsReturnModel> SpProgramSubjectsAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? isTransfered, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public SpProgramSubjectsCountReturnModel SpProgramSubjectsCount(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? isTransfered, int? structureId, int? l1Id, int? l2Id, int? l3Id) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpProgramSubjectsCountReturnModel> SpProgramSubjectsCountAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? isTransfered, int? structureId, int? l1Id, int? l2Id, int? l3Id) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<SpQualityByPortalReturnModel> SpQualityByPortal(int? baseYear, int? portalId)
        {
            int procResult;
            return SpQualityByPortal(baseYear, portalId, out procResult);
        }

        public List<SpQualityByPortalReturnModel> SpQualityByPortal(int? baseYear, int? portalId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_QualityByPortal] @baseYear, @PortalID";
            var procResultData = Set<SpQualityByPortalReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpQualityByPortalReturnModel>> SpQualityByPortalAsync(int? baseYear, int? portalId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_QualityByPortal] @baseYear, @PortalID";
            var procResultData = await Set<SpQualityByPortalReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpReleaseConductor(int? channelId, int? weekNumber, string fdate, string tdate)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_releaseConductor] @ChannelID, @weekNumber, @fdate, @tdate", channelIdParam, weekNumberParam, fdateParam, tdateParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpReleaseConductorAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpReleaseConductorPakhsh(int? channelId, int? weekNumber, string fdate, string tdate, bool? isB)
        {
            var channelIdParam = new SqlParameter { ParameterName = "@ChannelID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = channelId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!channelId.HasValue)
                channelIdParam.Value = DBNull.Value;

            var weekNumberParam = new SqlParameter { ParameterName = "@weekNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = weekNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!weekNumber.HasValue)
                weekNumberParam.Value = DBNull.Value;

            var fdateParam = new SqlParameter { ParameterName = "@fdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fdate, Size = 10 };
            if (fdateParam.Value == null)
                fdateParam.Value = DBNull.Value;

            var tdateParam = new SqlParameter { ParameterName = "@tdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tdate, Size = 10 };
            if (tdateParam.Value == null)
                tdateParam.Value = DBNull.Value;

            var isBParam = new SqlParameter { ParameterName = "@isB", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isB.GetValueOrDefault() };
            if (!isB.HasValue)
                isBParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_releaseConductor_Pakhsh] @ChannelID, @weekNumber, @fdate, @tdate, @isB", channelIdParam, weekNumberParam, fdateParam, tdateParam, isBParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpReleaseConductorPakhshAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpRequestAgents(int? baseYear, int? portalId, int? orderbyWhat)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@OrderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_RequestAgents] @BaseYear, @PortalID, @OrderbyWhat", baseYearParam, portalIdParam, orderbyWhatParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpRequestAgentsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpRequestBaseYear(int? requestId, out int? result)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var resultParam = new SqlParameter { ParameterName = "@Result", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_RequestBaseYear] @RequestID, @Result OUTPUT", requestIdParam, resultParam, procResultParam);

            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            return (int)procResultParam.Value;
        }

        // SpRequestBaseYearAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpRequestCountProduction(int? requestId, out int? result)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var resultParam = new SqlParameter { ParameterName = "@Result", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_RequestCountProduction] @RequestID, @Result OUTPUT", requestIdParam, resultParam, procResultParam);

            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            return (int)procResultParam.Value;
        }

        // SpRequestCountProductionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpRequestLog(int? requestId, out int? result)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var resultParam = new SqlParameter { ParameterName = "@Result", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_RequestLog] @RequestID, @Result OUTPUT", requestIdParam, resultParam, procResultParam);

            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            return (int)procResultParam.Value;
        }

        // SpRequestLogAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpRequestLogDesc(int? requestId, out string result)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var resultParam = new SqlParameter { ParameterName = "@Result", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Output, Size = 1000 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_RequestLogDesc] @RequestID, @Result OUTPUT", requestIdParam, resultParam, procResultParam);

            if (IsSqlParameterNull(resultParam))
                result = default(string);
            else
                result = (string) resultParam.Value;

            return (int)procResultParam.Value;
        }

        // SpRequestLogDescAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpRequestPaymentLog(int? requestId, out int? result)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var resultParam = new SqlParameter { ParameterName = "@Result", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_RequestPaymentLog] @RequestID, @Result OUTPUT", requestIdParam, resultParam, procResultParam);

            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            return (int)procResultParam.Value;
        }

        // SpRequestPaymentLogAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpRequestProductionProgressReturnModel> SpRequestProductionProgress(int? requestId)
        {
            int procResult;
            return SpRequestProductionProgress(requestId, out procResult);
        }

        public List<SpRequestProductionProgressReturnModel> SpRequestProductionProgress(int? requestId, out int procResult)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_RequestProductionProgress] @RequestID";
            var procResultData = Set<SpRequestProductionProgressReturnModel>()
                .FromSqlRaw(sqlCommand, requestIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpRequestProductionProgressReturnModel>> SpRequestProductionProgressAsync(int? requestId)
        {
            var requestIdParam = new SqlParameter { ParameterName = "@RequestID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = requestId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!requestId.HasValue)
                requestIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_RequestProductionProgress] @RequestID";
            var procResultData = await Set<SpRequestProductionProgressReturnModel>()
                .FromSqlRaw(sqlCommand, requestIdParam)
                .ToListAsync();

            return procResultData;
        }

        // public SpRequestProductionSubjectReportReturnModel SpRequestProductionSubjectReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subjectsId, int? subsubjectId, int? subjectType) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SpRequestProductionSubjectReportReturnModel> SpRequestProductionSubjectReportAsync(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subjectsId, int? subsubjectId, int? subjectType) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<SpSamtAllPlanTopicTimeReturnModel> SpSamtAllPlanTopicTime(int? planId, int? portalId, int? baseYear)
        {
            int procResult;
            return SpSamtAllPlanTopicTime(planId, portalId, baseYear, out procResult);
        }

        public List<SpSamtAllPlanTopicTimeReturnModel> SpSamtAllPlanTopicTime(int? planId, int? portalId, int? baseYear, out int procResult)
        {
            var planIdParam = new SqlParameter { ParameterName = "@PlanID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = planId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!planId.HasValue)
                planIdParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_Samt_AllPlanTopicTime] @PlanID, @PortalID, @BaseYear";
            var procResultData = Set<SpSamtAllPlanTopicTimeReturnModel>()
                .FromSqlRaw(sqlCommand, planIdParam, portalIdParam, baseYearParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpSamtAllPlanTopicTimeReturnModel>> SpSamtAllPlanTopicTimeAsync(int? planId, int? portalId, int? baseYear)
        {
            var planIdParam = new SqlParameter { ParameterName = "@PlanID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = planId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!planId.HasValue)
                planIdParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_Samt_AllPlanTopicTime] @PlanID, @PortalID, @BaseYear";
            var procResultData = await Set<SpSamtAllPlanTopicTimeReturnModel>()
                .FromSqlRaw(sqlCommand, planIdParam, portalIdParam, baseYearParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpSamtAllPlanTopicTimeL2ReturnModel> SpSamtAllPlanTopicTimeL2(int? planId, int? portalId, int? baseYear)
        {
            int procResult;
            return SpSamtAllPlanTopicTimeL2(planId, portalId, baseYear, out procResult);
        }

        public List<SpSamtAllPlanTopicTimeL2ReturnModel> SpSamtAllPlanTopicTimeL2(int? planId, int? portalId, int? baseYear, out int procResult)
        {
            var planIdParam = new SqlParameter { ParameterName = "@PlanID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = planId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!planId.HasValue)
                planIdParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_Samt_AllPlanTopicTimeL2] @PlanID, @PortalID, @BaseYear";
            var procResultData = Set<SpSamtAllPlanTopicTimeL2ReturnModel>()
                .FromSqlRaw(sqlCommand, planIdParam, portalIdParam, baseYearParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpSamtAllPlanTopicTimeL2ReturnModel>> SpSamtAllPlanTopicTimeL2Async(int? planId, int? portalId, int? baseYear)
        {
            var planIdParam = new SqlParameter { ParameterName = "@PlanID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = planId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!planId.HasValue)
                planIdParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_Samt_AllPlanTopicTimeL2] @PlanID, @PortalID, @BaseYear";
            var procResultData = await Set<SpSamtAllPlanTopicTimeL2ReturnModel>()
                .FromSqlRaw(sqlCommand, planIdParam, portalIdParam, baseYearParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpSamtAllPortalsTimeFailReturnModel> SpSamtAllPortalsTimeFail(int? baseYear, int? portalId, int? topicId)
        {
            int procResult;
            return SpSamtAllPortalsTimeFail(baseYear, portalId, topicId, out procResult);
        }

        public List<SpSamtAllPortalsTimeFailReturnModel> SpSamtAllPortalsTimeFail(int? baseYear, int? portalId, int? topicId, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var topicIdParam = new SqlParameter { ParameterName = "@TopicID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = topicId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!topicId.HasValue)
                topicIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_Samt_AllPortalsTime_Fail] @BaseYear, @PortalID, @TopicID";
            var procResultData = Set<SpSamtAllPortalsTimeFailReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, topicIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpSamtAllPortalsTimeFailReturnModel>> SpSamtAllPortalsTimeFailAsync(int? baseYear, int? portalId, int? topicId)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@PortalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var topicIdParam = new SqlParameter { ParameterName = "@TopicID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = topicId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!topicId.HasValue)
                topicIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_Samt_AllPortalsTime_Fail] @BaseYear, @PortalID, @TopicID";
            var procResultData = await Set<SpSamtAllPortalsTimeFailReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, topicIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpSamtFetchData()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[SP_SAMT_FetchData] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // SpSamtFetchDataAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpSamtPortalPlanTopicReturnModel> SpSamtPortalPlanTopic(int? planId, int? baseYear)
        {
            int procResult;
            return SpSamtPortalPlanTopic(planId, baseYear, out procResult);
        }

        public List<SpSamtPortalPlanTopicReturnModel> SpSamtPortalPlanTopic(int? planId, int? baseYear, out int procResult)
        {
            var planIdParam = new SqlParameter { ParameterName = "@PlanID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = planId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!planId.HasValue)
                planIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_Samt_PortalPlanTopic] @PlanID, @BaseYear";
            var procResultData = Set<SpSamtPortalPlanTopicReturnModel>()
                .FromSqlRaw(sqlCommand, planIdParam, baseYearParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpSamtPortalPlanTopicReturnModel>> SpSamtPortalPlanTopicAsync(int? planId, int? baseYear)
        {
            var planIdParam = new SqlParameter { ParameterName = "@PlanID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = planId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!planId.HasValue)
                planIdParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_Samt_PortalPlanTopic] @PlanID, @BaseYear";
            var procResultData = await Set<SpSamtPortalPlanTopicReturnModel>()
                .FromSqlRaw(sqlCommand, planIdParam, baseYearParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpSamtRunTimeChanelsReturnModel> SpSamtRunTimeChanels(int? objectId, int? isActive, int? baseYear)
        {
            int procResult;
            return SpSamtRunTimeChanels(objectId, isActive, baseYear, out procResult);
        }

        public List<SpSamtRunTimeChanelsReturnModel> SpSamtRunTimeChanels(int? objectId, int? isActive, int? baseYear, out int procResult)
        {
            var objectIdParam = new SqlParameter { ParameterName = "@ObjectID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = objectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!objectId.HasValue)
                objectIdParam.Value = DBNull.Value;

            var isActiveParam = new SqlParameter { ParameterName = "@IsActive", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isActive.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isActive.HasValue)
                isActiveParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SP_Samt_RunTimeChanels] @ObjectID, @IsActive, @BaseYear";
            var procResultData = Set<SpSamtRunTimeChanelsReturnModel>()
                .FromSqlRaw(sqlCommand, objectIdParam, isActiveParam, baseYearParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpSamtRunTimeChanelsReturnModel>> SpSamtRunTimeChanelsAsync(int? objectId, int? isActive, int? baseYear)
        {
            var objectIdParam = new SqlParameter { ParameterName = "@ObjectID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = objectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!objectId.HasValue)
                objectIdParam.Value = DBNull.Value;

            var isActiveParam = new SqlParameter { ParameterName = "@IsActive", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isActive.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isActive.HasValue)
                isActiveParam.Value = DBNull.Value;

            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[SP_Samt_RunTimeChanels] @ObjectID, @IsActive, @BaseYear";
            var procResultData = await Set<SpSamtRunTimeChanelsReturnModel>()
                .FromSqlRaw(sqlCommand, objectIdParam, isActiveParam, baseYearParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpSearchConductorReturnModel> SpSearchConductor(string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, int? orderbyWhat)
        {
            int procResult;
            return SpSearchConductor(progName, fromDate, toDate, simaUserChId, chGroupId, orderbyWhat, out procResult);
        }

        public List<SpSearchConductorReturnModel> SpSearchConductor(string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, int? orderbyWhat, out int procResult)
        {
            var progNameParam = new SqlParameter { ParameterName = "@progName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progName, Size = 50 };
            if (progNameParam.Value == null)
                progNameParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var simaUserChIdParam = new SqlParameter { ParameterName = "@simaUserChID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = simaUserChId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!simaUserChId.HasValue)
                simaUserChIdParam.Value = DBNull.Value;

            var chGroupIdParam = new SqlParameter { ParameterName = "@chGroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = chGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!chGroupId.HasValue)
                chGroupIdParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@orderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_searchConductor] @progName, @fromDate, @toDate, @simaUserChID, @chGroupID, @orderbyWhat";
            var procResultData = Set<SpSearchConductorReturnModel>()
                .FromSqlRaw(sqlCommand, progNameParam, fromDateParam, toDateParam, simaUserChIdParam, chGroupIdParam, orderbyWhatParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpSearchConductorReturnModel>> SpSearchConductorAsync(string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, int? orderbyWhat)
        {
            var progNameParam = new SqlParameter { ParameterName = "@progName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progName, Size = 50 };
            if (progNameParam.Value == null)
                progNameParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var simaUserChIdParam = new SqlParameter { ParameterName = "@simaUserChID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = simaUserChId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!simaUserChId.HasValue)
                simaUserChIdParam.Value = DBNull.Value;

            var chGroupIdParam = new SqlParameter { ParameterName = "@chGroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = chGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!chGroupId.HasValue)
                chGroupIdParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@orderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_searchConductor] @progName, @fromDate, @toDate, @simaUserChID, @chGroupID, @orderbyWhat";
            var procResultData = await Set<SpSearchConductorReturnModel>()
                .FromSqlRaw(sqlCommand, progNameParam, fromDateParam, toDateParam, simaUserChIdParam, chGroupIdParam, orderbyWhatParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpSearchRegieConductorReturnModel> SpSearchRegieConductor(string clipArtSubject, string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, bool? isBroadcast, int? orderbyWhat, int? justNotRepeats, int? searchType, int? isLive, string tapeNumber, string estimateNumber)
        {
            int procResult;
            return SpSearchRegieConductor(clipArtSubject, progName, fromDate, toDate, simaUserChId, chGroupId, isBroadcast, orderbyWhat, justNotRepeats, searchType, isLive, tapeNumber, estimateNumber, out procResult);
        }

        public List<SpSearchRegieConductorReturnModel> SpSearchRegieConductor(string clipArtSubject, string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, bool? isBroadcast, int? orderbyWhat, int? justNotRepeats, int? searchType, int? isLive, string tapeNumber, string estimateNumber, out int procResult)
        {
            var clipArtSubjectParam = new SqlParameter { ParameterName = "@ClipArtSubject", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = clipArtSubject, Size = 1000 };
            if (clipArtSubjectParam.Value == null)
                clipArtSubjectParam.Value = DBNull.Value;

            var progNameParam = new SqlParameter { ParameterName = "@progName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progName, Size = 50 };
            if (progNameParam.Value == null)
                progNameParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var simaUserChIdParam = new SqlParameter { ParameterName = "@simaUserChID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = simaUserChId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!simaUserChId.HasValue)
                simaUserChIdParam.Value = DBNull.Value;

            var chGroupIdParam = new SqlParameter { ParameterName = "@chGroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = chGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!chGroupId.HasValue)
                chGroupIdParam.Value = DBNull.Value;

            var isBroadcastParam = new SqlParameter { ParameterName = "@isBroadcast", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isBroadcast.GetValueOrDefault() };
            if (!isBroadcast.HasValue)
                isBroadcastParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@orderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            var justNotRepeatsParam = new SqlParameter { ParameterName = "@JustNotRepeats", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = justNotRepeats.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!justNotRepeats.HasValue)
                justNotRepeatsParam.Value = DBNull.Value;

            var searchTypeParam = new SqlParameter { ParameterName = "@searchType", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = searchType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!searchType.HasValue)
                searchTypeParam.Value = DBNull.Value;

            var isLiveParam = new SqlParameter { ParameterName = "@isLive", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isLive.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isLive.HasValue)
                isLiveParam.Value = DBNull.Value;

            var tapeNumberParam = new SqlParameter { ParameterName = "@tapeNumber", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tapeNumber, Size = 1000 };
            if (tapeNumberParam.Value == null)
                tapeNumberParam.Value = DBNull.Value;

            var estimateNumberParam = new SqlParameter { ParameterName = "@estimateNumber", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNumber, Size = 30 };
            if (estimateNumberParam.Value == null)
                estimateNumberParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_searchRegieConductor] @ClipArtSubject, @progName, @fromDate, @toDate, @simaUserChID, @chGroupID, @isBroadcast, @orderbyWhat, @JustNotRepeats, @searchType, @isLive, @tapeNumber, @estimateNumber";
            var procResultData = Set<SpSearchRegieConductorReturnModel>()
                .FromSqlRaw(sqlCommand, clipArtSubjectParam, progNameParam, fromDateParam, toDateParam, simaUserChIdParam, chGroupIdParam, isBroadcastParam, orderbyWhatParam, justNotRepeatsParam, searchTypeParam, isLiveParam, tapeNumberParam, estimateNumberParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpSearchRegieConductorReturnModel>> SpSearchRegieConductorAsync(string clipArtSubject, string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, bool? isBroadcast, int? orderbyWhat, int? justNotRepeats, int? searchType, int? isLive, string tapeNumber, string estimateNumber)
        {
            var clipArtSubjectParam = new SqlParameter { ParameterName = "@ClipArtSubject", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = clipArtSubject, Size = 1000 };
            if (clipArtSubjectParam.Value == null)
                clipArtSubjectParam.Value = DBNull.Value;

            var progNameParam = new SqlParameter { ParameterName = "@progName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progName, Size = 50 };
            if (progNameParam.Value == null)
                progNameParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var simaUserChIdParam = new SqlParameter { ParameterName = "@simaUserChID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = simaUserChId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!simaUserChId.HasValue)
                simaUserChIdParam.Value = DBNull.Value;

            var chGroupIdParam = new SqlParameter { ParameterName = "@chGroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = chGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!chGroupId.HasValue)
                chGroupIdParam.Value = DBNull.Value;

            var isBroadcastParam = new SqlParameter { ParameterName = "@isBroadcast", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isBroadcast.GetValueOrDefault() };
            if (!isBroadcast.HasValue)
                isBroadcastParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@orderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            var justNotRepeatsParam = new SqlParameter { ParameterName = "@JustNotRepeats", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = justNotRepeats.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!justNotRepeats.HasValue)
                justNotRepeatsParam.Value = DBNull.Value;

            var searchTypeParam = new SqlParameter { ParameterName = "@searchType", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = searchType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!searchType.HasValue)
                searchTypeParam.Value = DBNull.Value;

            var isLiveParam = new SqlParameter { ParameterName = "@isLive", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = isLive.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!isLive.HasValue)
                isLiveParam.Value = DBNull.Value;

            var tapeNumberParam = new SqlParameter { ParameterName = "@tapeNumber", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = tapeNumber, Size = 1000 };
            if (tapeNumberParam.Value == null)
                tapeNumberParam.Value = DBNull.Value;

            var estimateNumberParam = new SqlParameter { ParameterName = "@estimateNumber", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNumber, Size = 30 };
            if (estimateNumberParam.Value == null)
                estimateNumberParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_searchRegieConductor] @ClipArtSubject, @progName, @fromDate, @toDate, @simaUserChID, @chGroupID, @isBroadcast, @orderbyWhat, @JustNotRepeats, @searchType, @isLive, @tapeNumber, @estimateNumber";
            var procResultData = await Set<SpSearchRegieConductorReturnModel>()
                .FromSqlRaw(sqlCommand, clipArtSubjectParam, progNameParam, fromDateParam, toDateParam, simaUserChIdParam, chGroupIdParam, isBroadcastParam, orderbyWhatParam, justNotRepeatsParam, searchTypeParam, isLiveParam, tapeNumberParam, estimateNumberParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpSearchRegieConductorBySpecificVersionReturnModel> SpSearchRegieConductorBySpecificVersion(string broadcastDate, int? simaUserChId, int? vNum, bool? isClipArt)
        {
            int procResult;
            return SpSearchRegieConductorBySpecificVersion(broadcastDate, simaUserChId, vNum, isClipArt, out procResult);
        }

        public List<SpSearchRegieConductorBySpecificVersionReturnModel> SpSearchRegieConductorBySpecificVersion(string broadcastDate, int? simaUserChId, int? vNum, bool? isClipArt, out int procResult)
        {
            var broadcastDateParam = new SqlParameter { ParameterName = "@broadcastDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = broadcastDate, Size = 10 };
            if (broadcastDateParam.Value == null)
                broadcastDateParam.Value = DBNull.Value;

            var simaUserChIdParam = new SqlParameter { ParameterName = "@simaUserChID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = simaUserChId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!simaUserChId.HasValue)
                simaUserChIdParam.Value = DBNull.Value;

            var vNumParam = new SqlParameter { ParameterName = "@vNum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = vNum.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!vNum.HasValue)
                vNumParam.Value = DBNull.Value;

            var isClipArtParam = new SqlParameter { ParameterName = "@isClipArt", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isClipArt.GetValueOrDefault() };
            if (!isClipArt.HasValue)
                isClipArtParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_searchRegieConductorBySpecificVersion] @broadcastDate, @simaUserChID, @vNum, @isClipArt";
            var procResultData = Set<SpSearchRegieConductorBySpecificVersionReturnModel>()
                .FromSqlRaw(sqlCommand, broadcastDateParam, simaUserChIdParam, vNumParam, isClipArtParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpSearchRegieConductorBySpecificVersionReturnModel>> SpSearchRegieConductorBySpecificVersionAsync(string broadcastDate, int? simaUserChId, int? vNum, bool? isClipArt)
        {
            var broadcastDateParam = new SqlParameter { ParameterName = "@broadcastDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = broadcastDate, Size = 10 };
            if (broadcastDateParam.Value == null)
                broadcastDateParam.Value = DBNull.Value;

            var simaUserChIdParam = new SqlParameter { ParameterName = "@simaUserChID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = simaUserChId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!simaUserChId.HasValue)
                simaUserChIdParam.Value = DBNull.Value;

            var vNumParam = new SqlParameter { ParameterName = "@vNum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = vNum.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!vNum.HasValue)
                vNumParam.Value = DBNull.Value;

            var isClipArtParam = new SqlParameter { ParameterName = "@isClipArt", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isClipArt.GetValueOrDefault() };
            if (!isClipArt.HasValue)
                isClipArtParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_searchRegieConductorBySpecificVersion] @broadcastDate, @simaUserChID, @vNum, @isClipArt";
            var procResultData = await Set<SpSearchRegieConductorBySpecificVersionReturnModel>()
                .FromSqlRaw(sqlCommand, broadcastDateParam, simaUserChIdParam, vNumParam, isClipArtParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpShiftGetShiftByPortalIdReturnModel> SpShiftGetShiftByPortalId(int? portalId)
        {
            int procResult;
            return SpShiftGetShiftByPortalId(portalId, out procResult);
        }

        public List<SpShiftGetShiftByPortalIdReturnModel> SpShiftGetShiftByPortalId(int? portalId, out int procResult)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SP_ShiftGetShiftByPortalId] @portalId";
            var procResultData = Set<SpShiftGetShiftByPortalIdReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpShiftGetShiftByPortalIdReturnModel>> SpShiftGetShiftByPortalIdAsync(int? portalId)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[SP_ShiftGetShiftByPortalId] @portalId";
            var procResultData = await Set<SpShiftGetShiftByPortalIdReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpSimaRightSideGauges(int? baseYear)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_SimaRightSideGauges] @BaseYear", baseYearParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpSimaRightSideGaugesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpSubjectPercent(int? baseYear, string channelIds)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@BaseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var channelIdsParam = new SqlParameter { ParameterName = "@channelIds", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = channelIds, Size = 1500 };
            if (channelIdsParam.Value == null)
                channelIdsParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_SubjectPercent] @BaseYear, @channelIds", baseYearParam, channelIdsParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpSubjectPercentAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        // public SptablesReturnModel Sptables() Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<SptablesReturnModel> SptablesAsync() Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<SpTotalProductionProgressReturnModel> SpTotalProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? totalProgressFrom, int? totalProgressTo)
        {
            int procResult;
            return SpTotalProductionProgress(baseYear, portalId, fromDate, toDate, groupId, progname, estimateNo, gradeId, structureId, structureTypeId, justDeleted, writingProgressFrom, writingProgressTo, beforeProgressFrom, beforeProgressTo, durringProgressFrom, durringProgressTo, afterProgressFrom, afterProgressTo, totalProgressFrom, totalProgressTo, out procResult);
        }

        public List<SpTotalProductionProgressReturnModel> SpTotalProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? totalProgressFrom, int? totalProgressTo, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var beforeProgressFromParam = new SqlParameter { ParameterName = "@BeforeProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressFrom.HasValue)
                beforeProgressFromParam.Value = DBNull.Value;

            var beforeProgressToParam = new SqlParameter { ParameterName = "@BeforeProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressTo.HasValue)
                beforeProgressToParam.Value = DBNull.Value;

            var durringProgressFromParam = new SqlParameter { ParameterName = "@DurringProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressFrom.HasValue)
                durringProgressFromParam.Value = DBNull.Value;

            var durringProgressToParam = new SqlParameter { ParameterName = "@DurringProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressTo.HasValue)
                durringProgressToParam.Value = DBNull.Value;

            var afterProgressFromParam = new SqlParameter { ParameterName = "@AfterProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressFrom.HasValue)
                afterProgressFromParam.Value = DBNull.Value;

            var afterProgressToParam = new SqlParameter { ParameterName = "@AfterProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressTo.HasValue)
                afterProgressToParam.Value = DBNull.Value;

            var totalProgressFromParam = new SqlParameter { ParameterName = "@TotalProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = totalProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!totalProgressFrom.HasValue)
                totalProgressFromParam.Value = DBNull.Value;

            var totalProgressToParam = new SqlParameter { ParameterName = "@TotalProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = totalProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!totalProgressTo.HasValue)
                totalProgressToParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_TotalProductionProgress] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @WritingProgressFrom, @WritingProgressTo, @BeforeProgressFrom, @BeforeProgressTo, @DurringProgressFrom, @DurringProgressTo, @AfterProgressFrom, @AfterProgressTo, @TotalProgressFrom, @TotalProgressTo";
            var procResultData = Set<SpTotalProductionProgressReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, writingProgressFromParam, writingProgressToParam, beforeProgressFromParam, beforeProgressToParam, durringProgressFromParam, durringProgressToParam, afterProgressFromParam, afterProgressToParam, totalProgressFromParam, totalProgressToParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpTotalProductionProgressReturnModel>> SpTotalProductionProgressAsync(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? totalProgressFrom, int? totalProgressTo)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var beforeProgressFromParam = new SqlParameter { ParameterName = "@BeforeProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressFrom.HasValue)
                beforeProgressFromParam.Value = DBNull.Value;

            var beforeProgressToParam = new SqlParameter { ParameterName = "@BeforeProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressTo.HasValue)
                beforeProgressToParam.Value = DBNull.Value;

            var durringProgressFromParam = new SqlParameter { ParameterName = "@DurringProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressFrom.HasValue)
                durringProgressFromParam.Value = DBNull.Value;

            var durringProgressToParam = new SqlParameter { ParameterName = "@DurringProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressTo.HasValue)
                durringProgressToParam.Value = DBNull.Value;

            var afterProgressFromParam = new SqlParameter { ParameterName = "@AfterProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressFrom.HasValue)
                afterProgressFromParam.Value = DBNull.Value;

            var afterProgressToParam = new SqlParameter { ParameterName = "@AfterProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressTo.HasValue)
                afterProgressToParam.Value = DBNull.Value;

            var totalProgressFromParam = new SqlParameter { ParameterName = "@TotalProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = totalProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!totalProgressFrom.HasValue)
                totalProgressFromParam.Value = DBNull.Value;

            var totalProgressToParam = new SqlParameter { ParameterName = "@TotalProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = totalProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!totalProgressTo.HasValue)
                totalProgressToParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_TotalProductionProgress] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @WritingProgressFrom, @WritingProgressTo, @BeforeProgressFrom, @BeforeProgressTo, @DurringProgressFrom, @DurringProgressTo, @AfterProgressFrom, @AfterProgressTo, @TotalProgressFrom, @TotalProgressTo";
            var procResultData = await Set<SpTotalProductionProgressReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, writingProgressFromParam, writingProgressToParam, beforeProgressFromParam, beforeProgressToParam, durringProgressFromParam, durringProgressToParam, afterProgressFromParam, afterProgressToParam, totalProgressFromParam, totalProgressToParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpTotalProductionProgress2(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? totalProgressFrom, int? totalProgressTo, int? keyProductionTotal, int? keyAfterProductionTotal, int? keyBeforeProductionTotal, int? keyWritingTotal, string keyProgrammingPart, bool? allRecord, int? pageNumber, int? rowsPerPage, out int? totalRowsCount)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var beforeProgressFromParam = new SqlParameter { ParameterName = "@BeforeProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressFrom.HasValue)
                beforeProgressFromParam.Value = DBNull.Value;

            var beforeProgressToParam = new SqlParameter { ParameterName = "@BeforeProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = beforeProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!beforeProgressTo.HasValue)
                beforeProgressToParam.Value = DBNull.Value;

            var durringProgressFromParam = new SqlParameter { ParameterName = "@DurringProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressFrom.HasValue)
                durringProgressFromParam.Value = DBNull.Value;

            var durringProgressToParam = new SqlParameter { ParameterName = "@DurringProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = durringProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!durringProgressTo.HasValue)
                durringProgressToParam.Value = DBNull.Value;

            var afterProgressFromParam = new SqlParameter { ParameterName = "@AfterProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressFrom.HasValue)
                afterProgressFromParam.Value = DBNull.Value;

            var afterProgressToParam = new SqlParameter { ParameterName = "@AfterProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = afterProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!afterProgressTo.HasValue)
                afterProgressToParam.Value = DBNull.Value;

            var totalProgressFromParam = new SqlParameter { ParameterName = "@TotalProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = totalProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!totalProgressFrom.HasValue)
                totalProgressFromParam.Value = DBNull.Value;

            var totalProgressToParam = new SqlParameter { ParameterName = "@TotalProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = totalProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!totalProgressTo.HasValue)
                totalProgressToParam.Value = DBNull.Value;

            var keyProductionTotalParam = new SqlParameter { ParameterName = "@Key_Production_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyProductionTotal.HasValue)
                keyProductionTotalParam.Value = DBNull.Value;

            var keyAfterProductionTotalParam = new SqlParameter { ParameterName = "@Key_AfterProduction_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyAfterProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyAfterProductionTotal.HasValue)
                keyAfterProductionTotalParam.Value = DBNull.Value;

            var keyBeforeProductionTotalParam = new SqlParameter { ParameterName = "@Key_BeforeProduction_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyBeforeProductionTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyBeforeProductionTotal.HasValue)
                keyBeforeProductionTotalParam.Value = DBNull.Value;

            var keyWritingTotalParam = new SqlParameter { ParameterName = "@Key_Writing_Total", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = keyWritingTotal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!keyWritingTotal.HasValue)
                keyWritingTotalParam.Value = DBNull.Value;

            var keyProgrammingPartParam = new SqlParameter { ParameterName = "@Key_Programming_Part", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = keyProgrammingPart, Size = 1000 };
            if (keyProgrammingPartParam.Value == null)
                keyProgrammingPartParam.Value = DBNull.Value;

            var allRecordParam = new SqlParameter { ParameterName = "@AllRecord", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = allRecord.GetValueOrDefault() };
            if (!allRecord.HasValue)
                allRecordParam.Value = DBNull.Value;

            var pageNumberParam = new SqlParameter { ParameterName = "@PageNumber", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = DBNull.Value;

            var rowsPerPageParam = new SqlParameter { ParameterName = "@RowsPerPage", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = rowsPerPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowsPerPage.HasValue)
                rowsPerPageParam.Value = DBNull.Value;

            var totalRowsCountParam = new SqlParameter { ParameterName = "@TotalRowsCount", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_TotalProductionProgress_2] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @WritingProgressFrom, @WritingProgressTo, @BeforeProgressFrom, @BeforeProgressTo, @DurringProgressFrom, @DurringProgressTo, @AfterProgressFrom, @AfterProgressTo, @TotalProgressFrom, @TotalProgressTo, @Key_Production_Total, @Key_AfterProduction_Total, @Key_BeforeProduction_Total, @Key_Writing_Total, @Key_Programming_Part, @AllRecord, @PageNumber, @RowsPerPage, @TotalRowsCount OUTPUT", baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, writingProgressFromParam, writingProgressToParam, beforeProgressFromParam, beforeProgressToParam, durringProgressFromParam, durringProgressToParam, afterProgressFromParam, afterProgressToParam, totalProgressFromParam, totalProgressToParam, keyProductionTotalParam, keyAfterProductionTotalParam, keyBeforeProductionTotalParam, keyWritingTotalParam, keyProgrammingPartParam, allRecordParam, pageNumberParam, rowsPerPageParam, totalRowsCountParam, procResultParam);

            if (IsSqlParameterNull(totalRowsCountParam))
                totalRowsCount = null;
            else
                totalRowsCount = (int) totalRowsCountParam.Value;

            return (int)procResultParam.Value;
        }

        // SpTotalProductionProgress2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpUserHitReportReturnModel> SpUserHitReport(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit, int? orderbyWhat)
        {
            int procResult;
            return SpUserHitReport(portalId, userId, userGroupId, fromdate, todate, hasVisit, orderbyWhat, out procResult);
        }

        public List<SpUserHitReportReturnModel> SpUserHitReport(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit, int? orderbyWhat, out int procResult)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@userId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var userGroupIdParam = new SqlParameter { ParameterName = "@userGroupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userGroupId.HasValue)
                userGroupIdParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var hasVisitParam = new SqlParameter { ParameterName = "@hasVisit", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasVisit.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasVisit.HasValue)
                hasVisitParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@OrderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_UserHitReport] @portalID, @userId, @userGroupId, @fromdate, @todate, @hasVisit, @OrderbyWhat";
            var procResultData = Set<SpUserHitReportReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, userIdParam, userGroupIdParam, fromdateParam, todateParam, hasVisitParam, orderbyWhatParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpUserHitReportReturnModel>> SpUserHitReportAsync(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit, int? orderbyWhat)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@userId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var userGroupIdParam = new SqlParameter { ParameterName = "@userGroupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userGroupId.HasValue)
                userGroupIdParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var hasVisitParam = new SqlParameter { ParameterName = "@hasVisit", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasVisit.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasVisit.HasValue)
                hasVisitParam.Value = DBNull.Value;

            var orderbyWhatParam = new SqlParameter { ParameterName = "@OrderbyWhat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = orderbyWhat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderbyWhat.HasValue)
                orderbyWhatParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_UserHitReport] @portalID, @userId, @userGroupId, @fromdate, @todate, @hasVisit, @OrderbyWhat";
            var procResultData = await Set<SpUserHitReportReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, userIdParam, userGroupIdParam, fromdateParam, todateParam, hasVisitParam, orderbyWhatParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpUserHitReport2ReturnModel> SpUserHitReport2(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit)
        {
            int procResult;
            return SpUserHitReport2(portalId, userId, userGroupId, fromdate, todate, hasVisit, out procResult);
        }

        public List<SpUserHitReport2ReturnModel> SpUserHitReport2(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit, out int procResult)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@userId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var userGroupIdParam = new SqlParameter { ParameterName = "@userGroupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userGroupId.HasValue)
                userGroupIdParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var hasVisitParam = new SqlParameter { ParameterName = "@hasVisit", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasVisit.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasVisit.HasValue)
                hasVisitParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_UserHitReport2] @portalID, @userId, @userGroupId, @fromdate, @todate, @hasVisit";
            var procResultData = Set<SpUserHitReport2ReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, userIdParam, userGroupIdParam, fromdateParam, todateParam, hasVisitParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpUserHitReport2ReturnModel>> SpUserHitReport2Async(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit)
        {
            var portalIdParam = new SqlParameter { ParameterName = "@portalID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@userId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var userGroupIdParam = new SqlParameter { ParameterName = "@userGroupId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userGroupId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userGroupId.HasValue)
                userGroupIdParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = fromdate.GetValueOrDefault() };
            if (!fromdate.HasValue)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = todate.GetValueOrDefault() };
            if (!todate.HasValue)
                todateParam.Value = DBNull.Value;

            var hasVisitParam = new SqlParameter { ParameterName = "@hasVisit", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = hasVisit.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!hasVisit.HasValue)
                hasVisitParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_UserHitReport2] @portalID, @userId, @userGroupId, @fromdate, @todate, @hasVisit";
            var procResultData = await Set<SpUserHitReport2ReturnModel>()
                .FromSqlRaw(sqlCommand, portalIdParam, userIdParam, userGroupIdParam, fromdateParam, todateParam, hasVisitParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpUsersHitReportReturnModel> SpUsersHitReport()
        {
            int procResult;
            return SpUsersHitReport(out procResult);
        }

        public List<SpUsersHitReportReturnModel> SpUsersHitReport(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_UsersHitReport]";
            var procResultData = Set<SpUsersHitReportReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpUsersHitReportReturnModel>> SpUsersHitReportAsync()
        {
            const string sqlCommand = "EXEC [dbo].[sp_UsersHitReport]";
            var procResultData = await Set<SpUsersHitReportReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<SpV2ProductionFlowByDateReturnModel> SpV2ProductionFlowByDate(string portalIDs, string fromdate, string todate)
        {
            int procResult;
            return SpV2ProductionFlowByDate(portalIDs, fromdate, todate, out procResult);
        }

        public List<SpV2ProductionFlowByDateReturnModel> SpV2ProductionFlowByDate(string portalIDs, string fromdate, string todate, out int procResult)
        {
            var portalIDsParam = new SqlParameter { ParameterName = "@portalIDs", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = portalIDs, Size = 1500 };
            if (portalIDsParam.Value == null)
                portalIDsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromdate, Size = 10 };
            if (fromdateParam.Value == null)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = todate, Size = 10 };
            if (todateParam.Value == null)
                todateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_v2_ProductionFlowByDate] @portalIDs, @fromdate, @todate";
            var procResultData = Set<SpV2ProductionFlowByDateReturnModel>()
                .FromSqlRaw(sqlCommand, portalIDsParam, fromdateParam, todateParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpV2ProductionFlowByDateReturnModel>> SpV2ProductionFlowByDateAsync(string portalIDs, string fromdate, string todate)
        {
            var portalIDsParam = new SqlParameter { ParameterName = "@portalIDs", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = portalIDs, Size = 1500 };
            if (portalIDsParam.Value == null)
                portalIDsParam.Value = DBNull.Value;

            var fromdateParam = new SqlParameter { ParameterName = "@fromdate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromdate, Size = 10 };
            if (fromdateParam.Value == null)
                fromdateParam.Value = DBNull.Value;

            var todateParam = new SqlParameter { ParameterName = "@todate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = todate, Size = 10 };
            if (todateParam.Value == null)
                todateParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_v2_ProductionFlowByDate] @portalIDs, @fromdate, @todate";
            var procResultData = await Set<SpV2ProductionFlowByDateReturnModel>()
                .FromSqlRaw(sqlCommand, portalIDsParam, fromdateParam, todateParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpWriteProductionProgressReturnModel> SpWriteProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo)
        {
            int procResult;
            return SpWriteProductionProgress(baseYear, portalId, fromDate, toDate, groupId, progname, estimateNo, gradeId, structureId, structureTypeId, justDeleted, writingProgressFrom, writingProgressTo, out procResult);
        }

        public List<SpWriteProductionProgressReturnModel> SpWriteProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, out int procResult)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_WriteProductionProgress] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @WritingProgressFrom, @WritingProgressTo";
            var procResultData = Set<SpWriteProductionProgressReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, writingProgressFromParam, writingProgressToParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpWriteProductionProgressReturnModel>> SpWriteProductionProgressAsync(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo)
        {
            var baseYearParam = new SqlParameter { ParameterName = "@baseYear", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = baseYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!baseYear.HasValue)
                baseYearParam.Value = DBNull.Value;

            var portalIdParam = new SqlParameter { ParameterName = "@portalId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = portalId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!portalId.HasValue)
                portalIdParam.Value = DBNull.Value;

            var fromDateParam = new SqlParameter { ParameterName = "@fromDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = fromDate, Size = 10 };
            if (fromDateParam.Value == null)
                fromDateParam.Value = DBNull.Value;

            var toDateParam = new SqlParameter { ParameterName = "@toDate", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = toDate, Size = 10 };
            if (toDateParam.Value == null)
                toDateParam.Value = DBNull.Value;

            var groupIdParam = new SqlParameter { ParameterName = "@groupId", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupId, Size = 1500 };
            if (groupIdParam.Value == null)
                groupIdParam.Value = DBNull.Value;

            var prognameParam = new SqlParameter { ParameterName = "@progname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = progname, Size = 50 };
            if (prognameParam.Value == null)
                prognameParam.Value = DBNull.Value;

            var estimateNoParam = new SqlParameter { ParameterName = "@estimateNo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = estimateNo, Size = 12 };
            if (estimateNoParam.Value == null)
                estimateNoParam.Value = DBNull.Value;

            var gradeIdParam = new SqlParameter { ParameterName = "@gradeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = gradeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gradeId.HasValue)
                gradeIdParam.Value = DBNull.Value;

            var structureIdParam = new SqlParameter { ParameterName = "@structureId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureId.HasValue)
                structureIdParam.Value = DBNull.Value;

            var structureTypeIdParam = new SqlParameter { ParameterName = "@structureTypeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = structureTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!structureTypeId.HasValue)
                structureTypeIdParam.Value = DBNull.Value;

            var justDeletedParam = new SqlParameter { ParameterName = "@justDeleted", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = justDeleted.GetValueOrDefault() };
            if (!justDeleted.HasValue)
                justDeletedParam.Value = DBNull.Value;

            var writingProgressFromParam = new SqlParameter { ParameterName = "@WritingProgressFrom", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressFrom.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressFrom.HasValue)
                writingProgressFromParam.Value = DBNull.Value;

            var writingProgressToParam = new SqlParameter { ParameterName = "@WritingProgressTo", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = writingProgressTo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!writingProgressTo.HasValue)
                writingProgressToParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_WriteProductionProgress] @baseYear, @portalId, @fromDate, @toDate, @groupId, @progname, @estimateNo, @gradeId, @structureId, @structureTypeId, @justDeleted, @WritingProgressFrom, @WritingProgressTo";
            var procResultData = await Set<SpWriteProductionProgressReturnModel>()
                .FromSqlRaw(sqlCommand, baseYearParam, portalIdParam, fromDateParam, toDateParam, groupIdParam, prognameParam, estimateNoParam, gradeIdParam, structureIdParam, structureTypeIdParam, justDeletedParam, writingProgressFromParam, writingProgressToParam)
                .ToListAsync();

            return procResultData;
        }

    }
}
// </auto-generated>
