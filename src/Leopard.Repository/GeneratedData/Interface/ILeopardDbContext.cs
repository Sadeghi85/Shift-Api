// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace Leopard.Repository
{
    public partial interface ILeopardDbContext : IDisposable
    {
        DbSet<A> A { get; set; } // a
        DbSet<Advertis> Advertis { get; set; } // Advertises
        DbSet<AdvertiseCategory> AdvertiseCategories { get; set; } // AdvertiseCategories
        DbSet<ApiResource> ApiResources { get; set; } // ApiResources
        DbSet<ApiResourceClaim> ApiResourceClaims { get; set; } // ApiResourceClaims
        DbSet<ApiResourceProperty> ApiResourceProperties { get; set; } // ApiResourceProperties
        DbSet<ApiResourceScope> ApiResourceScopes { get; set; } // ApiResourceScopes
        DbSet<ApiResourceSecret> ApiResourceSecrets { get; set; } // ApiResourceSecrets
        DbSet<ApiScope> ApiScopes { get; set; } // ApiScopes
        DbSet<ApiScopeClaim> ApiScopeClaims { get; set; } // ApiScopeClaims
        DbSet<ApiScopeProperty> ApiScopeProperties { get; set; } // ApiScopeProperties
        DbSet<BaseInfo> BaseInfoes { get; set; } // BaseInfos
        DbSet<BaseInfoCategory> BaseInfoCategories { get; set; } // BaseInfoCategories
        DbSet<BroadcastFrame> BroadcastFrames { get; set; } // BroadcastFrames
        DbSet<BroadcastProgramType> BroadcastProgramTypes { get; set; } // BroadcastProgramTypes
        DbSet<Calendar> Calendars { get; set; } // Calendars
        DbSet<ChannelGroup> ChannelGroups { get; set; } // ChannelGroups
        DbSet<City> Cities { get; set; } // Cities
        DbSet<Client> Clients { get; set; } // Clients
        DbSet<ClientClaim> ClientClaims { get; set; } // ClientClaims
        DbSet<ClientCorsOrigin> ClientCorsOrigins { get; set; } // ClientCorsOrigins
        DbSet<ClientGrantType> ClientGrantTypes { get; set; } // ClientGrantTypes
        DbSet<ClientIdPRestriction> ClientIdPRestrictions { get; set; } // ClientIdPRestrictions
        DbSet<ClientPostLogoutRedirectUri> ClientPostLogoutRedirectUris { get; set; } // ClientPostLogoutRedirectUris
        DbSet<ClientProperty> ClientProperties { get; set; } // ClientProperties
        DbSet<ClientRedirectUri> ClientRedirectUris { get; set; } // ClientRedirectUris
        DbSet<ClientScope> ClientScopes { get; set; } // ClientScopes
        DbSet<ClientSecret> ClientSecrets { get; set; } // ClientSecrets
        DbSet<CondactorChannelProgSubCategory> CondactorChannelProgSubCategories { get; set; } // CondactorChannelProgSubCategory
        DbSet<ConductorAutoFileNumber> ConductorAutoFileNumbers { get; set; } // ConductorAutoFileNumber
        DbSet<ConductorAzanTime> ConductorAzanTimes { get; set; } // ConductorAzanTimes
        DbSet<ConductorBox> ConductorBoxes { get; set; } // ConductorBox
        DbSet<ConductorBoxItem> ConductorBoxItems { get; set; } // ConductorBoxItems
        DbSet<ConductorBoxRequest> ConductorBoxRequests { get; set; } // ConductorBoxRequest
        DbSet<ConductorBoxRequesterUnit> ConductorBoxRequesterUnits { get; set; } // ConductorBoxRequesterUnit
        DbSet<ConductorBoxRequestStatusDefinition> ConductorBoxRequestStatusDefinitions { get; set; } // ConductorBoxRequestStatusDefinition
        DbSet<ConductorBoxTemplate> ConductorBoxTemplates { get; set; } // ConductorBoxTemplates
        DbSet<ConductorBoxType> ConductorBoxTypes { get; set; } // ConductorBoxTypes
        DbSet<ConductorBroadcastCertificate> ConductorBroadcastCertificates { get; set; } // ConductorBroadcastCertificates
        DbSet<ConductorBroadcastLicens> ConductorBroadcastLicens { get; set; } // ConductorBroadcastLicenses
        DbSet<ConductorChangeLog> ConductorChangeLogs { get; set; } // ConductorChangeLogs
        DbSet<ConductorChannelProgCategory> ConductorChannelProgCategories { get; set; } // ConductorChannelProgCategory
        DbSet<ConductorChannelProgram> ConductorChannelPrograms { get; set; } // ConductorChannelPrograms
        DbSet<ConductorChannelProgramAgent> ConductorChannelProgramAgents { get; set; } // ConductorChannelProgramAgents
        DbSet<ConductorChannelProgramAgeRanx> ConductorChannelProgramAgeRanges { get; set; } // ConductorChannelProgramAgeRanges
        DbSet<ConductorChannelProgramApprovalLog> ConductorChannelProgramApprovalLogs { get; set; } // ConductorChannelProgramApprovalLogs
        DbSet<ConductorChannelProgramEvent> ConductorChannelProgramEvents { get; set; } // ConductorChannelProgramEvents
        DbSet<ConductorChannelProgramInfo> ConductorChannelProgramInfoes { get; set; } // ConductorChannelProgramInfo
        DbSet<ConductorChannelProgramInTag> ConductorChannelProgramInTags { get; set; } // ConductorChannelProgramInTags
        DbSet<ConductorChannelProgramSubject> ConductorChannelProgramSubjects { get; set; } // ConductorChannelProgramSubjects
        DbSet<ConductorChannelProgramSupplyType> ConductorChannelProgramSupplyTypes { get; set; } // ConductorChannelProgramSupplyTypes
        DbSet<ConductorChannelProgramTag> ConductorChannelProgramTags { get; set; } // ConductorChannelProgramTags
        DbSet<ConductorDispatchDetail> ConductorDispatchDetails { get; set; } // ConductorDispatchDetails
        DbSet<ConductorItemDispatch> ConductorItemDispatches { get; set; } // ConductorItemDispatch
        DbSet<ConductorItemDispatchAgent> ConductorItemDispatchAgents { get; set; } // ConductorItemDispatchAgents
        DbSet<ConductorItemDispatchEvent> ConductorItemDispatchEvents { get; set; } // ConductorItemDispatchEvents
        DbSet<ConductorItemDispatchLog> ConductorItemDispatchLogs { get; set; } // ConductorItemDispatchLogs
        DbSet<ConductorItemDispatchSubject> ConductorItemDispatchSubjects { get; set; } // ConductorItemDispatchSubjects
        DbSet<ConductorOfogh> ConductorOfoghs { get; set; } // ConductorOfogh
        DbSet<ConductorProgramApproach> ConductorProgramApproaches { get; set; } // ConductorProgramApproachs
        DbSet<ConductorProgramType> ConductorProgramTypes { get; set; } // ConductorProgramTypes
        DbSet<ConductorSendHistory> ConductorSendHistories { get; set; } // ConductorSendHistory
        DbSet<ConductorSubTitle> ConductorSubTitles { get; set; } // ConductorSubTitles
        DbSet<ConductorTable> ConductorTables { get; set; } // ConductorTable
        DbSet<ConductorTablePakhsh> ConductorTablePakhshes { get; set; } // ConductorTablePakhsh
        DbSet<ConductorTaminGroup> ConductorTaminGroups { get; set; } // ConductorTaminGroups
        DbSet<ContentsTabbed> ContentsTabbeds { get; set; } // ContentsTabbed
        DbSet<ContentTabGroup> ContentTabGroups { get; set; } // ContentTabGroups
        DbSet<CorrectionDataSamtHistory> CorrectionDataSamtHistories { get; set; } // CorrectionDataSamtHistory
        DbSet<DateFormat> DateFormats { get; set; } // DateFormats
        DbSet<DeviceCode> DeviceCodes { get; set; } // DeviceCodes
        DbSet<DispatchTypeValue> DispatchTypeValues { get; set; } // DispatchTypeValue
        DbSet<DynamicPage> DynamicPages { get; set; } // DynamicPages
        DbSet<DynamicPageCategory> DynamicPageCategories { get; set; } // DynamicPageCategories
        DbSet<DynamicPageFile> DynamicPageFiles { get; set; } // DynamicPageFiles
        DbSet<EpgNetwork> EpgNetworks { get; set; } // EpgNetworks
        DbSet<FidsSamtRequestLog> FidsSamtRequestLogs { get; set; } // FIDS_SAMT_RequestLogs
        DbSet<FidsSamtRequestLogStatu> FidsSamtRequestLogStatus { get; set; } // FIDS_SAMT_RequestLogStatus
        DbSet<FidsTelavatBuilderProduction> FidsTelavatBuilderProductions { get; set; } // FIDS_TelavatBuilderProductions
        DbSet<FidsTelavatBuilderReview> FidsTelavatBuilderReviews { get; set; } // FIDS_TelavatBuilderReviews
        DbSet<FidsTelavatRequestMedia> FidsTelavatRequestMedias { get; set; } // FIDS_TelavatRequestMedia
        DbSet<FidsTelavatRequestPayment> FidsTelavatRequestPayments { get; set; } // FIDS_TelavatRequestPayments
        DbSet<HijriCalendarAdjustment> HijriCalendarAdjustments { get; set; } // HijriCalendarAdjustments
        DbSet<IdentityResource> IdentityResources { get; set; } // IdentityResources
        DbSet<IdentityResourceClaim> IdentityResourceClaims { get; set; } // IdentityResourceClaims
        DbSet<IdentityResourceProperty> IdentityResourceProperties { get; set; } // IdentityResourceProperties
        DbSet<ImageAlbum> ImageAlbums { get; set; } // ImageAlbums
        DbSet<ImageGallery> ImageGalleries { get; set; } // ImageGalleries
        DbSet<ImagePhoto> ImagePhotoes { get; set; } // ImagePhotos
        DbSet<ImageViewer> ImageViewers { get; set; } // ImageViewer
        DbSet<IndexBefore1400> IndexBefore1400 { get; set; } // IndexBefore1400
        DbSet<InitProgramSubject> InitProgramSubjects { get; set; } // Init_ProgramSubjects
        DbSet<InsideBaseInfo> InsideBaseInfoes { get; set; } // InsideBaseInfo
        DbSet<InternalBaravord> InternalBaravords { get; set; } // InternalBaravords
        DbSet<InternalBaravordLog> InternalBaravordLogs { get; set; } // InternalBaravordLogs
        DbSet<InternalResource> InternalResources { get; set; } // InternalResource
        DbSet<IranHijriCalendarSetting> IranHijriCalendarSettings { get; set; } // IranHijriCalendarSetting
        DbSet<Link> Links { get; set; } // Links
        DbSet<LinkCategory> LinkCategories { get; set; } // LinkCategories
        DbSet<MainMenu> MainMenus { get; set; } // MainMenus
        DbSet<MainQuality> MainQualities { get; set; } // MainQualities
        DbSet<MeEpg> MeEpgs { get; set; } // ME_Epg
        DbSet<MeMedium> MeMediums { get; set; } // ME_Media
        DbSet<Menu> Menus { get; set; } // Menus
        DbSet<MojriEducation> MojriEducations { get; set; } // MojriEducations
        DbSet<MojriFilmography> MojriFilmographies { get; set; } // MojriFilmographys
        DbSet<MojriMedia> MojriMedias { get; set; } // MojriMedias
        DbSet<MojriReprimand> MojriReprimands { get; set; } // MojriReprimands
        DbSet<News> News { get; set; } // News
        DbSet<News2> News2 { get; set; } // News2
        DbSet<NewsAccessUser> NewsAccessUsers { get; set; } // NewsAccessUsers
        DbSet<NewsAgenciesUser> NewsAgenciesUsers { get; set; } // NewsAgenciesUsers
        DbSet<NewsAgency> NewsAgencies { get; set; } // NewsAgencies
        DbSet<NewsComment> NewsComments { get; set; } // NewsComments
        DbSet<NewsFeed> NewsFeeds { get; set; } // NewsFeeds
        DbSet<NewsFile> NewsFiles { get; set; } // NewsFiles
        DbSet<NewsLetterNew> NewsLetterNews { get; set; } // NewsLetterNews
        DbSet<NewsLetterUser> NewsLetterUsers { get; set; } // NewsLetterUsers
        DbSet<NewsLog> NewsLogs { get; set; } // NewsLogs
        DbSet<NewsPriority> NewsPriorities { get; set; } // NewsPriority
        DbSet<NewsRating> NewsRatings { get; set; } // NewsRating
        DbSet<NewsRelated> NewsRelateds { get; set; } // NewsRelated
        DbSet<NewsRss> NewsRsses { get; set; } // NewsRss
        DbSet<NewsTag> NewsTags { get; set; } // NewsTags
        DbSet<OauthLog> OauthLogs { get; set; } // OauthLogs
        DbSet<OldTelavatGrades2> OldTelavatGrades2 { get; set; } // OLD_TelavatGrades2
        DbSet<PageTemplate> PageTemplates { get; set; } // PageTemplates
        DbSet<PakhshChannelLocation> PakhshChannelLocations { get; set; } // Pakhsh_ChannelLocations
        DbSet<PakhshChannelSetting> PakhshChannelSettings { get; set; } // Pakhsh_ChannelSettings
        DbSet<PakhshCooperationType> PakhshCooperationTypes { get; set; } // Pakhsh_CooperationTypes
        DbSet<PakhshEncouragementPunishmentTitle> PakhshEncouragementPunishmentTitles { get; set; } // Pakhsh_EncouragementPunishmentTitles
        DbSet<PakhshEncouragmentUser> PakhshEncouragmentUsers { get; set; } // Pakhsh_EncouragmentUsers
        DbSet<PakhshManageShift> PakhshManageShifts { get; set; } // Pakhsh_ManageShifts
        DbSet<PakhshPerson> PakhshPersons { get; set; } // Pakhsh_Persons
        DbSet<PakhshPersonTitle> PakhshPersonTitles { get; set; } // Pakhsh_PersonTitles
        DbSet<PakhshShiftDetail> PakhshShiftDetails { get; set; } // Pakhsh_ShiftDetails
        DbSet<PakhshShiftSetting> PakhshShiftSettings { get; set; } // Pakhsh_ShiftSettings
        DbSet<PakhshTabletShift> PakhshTabletShifts { get; set; } // Pakhsh_TabletShifts
        DbSet<PakhshTabletShiftLog> PakhshTabletShiftLogs { get; set; } // Pakhsh_TabletShiftLogs
        DbSet<PersistedGrant> PersistedGrants { get; set; } // PersistedGrants
        DbSet<Poll> Polls { get; set; } // Polls
        DbSet<Portal> Portals { get; set; } // Portals
        DbSet<PortalAddress> PortalAddresses { get; set; } // PortalAddresses
        DbSet<ProcessStatu> ProcessStatus { get; set; } // ProcessStatus
        DbSet<ProcessStep> ProcessSteps { get; set; } // ProcessSteps
        DbSet<ProductionTechnicalQuality> ProductionTechnicalQualities { get; set; } // ProductionTechnicalQualities
        DbSet<ProgramAgeRanx> ProgramAgeRanges { get; set; } // ProgramAgeRanges
        DbSet<ProgramAgeWarning> ProgramAgeWarnings { get; set; } // ProgramAgeWarnings
        DbSet<ProgramLicenseItem> ProgramLicenseItems { get; set; } // ProgramLicenseItem
        DbSet<Question> Questions { get; set; } // Questions
        DbSet<RayanCounter> RayanCounters { get; set; } // RayanCounters
        DbSet<RayanCounterOnlineUser> RayanCounterOnlineUsers { get; set; } // RayanCounterOnlineUsers
        DbSet<RayanLinkSelection> RayanLinkSelections { get; set; } // RayanLinkSelections
        DbSet<RayanMenu> RayanMenus { get; set; } // RayanMenus
        DbSet<RayanModule> RayanModules { get; set; } // RayanModules
        DbSet<RayanModuleDefinition> RayanModuleDefinitions { get; set; } // RayanModuleDefinitions
        DbSet<RayanModuleDefinitionLog> RayanModuleDefinitionLogs { get; set; } // RayanModuleDefinitionLogs
        DbSet<RayanModuleHelp> RayanModuleHelps { get; set; } // RayanModuleHelps
        DbSet<RayanModuleProcess> RayanModuleProcesses { get; set; } // RayanModuleProcess
        DbSet<RayanSetting> RayanSettings { get; set; } // RayanSettings
        DbSet<RequestBackup> RequestBackups { get; set; } // requestBackup
        DbSet<RequestBackup2> RequestBackup2 { get; set; } // requestBackup2
        DbSet<RequestLogQuality> RequestLogQualities { get; set; } // RequestLogQualities
        DbSet<SamtAfterProduction> SamtAfterProductions { get; set; } // SAMT_AfterProductions
        DbSet<SamtAgent> SamtAgents { get; set; } // SAMT_Agents
        DbSet<SamtApproach> SamtApproaches { get; set; } // SAMT_Approach
        DbSet<SamtBaravordHistory> SamtBaravordHistories { get; set; } // SAMT_BaravordHistory
        DbSet<SamtBaravordStatu> SamtBaravordStatus { get; set; } // SAMT_BaravordStatus
        DbSet<SamtBaravordStatusCode> SamtBaravordStatusCodes { get; set; } // SAMT_BaravordStatusCodes
        DbSet<SamtBeforeProduction> SamtBeforeProductions { get; set; } // SAMT_BeforeProductions
        DbSet<SamtBeforeProductionAgent> SamtBeforeProductionAgents { get; set; } // SAMT_BeforeProductionAgents
        DbSet<SamtBroadcastDuration> SamtBroadcastDurations { get; set; } // SAMT_BroadcastDuration
        DbSet<SamtBroadcastLicense> SamtBroadcastLicenses { get; set; } // SAMT_BroadcastLicense
        DbSet<SamtBuilderProduction> SamtBuilderProductions { get; set; } // SAMT_BuilderProductions
        DbSet<SamtBuilderReview> SamtBuilderReviews { get; set; } // SAMT_BuilderReviews
        DbSet<SamtCategoryCost> SamtCategoryCosts { get; set; } // SAMT_CategoryCosts
        DbSet<SamtDuringProduction> SamtDuringProductions { get; set; } // SAMT_DuringProductions
        DbSet<SamtEvent> SamtEvents { get; set; } // SAMT_Events
        DbSet<SamtGrade> SamtGrades { get; set; } // SAMT_Grades
        DbSet<SamtGroup> SamtGroups { get; set; } // SAMT_Groups
        DbSet<SamtHistory> SamtHistories { get; set; } // SAMT_History
        DbSet<SamtHistoryAgent> SamtHistoryAgents { get; set; } // SAMT_HistoryAgent
        DbSet<SamtHrCooperationType> SamtHrCooperationTypes { get; set; } // SAMT_HRCooperationType
        DbSet<SamtHrjob> SamtHrjobs { get; set; } // SAMT_HRJOB
        DbSet<SamtMojri> SamtMojris { get; set; } // SAMT_Mojri
        DbSet<SamtMonthlyBudget> SamtMonthlyBudgets { get; set; } // SAMT_MonthlyBudgets
        DbSet<SamtPresentationType> SamtPresentationTypes { get; set; } // SAMT_PresentationType
        DbSet<SamtProductionAdminReport> SamtProductionAdminReports { get; set; } // SAMT_ProductionAdminReports
        DbSet<SamtProductionAgentStep> SamtProductionAgentSteps { get; set; } // SAMT_ProductionAgentSteps
        DbSet<SamtProductionEvent> SamtProductionEvents { get; set; } // SAMT_ProductionEvents
        DbSet<SamtProductionProgress> SamtProductionProgresses { get; set; } // SAMT_ProductionProgresses
        DbSet<SamtProductionSetting> SamtProductionSettings { get; set; } // SAMT_ProductionSettings
        DbSet<SamtProductionSettingField> SamtProductionSettingFields { get; set; } // SAMT_ProductionSettingFields
        DbSet<SamtProductionSettingItem> SamtProductionSettingItems { get; set; } // SAMT_ProductionSettingItems
        DbSet<SamtProductionSettingVersion> SamtProductionSettingVersions { get; set; } // SAMT_ProductionSettingVersions
        DbSet<SamtProgramTransfer> SamtProgramTransfers { get; set; } // SAMT_ProgramTransfers
        DbSet<SamtProposalAgeRange> SamtProposalAgeRanges { get; set; } // SAMT_ProposalAgeRange
        DbSet<SamtProposalDpt> SamtProposalDpts { get; set; } // SAMTProposalDPT
        DbSet<SamtProposalEducation> SamtProposalEducations { get; set; } // SAMT_ProposalEducation
        DbSet<SamtProposalGender> SamtProposalGenders { get; set; } // SAMT_ProposalGender
        DbSet<SamtProposalHistory> SamtProposalHistories { get; set; } // SAMT_ProposalHistory
        DbSet<SamtProposalStatu> SamtProposalStatus { get; set; } // SAMT_ProposalStatus
        DbSet<SamtProposalStatusCode> SamtProposalStatusCodes { get; set; } // SAMT_ProposalStatusCodes
        DbSet<SamtRepeat> SamtRepeats { get; set; } // SAMT_Repeat
        DbSet<SamtRequest> SamtRequests { get; set; } // SAMT_Requests
        DbSet<SamtRequestAgent> SamtRequestAgents { get; set; } // SAMT_RequestAgents
        DbSet<SamtRequestApproach> SamtRequestApproaches { get; set; } // SAMT_RequestApproach
        DbSet<SamtRequestApproachTemp> SamtRequestApproachTemps { get; set; } // SAMT_RequestApproach_Temp
        DbSet<SamtRequestCost> SamtRequestCosts { get; set; } // SAMT_RequestCosts
        DbSet<SamtRequestEvent> SamtRequestEvents { get; set; } // SAMT_RequestEvents
        DbSet<SamtRequestFile> SamtRequestFiles { get; set; } // SAMT_RequestFiles
        DbSet<SamtRequestLog> SamtRequestLogs { get; set; } // SAMT_RequestLogs
        DbSet<SamtRequestLogPlan> SamtRequestLogPlans { get; set; } // SAMT_RequestLogPlans
        DbSet<SamtRequestLogStatu> SamtRequestLogStatus { get; set; } // SAMT_RequestLogStatus
        DbSet<SamtRequestLogSubject> SamtRequestLogSubjects { get; set; } // SAMT_RequestLogSubjects
        DbSet<SamtRequestMedia> SamtRequestMedias { get; set; } // SAMT_RequestMedia
        DbSet<SamtRequestPayment> SamtRequestPayments { get; set; } // SAMT_RequestPayments
        DbSet<SamtRequestProduction> SamtRequestProductions { get; set; } // SAMT_RequestProductions
        DbSet<SamtRequestProductionEvent> SamtRequestProductionEvents { get; set; } // SAMT_RequestProductionEvents
        DbSet<SamtRequestProductionProgress> SamtRequestProductionProgresses { get; set; } // SAMT_RequestProductionProgresses
        DbSet<SamtRequestProductionSubject> SamtRequestProductionSubjects { get; set; } // SAMT_RequestProductionSubject
        DbSet<SamtRequestResourceCost> SamtRequestResourceCosts { get; set; } // SAMT_RequestResourceCost
        DbSet<SamtRequests3> SamtRequests3 { get; set; } // SAMT_Requests_3
        DbSet<SamtRequestSubject> SamtRequestSubjects { get; set; } // SAMT_RequestSubjects
        DbSet<SamtResourceCategory> SamtResourceCategories { get; set; } // SAMT_ResourceCategory
        DbSet<SamtResourceCategoryType> SamtResourceCategoryTypes { get; set; } // SAMT_ResourceCategoryType
        DbSet<SamtResourceType> SamtResourceTypes { get; set; } // SAMT_ResourceTypes
        DbSet<SamtStructure> SamtStructures { get; set; } // SAMT_Structures
        DbSet<SamtStructureType> SamtStructureTypes { get; set; } // SAMT_StructureTypes
        DbSet<SamtSubFormat> SamtSubFormats { get; set; } // SAMT_SubFormat
        DbSet<SamtSubject> SamtSubjects { get; set; } // SAMT_Subjects
        DbSet<SamtSubStructure> SamtSubStructures { get; set; } // SAMT_SubStructures
        DbSet<SamTUser> SamTUsers { get; set; } // SamT_Users
        DbSet<Samtv2PlanTopic> Samtv2PlanTopic { get; set; } // SAMTV2_PlanTopics
        DbSet<Samtv2PlanYearlyCommitment> Samtv2PlanYearlyCommitment { get; set; } // SAMTV2_PlanYearlyCommitment
        DbSet<Samtv2ProgramTopic> Samtv2ProgramTopic { get; set; } // SAMTV2_ProgramTopics
        DbSet<Samtv3Assessment> Samtv3Assessment { get; set; } // SAMTV3_Assessment
        DbSet<Samtv3AssessmentAttachment> Samtv3AssessmentAttachment { get; set; } // SAMTV3_AssessmentAttachments
        DbSet<Samtv3AssessmentStrengthsWeakness> Samtv3AssessmentStrengthsWeakness { get; set; } // SAMTV3_AssessmentStrengthsWeaknesses
        DbSet<Samtv3Attachment> Samtv3Attachment { get; set; } // SAMTV3_Attachments
        DbSet<Samtv3AttachmentType> Samtv3AttachmentType { get; set; } // SAMTV3_AttachmentTypes
        DbSet<Samtv3BroadcastType> Samtv3BroadcastType { get; set; } // SAMTV3_BroadcastTypes
        DbSet<Samtv3ImportanceDegree> Samtv3ImportanceDegree { get; set; } // SAMTV3_ImportanceDegrees
        DbSet<Samtv3Monitoring> Samtv3Monitoring { get; set; } // SAMTV3_Monitoring
        DbSet<Samtv3MonitoringAttachment> Samtv3MonitoringAttachment { get; set; } // SAMTV3_MonitoringAttachments
        DbSet<Samtv3MonitoringKeyword> Samtv3MonitoringKeyword { get; set; } // SAMTV3_MonitoringKeywords
        DbSet<Samtv3MonitoringSubject> Samtv3MonitoringSubject { get; set; } // SAMTV3_MonitoringSubjects
        DbSet<Samtv3StrengthsWeakness> Samtv3StrengthsWeakness { get; set; } // SAMTV3_StrengthsWeaknesses
        DbSet<Samtv3Topic> Samtv3Topic { get; set; } // SAMTV3_Topics
        DbSet<ShabakeOmidClipArt> ShabakeOmidClipArts { get; set; } // shabakeOmidClipArts
        DbSet<ShiftAgentReport> ShiftAgentReports { get; set; } // Shift_AgentReport
        DbSet<ShiftCalculation> ShiftCalculations { get; set; } // Shift_Calculations
        DbSet<ShiftCrewRewardFine> ShiftCrewRewardFines { get; set; } // Shift_CrewRewardFine
        DbSet<ShiftCrewRewardFineReason> ShiftCrewRewardFineReasons { get; set; } // Shift_CrewRewardFineReason
        DbSet<ShiftEmploymentDetail> ShiftEmploymentDetails { get; set; } // Shift_EmploymentDetail
        DbSet<ShiftLocation> ShiftLocations { get; set; } // Shift_Locations
        DbSet<ShiftLog> ShiftLogs { get; set; } // Shift_Log
        DbSet<ShiftPortalLocation> ShiftPortalLocations { get; set; } // Shift_PortalLocations
        DbSet<ShiftRevisionProblem> ShiftRevisionProblems { get; set; } // Shift_RevisionProblem
        DbSet<ShiftShift> ShiftShifts { get; set; } // Shift_Shift
        DbSet<ShiftShiftJobTemplate> ShiftShiftJobTemplates { get; set; } // Shift_ShiftJobTemplate
        DbSet<ShiftShiftTablet> ShiftShiftTablets { get; set; } // Shift_ShiftTablet
        DbSet<ShiftShiftTabletConductor> ShiftShiftTabletConductors { get; set; } // Shift_ShiftTabletConductor
        DbSet<ShiftShiftTabletCrew> ShiftShiftTabletCrews { get; set; } // Shift_ShiftTabletCrew
        DbSet<ShiftShiftTabletCrewReplacement> ShiftShiftTabletCrewReplacements { get; set; } // Shift_ShiftTabletCrewReplacement
        DbSet<ShiftTabletConductorChanx> ShiftTabletConductorChanges { get; set; } // Shift_TabletConductorChanges
        DbSet<ShiftTabletScriptSupervisorDescription> ShiftTabletScriptSupervisorDescriptions { get; set; } // Shift_TabletScriptSupervisorDescription
        DbSet<SimaDataLog> SimaDataLogs { get; set; } // SimaDataLogs
        DbSet<SimaRequest> SimaRequests { get; set; } // SIMA_Requests
        DbSet<SimaTempid> SimaTempids { get; set; } // SIMA_TEMPIDS
        DbSet<SimaTempstatu> SimaTempstatus { get; set; } // SIMA_TEMPSTATUS
        DbSet<State> States { get; set; } // States
        DbSet<Step5Removed> Step5Removed { get; set; } // step5_removed
        DbSet<Step5Removed1> Step5Removed1 { get; set; } // step5_removed1
        DbSet<Step6Removed> Step6Removed { get; set; } // step6_removed
        DbSet<TblEpg> TblEpgs { get; set; } // tblEPG
        DbSet<TelavatAgentPost> TelavatAgentPosts { get; set; } // TelavatAgentPosts
        DbSet<TelavatAgentResourceType> TelavatAgentResourceTypes { get; set; } // TelavatAgentResourceTypes
        DbSet<TelavatBandSound> TelavatBandSounds { get; set; } // TelavatBandSounds
        DbSet<TelavatBudget> TelavatBudgets { get; set; } // TelavatBudgets
        DbSet<TelavatBuilderReviewsItem> TelavatBuilderReviewsItems { get; set; } // TelavatBuilderReviewsItems
        DbSet<TelavatBuilderReviewsTitrage> TelavatBuilderReviewsTitrages { get; set; } // TelavatBuilderReviewsTitrages
        DbSet<TelavatBuilderReviewsWelle> TelavatBuilderReviewsWelles { get; set; } // TelavatBuilderReviewsWelle
        DbSet<TelavatCategoryAge> TelavatCategoryAges { get; set; } // TelavatCategoryAges
        DbSet<TelavatCertification> TelavatCertifications { get; set; } // TelavatCertifications
        DbSet<TelavatContentPriority> TelavatContentPriorities { get; set; } // TelavatContentPriority
        DbSet<TelavatEquipment> TelavatEquipments { get; set; } // TelavatEquipments
        DbSet<TelavatEquipmentCategory> TelavatEquipmentCategories { get; set; } // TelavatEquipmentCategories
        DbSet<TelavatGroupPermission> TelavatGroupPermissions { get; set; } // TelavatGroupPermissions
        DbSet<TelavatGroupPermissionsTemp> TelavatGroupPermissionsTemps { get; set; } // TelavatGroupPermissions_temp
        DbSet<TelavatGroupsBudget> TelavatGroupsBudgets { get; set; } // TelavatGroupsBudgets
        DbSet<TelavatHumanOutNeed> TelavatHumanOutNeeds { get; set; } // TelavatHumanOutNeeds
        DbSet<TelavatInfoProduction> TelavatInfoProductions { get; set; } // TelavatInfoProductions
        DbSet<TelavatPaymentLog> TelavatPaymentLogs { get; set; } // TelavatPaymentLogs
        DbSet<TelavatPaymentLogDetail> TelavatPaymentLogDetails { get; set; } // TelavatPaymentLogDetails
        DbSet<TelavatPlaybackObserverReport> TelavatPlaybackObserverReports { get; set; } // TelavatPlaybackObserverReports
        DbSet<TelavatPlaybackReport> TelavatPlaybackReports { get; set; } // TelavatPlaybackReports
        DbSet<TelavatPlayStatu> TelavatPlayStatus { get; set; } // TelavatPlayStatus
        DbSet<TelavatProductionAgent> TelavatProductionAgents { get; set; } // TelavatProductionAgents
        DbSet<TelavatProductionCondition> TelavatProductionConditions { get; set; } // TelavatProductionConditions
        DbSet<TelavatProductionReport> TelavatProductionReports { get; set; } // TelavatProductionReports
        DbSet<TelavatProgramExpert> TelavatProgramExperts { get; set; } // TelavatProgramExperts
        DbSet<TelavatProgramOccasion> TelavatProgramOccasions { get; set; } // TelavatProgramOccasions
        DbSet<TelavatProgramStatu> TelavatProgramStatus { get; set; } // TelavatProgramStatus
        DbSet<TelavatProgramStepPermission> TelavatProgramStepPermissions { get; set; } // TelavatProgramStepPermissions
        DbSet<TelavatProgramType> TelavatProgramTypes { get; set; } // TelavatProgramTypes
        DbSet<TelavatProgramVideo> TelavatProgramVideos { get; set; } // TelavatProgramVideos
        DbSet<TelavatProgramVideoExpert> TelavatProgramVideoExperts { get; set; } // TelavatProgramVideoExperts
        DbSet<TelavatRequestFileTag> TelavatRequestFileTags { get; set; } // TelavatRequestFileTags
        DbSet<TelavatRequestsCondition> TelavatRequestsConditions { get; set; } // TelavatRequestsConditions
        DbSet<TelavatRequestsStructureType> TelavatRequestsStructureTypes { get; set; } // TelavatRequestsStructureTypes
        DbSet<TelavatRequestStatus> TelavatRequestStatus { get; set; } // TelavatRequestStatuses
        DbSet<TelavatSmsLog> TelavatSmsLogs { get; set; } // TelavatSmsLogs
        DbSet<TelavatSourceType> TelavatSourceTypes { get; set; } // TelavatSourceTypes
        DbSet<TelavatStatus> TelavatStatus { get; set; } // TelavatStatuses
        DbSet<TelavatStatusPermission> TelavatStatusPermissions { get; set; } // TelavatStatusPermissions
        DbSet<TelavatStructure> TelavatStructures { get; set; } // TelavatStructures
        DbSet<TelavatSubsidiarySubject> TelavatSubsidiarySubjects { get; set; } // TelavatSubsidiarySubjects
        DbSet<TelavatSubtitleStatu> TelavatSubtitleStatus { get; set; } // TelavatSubtitleStatus
        DbSet<TelavatSura> TelavatSuras { get; set; } // TelavatSuras
        DbSet<TelavatTopic> TelavatTopics { get; set; } // TelavatTopics
        DbSet<TelavatUnit> TelavatUnits { get; set; } // TelavatUnits
        DbSet<TelavatWorkType> TelavatWorkTypes { get; set; } // TelavatWorkTypes
        DbSet<TempBuilderProductionsDatesCorrected> TempBuilderProductionsDatesCorrecteds { get; set; } // TEMP_BuilderProductions_DatesCorrected
        DbSet<TempStep5RemovedLoGs> TempStep5RemovedLoGs { get; set; } // temp_step5RemovedLOGs
        DbSet<TempStep6RemovedLoGs> TempStep6RemovedLoGs { get; set; } // temp_step6RemovedLOGs
        DbSet<TempStep7Removed> TempStep7Removed { get; set; } // temp_step7Removed
        DbSet<TempStep8Removed> TempStep8Removed { get; set; } // temp_step8Removed
        DbSet<TempStep8RemovedLoGs> TempStep8RemovedLoGs { get; set; } // temp_step8RemovedLOGs
        DbSet<TempTopic> TempTopics { get; set; } // tempTopics
        DbSet<TempVwBaravordSamt> TempVwBaravordSamts { get; set; } // TEMP_vwBaravordSamt
        DbSet<TempVwSamTproposal> TempVwSamTproposals { get; set; } // TEMP_vwSAMTproposal
        DbSet<Theme> Themes { get; set; } // Themes
        DbSet<User> Users { get; set; } // Users
        DbSet<UserPicture> UserPictures { get; set; } // UserPictures
        DbSet<UserProfile> UserProfiles { get; set; } // UserProfiles
        DbSet<UserProfileControl> UserProfileControls { get; set; } // UserProfileControls
        DbSet<UserProfileDetail> UserProfileDetails { get; set; } // UserProfileDetails
        DbSet<UserSecurityQuestion> UserSecurityQuestions { get; set; } // UserSecurityQuestions
        DbSet<UsersLoginHistory> UsersLoginHistories { get; set; } // UsersLoginHistory
        DbSet<UsersPortal> UsersPortals { get; set; } // UsersPortals
        DbSet<UserType> UserTypes { get; set; } // UserTypes
        DbSet<UserTypeGroup> UserTypeGroups { get; set; } // UserTypeGroups
        DbSet<UserTypeGroupRoleMenu> UserTypeGroupRoleMenus { get; set; } // UserTypeGroupRoleMenus
        DbSet<UserTypeGroupRoleModule> UserTypeGroupRoleModules { get; set; } // UserTypeGroupRoleModules
        DbSet<UserUserType> UserUserTypes { get; set; } // UserUserTypes
        DbSet<UserUserTypeGroup> UserUserTypeGroups { get; set; } // UserUserTypeGroups
        DbSet<VAlbum> VAlbums { get; set; } // V_Albums
        DbSet<VDynamicPageGroup> VDynamicPageGroups { get; set; } // V_DynamicPageGroups
        DbSet<VDynamicPageSection> VDynamicPageSections { get; set; } // V_DynamicPageSections
        DbSet<ViewSendFile1> ViewSendFile1 { get; set; } // View_SendFile1
        DbSet<ViewSendFile2> ViewSendFile2 { get; set; } // View_SendFile2
        DbSet<ViewSendFile3> ViewSendFile3 { get; set; } // View_SendFile3
        DbSet<VwInternalBaravordLog> VwInternalBaravordLogs { get; set; } // VW_InternalBaravordLogs
        DbSet<VwMojri> VwMojris { get; set; } // VWMojris
        DbSet<VwPaymentDetailByBaseYear> VwPaymentDetailByBaseYears { get; set; } // vwPaymentDetailByBaseYear
        DbSet<VwRequestProductionProgress> VwRequestProductionProgresses { get; set; } // VW_RequestProductionProgresses
        DbSet<VwSamtBase> VwSamtBases { get; set; } // VW_SAMT_Base
        DbSet<VwSamtBaseLog> VwSamtBaseLogs { get; set; } // VW_SAMT_BaseLog
        DbSet<VwSamtBaseWithParticipation> VwSamtBaseWithParticipations { get; set; } // VW_SAMT_Base_With_Participation
        DbSet<VwSamtBaseYearSima> VwSamtBaseYearSimas { get; set; } // VW_SAMT_BaseYear_SIMA
        DbSet<VwSamtLogSubject> VwSamtLogSubjects { get; set; } // vw_samt_Log_subject
        DbSet<VwSamtProductionLog> VwSamtProductionLogs { get; set; } // VW_SAMT_ProductionLog
        DbSet<VwSamtProductionLog2> VwSamtProductionLog2 { get; set; } // VW_SAMT_ProductionLog2
        DbSet<VwSamtProductionLogByDate> VwSamtProductionLogByDates { get; set; } // VW_SAMT_ProductionLog_byDate
        DbSet<VwSamtProductionReviewLog> VwSamtProductionReviewLogs { get; set; } // VW_SAMT_ProductionReviewLog
        DbSet<VwSamtProductionReviewLog2> VwSamtProductionReviewLog2 { get; set; } // VW_SAMT_ProductionReviewLog2
        DbSet<VwSamtRequestSubject> VwSamtRequestSubjects { get; set; } // VW_SAMT_Request_Subjects
        DbSet<VwSamtSubjectTree> VwSamtSubjectTrees { get; set; } // VW_SAMT_SubjectTree
        DbSet<VwSamtTopicTime> VwSamtTopicTimes { get; set; } // vw_Samt_TopicTime
        DbSet<VwSamtv2PlanYearlyCommitment> VwSamtv2PlanYearlyCommitment { get; set; } // VW_SAMTV2_PlanYearlyCommitment
        DbSet<VwSamtv2ProgramTopic> VwSamtv2ProgramTopic { get; set; } // VW_SAMTV2_ProgramTopics
        DbSet<Widget> Widgets { get; set; } // Widgets
        DbSet<WidgetDefinition> WidgetDefinitions { get; set; } // WidgetDefinitions

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);

        // Stored Procedures
        List<SpBaravordRemindReturnModel> SpBaravordRemind(int? baseYear, int? portalId, string program, string licenseNumber, string estimateNumer);
        List<SpBaravordRemindReturnModel> SpBaravordRemind(int? baseYear, int? portalId, string program, string licenseNumber, string estimateNumer, out int procResult);
        Task<List<SpBaravordRemindReturnModel>> SpBaravordRemindAsync(int? baseYear, int? portalId, string program, string licenseNumber, string estimateNumer);

        List<SpBuilderReviewGradesByChannelGroupReturnModel> SpBuilderReviewGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate);
        List<SpBuilderReviewGradesByChannelGroupReturnModel> SpBuilderReviewGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult);
        Task<List<SpBuilderReviewGradesByChannelGroupReturnModel>> SpBuilderReviewGradesByChannelGroupAsync(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate);

        List<SpByBuilderReviewGradesByChannelGroupReturnModel> SpByBuilderReviewGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate);
        List<SpByBuilderReviewGradesByChannelGroupReturnModel> SpByBuilderReviewGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult);
        Task<List<SpByBuilderReviewGradesByChannelGroupReturnModel>> SpByBuilderReviewGradesByChannelGroupAsync(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate);

        int SpByChannelGradeReport(int? baseYear, int? portalId, string flags);
        // SpByChannelGradeReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByChannelGradeReportNamayeshi(int? baseYear, int? portalId);
        // SpByChannelGradeReportNamayeshiAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByChannelGradeReportNamayeshi2(int? baseYear, int? portalId);
        // SpByChannelGradeReportNamayeshi2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByChannelsApproachReturnModel> SpByChannelsApproach(int? baseYear, string channelIds);
        List<SpByChannelsApproachReturnModel> SpByChannelsApproach(int? baseYear, string channelIds, out int procResult);
        Task<List<SpByChannelsApproachReturnModel>> SpByChannelsApproachAsync(int? baseYear, string channelIds);

        int SpByChannelsApproach2(int? baseYear, string channelIds);
        // SpByChannelsApproach2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByChannelsPerformanceReturnModel> SpByChannelsPerformance(int? baseYear, string channelIds, int? eventId, string flags);
        List<SpByChannelsPerformanceReturnModel> SpByChannelsPerformance(int? baseYear, string channelIds, int? eventId, string flags, out int procResult);
        Task<List<SpByChannelsPerformanceReturnModel>> SpByChannelsPerformanceAsync(int? baseYear, string channelIds, int? eventId, string flags);

        int SpByChannelsPerformance2(int? baseYear, string channelIds, int? eventId, string flags);
        // SpByChannelsPerformance2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByChannelsProgramsStatus(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? startrow, int? pagesize, int? orderbyWhat, int? hasproduction, int? eventId, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, string deliveryDateFrom, string deliveryDateTo, string flags, int? approachId, string productionEndtDate);
        // SpByChannelsProgramsStatusAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByChannelsProgramsStatus2(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? startrow, int? pagesize, int? orderbyWhat, string productionEndtDate);
        // SpByChannelsProgramsStatus2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByChannelsProgramsStatus3(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? startrow, int? pagesize, int? orderbyWhat, int? hasproduction, int? eventId, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, string deliveryDateFrom, string deliveryDateTo, string flags);
        // SpByChannelsProgramsStatus3Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByChannelsProgramsStatusAll(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? hasproduction, int? eventId, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, string deliveryDateFrom, string deliveryDateTo, string flags, int? approachId, string productionEndtDate);
        // SpByChannelsProgramsStatusAllAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByChannelsProgramsStatusAll2(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? hasproduction, int? eventId, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, string deliveryDateFrom, string deliveryDateTo, string flags, string productionEndtDate);
        // SpByChannelsProgramsStatusAll2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByChannelsProgramsStatusCountReturnModel> SpByChannelsProgramsStatusCount(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? hasproduction);
        List<SpByChannelsProgramsStatusCountReturnModel> SpByChannelsProgramsStatusCount(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? hasproduction, out int procResult);
        Task<List<SpByChannelsProgramsStatusCountReturnModel>> SpByChannelsProgramsStatusCountAsync(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? hasproduction);

        List<SpByChannelsProgramsStatusCount2ReturnModel> SpByChannelsProgramsStatusCount2(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2);
        List<SpByChannelsProgramsStatusCount2ReturnModel> SpByChannelsProgramsStatusCount2(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, out int procResult);
        Task<List<SpByChannelsProgramsStatusCount2ReturnModel>> SpByChannelsProgramsStatusCount2Async(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2);

        List<SpByEstimateOutlineReturnModel> SpByEstimateOutline(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? approachId);
        List<SpByEstimateOutlineReturnModel> SpByEstimateOutline(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? approachId, out int procResult);
        Task<List<SpByEstimateOutlineReturnModel>> SpByEstimateOutlineAsync(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? approachId);

        int SpByGeneralVu(int? baseYear, string channelIds, string flags, string structureTypeIDs);
        // SpByGeneralVuAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByGeneralVu2(int? baseYear, string channelIds, string flags, string structureTypeIDs);
        // SpByGeneralVu2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByGeneralVu3(int? baseYear, string channelIds, string flags, string structureTypeIDs);
        // SpByGeneralVu3Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByGetAgentDetailReturnModel> SpByGetAgentDetail(int? agentId, int? baseYear);
        List<SpByGetAgentDetailReturnModel> SpByGetAgentDetail(int? agentId, int? baseYear, out int procResult);
        Task<List<SpByGetAgentDetailReturnModel>> SpByGetAgentDetailAsync(int? agentId, int? baseYear);

        List<SpByGradeByChannelsReturnModel> SpByGradeByChannels(int? baseYear, string channelIds);
        List<SpByGradeByChannelsReturnModel> SpByGradeByChannels(int? baseYear, string channelIds, out int procResult);
        Task<List<SpByGradeByChannelsReturnModel>> SpByGradeByChannelsAsync(int? baseYear, string channelIds);

        int SpByGradeByChannels2(int? baseYear, string channelIds);
        // SpByGradeByChannels2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByGroupPerformancePerGradeReturnModel> SpByGroupPerformancePerGrade(int? baseYear, int? groupId);
        List<SpByGroupPerformancePerGradeReturnModel> SpByGroupPerformancePerGrade(int? baseYear, int? groupId, out int procResult);
        Task<List<SpByGroupPerformancePerGradeReturnModel>> SpByGroupPerformancePerGradeAsync(int? baseYear, int? groupId);

        List<SpByGroupsproductionReturnModel> SpByGroupsproduction(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate);
        List<SpByGroupsproductionReturnModel> SpByGroupsproduction(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult);
        Task<List<SpByGroupsproductionReturnModel>> SpByGroupsproductionAsync(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate);

        int SpByGroupsproduction2(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate);
        // SpByGroupsproduction2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByPaymentDetailByBaseYearReturnModel> SpByPaymentDetailByBaseYear(int? requestId, int? portalId);
        List<SpByPaymentDetailByBaseYearReturnModel> SpByPaymentDetailByBaseYear(int? requestId, int? portalId, out int procResult);
        Task<List<SpByPaymentDetailByBaseYearReturnModel>> SpByPaymentDetailByBaseYearAsync(int? requestId, int? portalId);

        int SpByPaymentReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? hasproduction, int? prodPercentFrom, int? prodPercentto, int? haspayment, int? paymentPercentFrom, int? paymentPercentto, int? orderbywhat, int? approachId);
        // SpByPaymentReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByPerformanceOfGroupByGradeAndChannelIdReturnModel> SpByPerformanceOfGroupByGradeAndChannelId(int? baseYear, int? channelIds, int? gradeId, int? structureId, int? approachId, string flags, int? eventId);
        List<SpByPerformanceOfGroupByGradeAndChannelIdReturnModel> SpByPerformanceOfGroupByGradeAndChannelId(int? baseYear, int? channelIds, int? gradeId, int? structureId, int? approachId, string flags, int? eventId, out int procResult);
        Task<List<SpByPerformanceOfGroupByGradeAndChannelIdReturnModel>> SpByPerformanceOfGroupByGradeAndChannelIdAsync(int? baseYear, int? channelIds, int? gradeId, int? structureId, int? approachId, string flags, int? eventId);

        int SpByPerformanceOfGroupByGradeAndChannelId2(int? baseYear, int? channelIds, int? gradeId, int? structureId, int? approachId, string flags, int? eventId);
        // SpByPerformanceOfGroupByGradeAndChannelId2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByPortalPerformancePerGradeReturnModel> SpByPortalPerformancePerGrade(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, int? eventId);
        List<SpByPortalPerformancePerGradeReturnModel> SpByPortalPerformancePerGrade(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, int? eventId, out int procResult);
        Task<List<SpByPortalPerformancePerGradeReturnModel>> SpByPortalPerformancePerGradeAsync(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, int? eventId);

        int SpByPortalPerformancePerGrade2(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, int? eventId);
        // SpByPortalPerformancePerGrade2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByPortalPerformancePerGradeNamayesheiReturnModel> SpByPortalPerformancePerGradeNamayeshei(int? baseYear, int? portalId, int? structureId, int? approachId, string flags);
        List<SpByPortalPerformancePerGradeNamayesheiReturnModel> SpByPortalPerformancePerGradeNamayeshei(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, out int procResult);
        Task<List<SpByPortalPerformancePerGradeNamayesheiReturnModel>> SpByPortalPerformancePerGradeNamayesheiAsync(int? baseYear, int? portalId, int? structureId, int? approachId, string flags);

        List<SpByPortalPerformancePerGradeNamayeshei2ReturnModel> SpByPortalPerformancePerGradeNamayeshei2(int? baseYear, int? portalId, int? structureId, int? approachId, string flags);
        List<SpByPortalPerformancePerGradeNamayeshei2ReturnModel> SpByPortalPerformancePerGradeNamayeshei2(int? baseYear, int? portalId, int? structureId, int? approachId, string flags, out int procResult);
        Task<List<SpByPortalPerformancePerGradeNamayeshei2ReturnModel>> SpByPortalPerformancePerGradeNamayeshei2Async(int? baseYear, int? portalId, int? structureId, int? approachId, string flags);

        List<SpByProductionGradesByChannelGroupReturnModel> SpByProductionGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate);
        List<SpByProductionGradesByChannelGroupReturnModel> SpByProductionGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult);
        Task<List<SpByProductionGradesByChannelGroupReturnModel>> SpByProductionGradesByChannelGroupAsync(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate);

        int SpByProductionGradesByChannelGroup2(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate);
        // SpByProductionGradesByChannelGroup2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByProductionProgressReturnModel> SpByProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo);
        List<SpByProductionProgressReturnModel> SpByProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, out int procResult);
        Task<List<SpByProductionProgressReturnModel>> SpByProductionProgressAsync(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo);

        int SpByProductionProgress2(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? keyProductionTotal, int? keyAfterProductionTotal, int? keyBeforeProductionTotal, int? keyWritingTotal, bool? allRecord, int? pageNumber, int? rowsPerPage, out int? totalRowsCount);
        // SpByProductionProgress2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByProductionProgress3(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? productionTotal, int? afterProductionTotal, int? beforeProductionTotal, int? writingTotal, int? pageNumber, int? rowsPerPage, out int? totalRowsCount);
        // SpByProductionProgress3Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByProductNamayeshGradesByChannelGroupReturnModel> SpByProductNamayeshGradesByChannelGroup(int? baseYear, string channelIds, string groupIds);
        List<SpByProductNamayeshGradesByChannelGroupReturnModel> SpByProductNamayeshGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, out int procResult);
        Task<List<SpByProductNamayeshGradesByChannelGroupReturnModel>> SpByProductNamayeshGradesByChannelGroupAsync(int? baseYear, string channelIds, string groupIds);

        List<SpByProductNamayeshGradesByChannelGroup2ReturnModel> SpByProductNamayeshGradesByChannelGroup2(int? baseYear, string channelIds, string groupIds);
        List<SpByProductNamayeshGradesByChannelGroup2ReturnModel> SpByProductNamayeshGradesByChannelGroup2(int? baseYear, string channelIds, string groupIds, out int procResult);
        Task<List<SpByProductNamayeshGradesByChannelGroup2ReturnModel>> SpByProductNamayeshGradesByChannelGroup2Async(int? baseYear, string channelIds, string groupIds);

        List<SpByProgramsFlagReturnModel> SpByProgramsFlag(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags, int? pagesize, int? startrow);
        List<SpByProgramsFlagReturnModel> SpByProgramsFlag(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags, int? pagesize, int? startrow, out int procResult);
        Task<List<SpByProgramsFlagReturnModel>> SpByProgramsFlagAsync(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags, int? pagesize, int? startrow);

        List<SpByProgramsFlagAllReturnModel> SpByProgramsFlagAll(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags);
        List<SpByProgramsFlagAllReturnModel> SpByProgramsFlagAll(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags, out int procResult);
        Task<List<SpByProgramsFlagAllReturnModel>> SpByProgramsFlagAllAsync(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, string flags);

        List<SpByProgramStructuresReturnModel> SpByProgramStructures(int? baseYear, string channelIds);
        List<SpByProgramStructuresReturnModel> SpByProgramStructures(int? baseYear, string channelIds, out int procResult);
        Task<List<SpByProgramStructuresReturnModel>> SpByProgramStructuresAsync(int? baseYear, string channelIds);

        List<SpByProgramStructures2ReturnModel> SpByProgramStructures2(int? baseYear, string channelIds);
        List<SpByProgramStructures2ReturnModel> SpByProgramStructures2(int? baseYear, string channelIds, out int procResult);
        Task<List<SpByProgramStructures2ReturnModel>> SpByProgramStructures2Async(int? baseYear, string channelIds);

        List<SpByRequestAgentsReturnModel> SpByRequestAgents(int? baseYear, int? portalId, int? orderbyWhat);
        List<SpByRequestAgentsReturnModel> SpByRequestAgents(int? baseYear, int? portalId, int? orderbyWhat, out int procResult);
        Task<List<SpByRequestAgentsReturnModel>> SpByRequestAgentsAsync(int? baseYear, int? portalId, int? orderbyWhat);

        List<SpBySubjectL3CloudReturnModel> SpBySubjectL3Cloud(int? baseYear, int? portalId, int? gradeId, int? structureId, string flags);
        List<SpBySubjectL3CloudReturnModel> SpBySubjectL3Cloud(int? baseYear, int? portalId, int? gradeId, int? structureId, string flags, out int procResult);
        Task<List<SpBySubjectL3CloudReturnModel>> SpBySubjectL3CloudAsync(int? baseYear, int? portalId, int? gradeId, int? structureId, string flags);

        List<SpBySubjectPercentReturnModel> SpBySubjectPercent(int? baseYear, string channelIds);
        List<SpBySubjectPercentReturnModel> SpBySubjectPercent(int? baseYear, string channelIds, out int procResult);
        Task<List<SpBySubjectPercentReturnModel>> SpBySubjectPercentAsync(int? baseYear, string channelIds);

        List<SpByTagSubjectReportReturnModel> SpByTagSubjectReport(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds);
        List<SpByTagSubjectReportReturnModel> SpByTagSubjectReport(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds, out int procResult);
        Task<List<SpByTagSubjectReportReturnModel>> SpByTagSubjectReportAsync(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds);

        List<SpByTagSubjectReport2ReturnModel> SpByTagSubjectReport2(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds);
        List<SpByTagSubjectReport2ReturnModel> SpByTagSubjectReport2(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds, out int procResult);
        Task<List<SpByTagSubjectReport2ReturnModel>> SpByTagSubjectReport2Async(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds);

        int SpByTagSubjectReportTemp(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds, int? enableLike);
        // SpByTagSubjectReportTempAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByTagSubjectReportTempDetail(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds, int? requestId, int? enableLike, int? pageNumber, int? rowspPage, out int? totalRowsCount);
        // SpByTagSubjectReportTempDetailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpByTagSubjectReportTempDetailForExcel(int? baseYear, int? portalId, string groupIds, string tagText, string subjectIds, int? requestId, int? enableLike);
        // SpByTagSubjectReportTempDetailForExcelAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpByV2ProgramTopicsReturnModel> SpByV2ProgramTopics(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize);
        List<SpByV2ProgramTopicsReturnModel> SpByV2ProgramTopics(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize, out int procResult);
        Task<List<SpByV2ProgramTopicsReturnModel>> SpByV2ProgramTopicsAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize);

        List<SpByV2ProgramTopicsCountReturnModel> SpByV2ProgramTopicsCount(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id);
        List<SpByV2ProgramTopicsCountReturnModel> SpByV2ProgramTopicsCount(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, out int procResult);
        Task<List<SpByV2ProgramTopicsCountReturnModel>> SpByV2ProgramTopicsCountAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id);

        List<SpByV2ProgramTopicsCountFirstLevelReturnModel> SpByV2ProgramTopicsCountFirstLevel(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id);
        List<SpByV2ProgramTopicsCountFirstLevelReturnModel> SpByV2ProgramTopicsCountFirstLevel(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, out int procResult);
        Task<List<SpByV2ProgramTopicsCountFirstLevelReturnModel>> SpByV2ProgramTopicsCountFirstLevelAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id);

        List<SpByV2ProgramTopicsFirstLevelReturnModel> SpByV2ProgramTopicsFirstLevel(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize);
        List<SpByV2ProgramTopicsFirstLevelReturnModel> SpByV2ProgramTopicsFirstLevel(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize, out int procResult);
        Task<List<SpByV2ProgramTopicsFirstLevelReturnModel>> SpByV2ProgramTopicsFirstLevelAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize);

        List<SpChanelsParticipationReturnModel> SpChanelsParticipation(string portalIds, int? baseYear);
        List<SpChanelsParticipationReturnModel> SpChanelsParticipation(string portalIds, int? baseYear, out int procResult);
        Task<List<SpChanelsParticipationReturnModel>> SpChanelsParticipationAsync(string portalIds, int? baseYear);

        List<SpChannelsApproachReturnModel> SpChannelsApproach(int? baseYear, string channelIds);
        List<SpChannelsApproachReturnModel> SpChannelsApproach(int? baseYear, string channelIds, out int procResult);
        Task<List<SpChannelsApproachReturnModel>> SpChannelsApproachAsync(int? baseYear, string channelIds);

        List<SpChannelsPerformanceReturnModel> SpChannelsPerformance(int? baseYear, string channelIds, int? eventId);
        List<SpChannelsPerformanceReturnModel> SpChannelsPerformance(int? baseYear, string channelIds, int? eventId, out int procResult);
        Task<List<SpChannelsPerformanceReturnModel>> SpChannelsPerformanceAsync(int? baseYear, string channelIds, int? eventId);

        List<SpChannelsproductionReturnModel> SpChannelsproduction(int? baseYear, string channelIds, DateTime? fromdate, DateTime? todate);
        List<SpChannelsproductionReturnModel> SpChannelsproduction(int? baseYear, string channelIds, DateTime? fromdate, DateTime? todate, out int procResult);
        Task<List<SpChannelsproductionReturnModel>> SpChannelsproductionAsync(int? baseYear, string channelIds, DateTime? fromdate, DateTime? todate);

        int SpChannelsProgramsStatus3(int? baseYear, int? portalId, string groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? isTranfered, string hasPrposalStatus, string hasNotPrposalStatus, string hasBaravordStatus, string hasNotBaravordStatus, int? hasEstimate, int? subjectlevel1, int? subjectlevel2, int? startrow, int? pagesize, int? orderbyWhat, int? hasproduction, int? eventId, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, string deliveryDateFrom, string deliveryDateTo, string flags, string productionEndtDate);
        // SpChannelsProgramsStatus3Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpChartsByV2ProgramSubjectsReturnModel> SpChartsByV2ProgramSubjects(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour);
        List<SpChartsByV2ProgramSubjectsReturnModel> SpChartsByV2ProgramSubjects(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour, out int procResult);
        Task<List<SpChartsByV2ProgramSubjectsReturnModel>> SpChartsByV2ProgramSubjectsAsync(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour);

        List<SpChartsByV2ProgramTopicsReturnModel> SpChartsByV2ProgramTopics(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour);
        List<SpChartsByV2ProgramTopicsReturnModel> SpChartsByV2ProgramTopics(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour, out int procResult);
        Task<List<SpChartsByV2ProgramTopicsReturnModel>> SpChartsByV2ProgramTopicsAsync(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour);

        List<SpChartsByV2SubjectsByChannelReturnModel> SpChartsByV2SubjectsByChannel(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour);
        List<SpChartsByV2SubjectsByChannelReturnModel> SpChartsByV2SubjectsByChannel(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour, out int procResult);
        Task<List<SpChartsByV2SubjectsByChannelReturnModel>> SpChartsByV2SubjectsByChannelAsync(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour);

        List<SpChartsByV2SubjectsL2ReturnModel> SpChartsByV2SubjectsL2(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour);
        List<SpChartsByV2SubjectsL2ReturnModel> SpChartsByV2SubjectsL2(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour, out int procResult);
        Task<List<SpChartsByV2SubjectsL2ReturnModel>> SpChartsByV2SubjectsL2Async(int? baseYear, int? portalId, int? gradeId, int? structureId, int? minHour);

        int SpChartsByV2SubjectsTrendL4(int? baseYear, int? portalId, int? gradeId, int? structureId);
        // SpChartsByV2SubjectsTrendL4Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpConductorChannelDetailPakhsh(string fromDate, string toDate);
        // SpConductorChannelDetailPakhshAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpConductorChannelDetailTamin(string fromDate, string toDate);
        // SpConductorChannelDetailTaminAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpConductorTablePakhshReport(int? channelId, int? chGroupId, string fromDate, string toDate);
        // SpConductorTablePakhshReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpConductorTablePakhshReportTotal(int? channelId, int? chGroupId, string fromDate, string toDate);
        // SpConductorTablePakhshReportTotalAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpConductorTableTaminReport(int? channelId, int? chGroupId, string fromDate, string toDate);
        // SpConductorTableTaminReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpConductorTableTaminReportTotal(int? channelId, int? chGroupId, string fromDate, string toDate);
        // SpConductorTableTaminReportTotalAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpConflictBaseYearReturnModel> SpConflictBaseYear(int? requestId);
        List<SpConflictBaseYearReturnModel> SpConflictBaseYear(int? requestId, out int procResult);
        Task<List<SpConflictBaseYearReturnModel>> SpConflictBaseYearAsync(int? requestId);

        List<SpConflictBaseYearReportReturnModel> SpConflictBaseYearReport(int? year, int? portalId, int? groupId);
        List<SpConflictBaseYearReportReturnModel> SpConflictBaseYearReport(int? year, int? portalId, int? groupId, out int procResult);
        Task<List<SpConflictBaseYearReportReturnModel>> SpConflictBaseYearReportAsync(int? year, int? portalId, int? groupId);

        int SpCopyConductor(string fdate, string tdate, int? channelId, int? userId, int? targetWeekNumber, int? targetVersionNumber, bool? copyByTime, TimeSpan? fromS, TimeSpan? fromE, TimeSpan? toS);
        // SpCopyConductorAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpCreateNewVersion(int? channelId, int? weekNumber, int? userId, string fdate, string tdate);
        // SpCreateNewVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpCreateNewVersionPakhsh(int? channelId, int? weekNumber, int? userId, string fdate, string tdate, bool? isB);
        // SpCreateNewVersionPakhshAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpDeatilQualityListReturnModel> SpDeatilQualityList(int? requestId);
        List<SpDeatilQualityListReturnModel> SpDeatilQualityList(int? requestId, out int procResult);
        Task<List<SpDeatilQualityListReturnModel>> SpDeatilQualityListAsync(int? requestId);

        List<SpDetailEventReportReturnModel> SpDetailEventReport(int? portalId, int? baseYear, int? eventId);
        List<SpDetailEventReportReturnModel> SpDetailEventReport(int? portalId, int? baseYear, int? eventId, out int procResult);
        Task<List<SpDetailEventReportReturnModel>> SpDetailEventReportAsync(int? portalId, int? baseYear, int? eventId);

        // SpDetailRequestSubjectReportReturnModel SpDetailRequestSubjectReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subjectsId, int? subsubjectId, int? subjectType); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpDetailRequestSubjectReportReturnModel> SpDetailRequestSubjectReportAsync(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subjectsId, int? subsubjectId, int? subjectType); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // SpDetailSubjectReportReturnModel SpDetailSubjectReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subsubjectId, int? subjectType); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpDetailSubjectReportReturnModel> SpDetailSubjectReportAsync(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subsubjectId, int? subjectType); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        List<SpDeviationRateReturnModel> SpDeviationRate(int? portalId, int? baseYear);
        List<SpDeviationRateReturnModel> SpDeviationRate(int? portalId, int? baseYear, out int procResult);
        Task<List<SpDeviationRateReturnModel>> SpDeviationRateAsync(int? portalId, int? baseYear);

        int SpEpg(int? requestId, int? statusId, string estimateNumer);
        // SpEpgAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEstimateOutline(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted);
        // SpEstimateOutlineAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEvaluationReport(int? baseYear, string program, string licenseNumber, string estimateNo, int? portalId, int? groupId, int? programGradeId, int? structureId, int? structureTypeId, string fromDate, string toDate, bool? isDeleted);
        // SpEvaluationReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpEventReportReturnModel> SpEventReport(int? portalId, int? baseYear, int? eventId);
        List<SpEventReportReturnModel> SpEventReport(int? portalId, int? baseYear, int? eventId, out int procResult);
        Task<List<SpEventReportReturnModel>> SpEventReportAsync(int? portalId, int? baseYear, int? eventId);

        List<SpFullPaymentReportReturnModel> SpFullPaymentReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? hasproduction, int? prodPercentFrom, int? prodPercentto, int? haspayment, int? paymentPercentFrom, int? paymentPercentto, int? orderbywhat, int? approachId);
        List<SpFullPaymentReportReturnModel> SpFullPaymentReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? hasproduction, int? prodPercentFrom, int? prodPercentto, int? haspayment, int? paymentPercentFrom, int? paymentPercentto, int? orderbywhat, int? approachId, out int procResult);
        Task<List<SpFullPaymentReportReturnModel>> SpFullPaymentReportAsync(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? producerId, int? hasproduction, int? prodPercentFrom, int? prodPercentto, int? haspayment, int? paymentPercentFrom, int? paymentPercentto, int? orderbywhat, int? approachId);

        int SpGeneralVu(int? baseYear, string channelIds);
        // SpGeneralVuAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpGeneralVutestTolid(int? baseYear, string channelIds);
        // SpGeneralVutestTolidAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpGetAgentDetail(int? agentId, int? baseYear);
        // SpGetAgentDetailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpGetComparativeLastVersionReturnModel> SpGetComparativeLastVersion(int? weekNumber, string fdate, string tdate, bool? timeafter6);
        List<SpGetComparativeLastVersionReturnModel> SpGetComparativeLastVersion(int? weekNumber, string fdate, string tdate, bool? timeafter6, out int procResult);
        Task<List<SpGetComparativeLastVersionReturnModel>> SpGetComparativeLastVersionAsync(int? weekNumber, string fdate, string tdate, bool? timeafter6);

        List<SpGetComparativeLastVersionTvReturnModel> SpGetComparativeLastVersionTv(int? weekNumber, string fdate, string tdate);
        List<SpGetComparativeLastVersionTvReturnModel> SpGetComparativeLastVersionTv(int? weekNumber, string fdate, string tdate, out int procResult);
        Task<List<SpGetComparativeLastVersionTvReturnModel>> SpGetComparativeLastVersionTvAsync(int? weekNumber, string fdate, string tdate);

        int SpGetConductorBox(int? channelId, string fromDate, string toDate, int? pageNum, int? pageSize, out int? totalCount);
        // SpGetConductorBoxAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpGetConductorBoxItems(int? conductorBoxId, int? pageNum, int? pageSize, out int? totalCount);
        // SpGetConductorBoxItemsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpGetConductorBoxRequest(int? channelId, string clipArtTitle, int? clipArtStatusId, int? clipArtTypeId, int? pageNum, int? pageSize, out int? totalCount);
        // SpGetConductorBoxRequestAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpGetConductorBoxRequestPrograms(int? detailTypeId, int? channelId, string clipArtTitle, int? clipArtTypeId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime, string duration, string eventTitle, string clipArtSubject, string requestUnitTitle, string tag, int? boxNumber, int? pageNum, int? pageSize, out int? totalCount);
        // SpGetConductorBoxRequestProgramsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpGetConductorBoxTemplatePerChannel(int? channelId, string fromDate, string toDate, int? pageNum, int? pageSize, out int? totalCount);
        // SpGetConductorBoxTemplatePerChannelAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpGetConductorBoxUsageReturnModel> SpGetConductorBoxUsage(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime);
        List<SpGetConductorBoxUsageReturnModel> SpGetConductorBoxUsage(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime, out int procResult);
        Task<List<SpGetConductorBoxUsageReturnModel>> SpGetConductorBoxUsageAsync(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime);

        List<SpGetConductorBoxUsagePerTypeReturnModel> SpGetConductorBoxUsagePerType(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime);
        List<SpGetConductorBoxUsagePerTypeReturnModel> SpGetConductorBoxUsagePerType(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime, out int procResult);
        Task<List<SpGetConductorBoxUsagePerTypeReturnModel>> SpGetConductorBoxUsagePerTypeAsync(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string fromTime, string toTime);

        List<SpGetConductorByProgramIdReturnModel> SpGetConductorByProgramId(int? progid, string fromDate, string toDate, int? simaUserChId);
        List<SpGetConductorByProgramIdReturnModel> SpGetConductorByProgramId(int? progid, string fromDate, string toDate, int? simaUserChId, out int procResult);
        Task<List<SpGetConductorByProgramIdReturnModel>> SpGetConductorByProgramIdAsync(int? progid, string fromDate, string toDate, int? simaUserChId);

        List<SpGetEpgMediaConductorReturnModel> SpGetEpgMediaConductor(string date, int? channelId);
        List<SpGetEpgMediaConductorReturnModel> SpGetEpgMediaConductor(string date, int? channelId, out int procResult);
        Task<List<SpGetEpgMediaConductorReturnModel>> SpGetEpgMediaConductorAsync(string date, int? channelId);

        List<SpGetEpgNetworksReturnModel> SpGetEpgNetworks();
        List<SpGetEpgNetworksReturnModel> SpGetEpgNetworks(out int procResult);
        Task<List<SpGetEpgNetworksReturnModel>> SpGetEpgNetworksAsync();

        List<SpGetFileAutoNumberReturnModel> SpGetFileAutoNumber(string uidLevel, string estimateGid, string theDate);
        List<SpGetFileAutoNumberReturnModel> SpGetFileAutoNumber(string uidLevel, string estimateGid, string theDate, out int procResult);
        Task<List<SpGetFileAutoNumberReturnModel>> SpGetFileAutoNumberAsync(string uidLevel, string estimateGid, string theDate);

        int SpGetPakhshProgramDetailClacketReport(int? programId, int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, int? pageNum, int? pageSize, out int? totalCount, out int? durationSum, out int? repeatDurationSum, out int? nonRepeatDurationSum, out int? repeatCount);
        // SpGetPakhshProgramDetailClacketReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpGetPakhshProgramDetailReport(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, string whichLabel, int? whichValue, int? pageNum, int? pageSize, out int? totalCount);
        // SpGetPakhshProgramDetailReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpGetPakhshProgramReportReturnModel> SpGetPakhshProgramReport(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian);
        List<SpGetPakhshProgramReportReturnModel> SpGetPakhshProgramReport(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, out int procResult);
        Task<List<SpGetPakhshProgramReportReturnModel>> SpGetPakhshProgramReportAsync(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian);

        List<SpGetPlanTopicsHierarchyReturnModel> SpGetPlanTopicsHierarchy(int? portalId, int? requestId);
        List<SpGetPlanTopicsHierarchyReturnModel> SpGetPlanTopicsHierarchy(int? portalId, int? requestId, out int procResult);
        Task<List<SpGetPlanTopicsHierarchyReturnModel>> SpGetPlanTopicsHierarchyAsync(int? portalId, int? requestId);

        List<SpGetProgramDetailReturnModel> SpGetProgramDetail(int? programId);
        List<SpGetProgramDetailReturnModel> SpGetProgramDetail(int? programId, out int procResult);
        Task<List<SpGetProgramDetailReturnModel>> SpGetProgramDetailAsync(int? programId);

        List<SpGetSubjectsReturnModel> SpGetSubjects();
        List<SpGetSubjectsReturnModel> SpGetSubjects(out int procResult);
        Task<List<SpGetSubjectsReturnModel>> SpGetSubjectsAsync();

        int SpGetTaminProgramDetailReport(int? programId, int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, int? pageNum, int? pageSize, out int? totalCount, out int? durationSum, out int? repeatDurationSum, out int? nonRepeatDurationSum, out int? repeatCount);
        // SpGetTaminProgramDetailReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpGetTaminProgramReport(int? channelId, string fromDate, string toDate, string fromDatePersian, string toDatePersian, int? pageNum, int? pageSize, out int? totalCount);
        // SpGetTaminProgramReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpGetVersionsReturnModel> SpGetVersions(int? channelId, int? weekNumber, string fdate, string tdate);
        List<SpGetVersionsReturnModel> SpGetVersions(int? channelId, int? weekNumber, string fdate, string tdate, out int procResult);
        Task<List<SpGetVersionsReturnModel>> SpGetVersionsAsync(int? channelId, int? weekNumber, string fdate, string tdate);

        List<SpGetVersionsPakhshReturnModel> SpGetVersionsPakhsh(int? channelId, int? weekNumber, string fdate, string tdate, bool? isB);
        List<SpGetVersionsPakhshReturnModel> SpGetVersionsPakhsh(int? channelId, int? weekNumber, string fdate, string tdate, bool? isB, out int procResult);
        Task<List<SpGetVersionsPakhshReturnModel>> SpGetVersionsPakhshAsync(int? channelId, int? weekNumber, string fdate, string tdate, bool? isB);

        List<SpGradeByChannelsReturnModel> SpGradeByChannels(int? baseYear, string channelIds);
        List<SpGradeByChannelsReturnModel> SpGradeByChannels(int? baseYear, string channelIds, out int procResult);
        Task<List<SpGradeByChannelsReturnModel>> SpGradeByChannelsAsync(int? baseYear, string channelIds);

        List<SpGroupPerformancePerGradeReturnModel> SpGroupPerformancePerGrade(int? baseYear, int? groupId);
        List<SpGroupPerformancePerGradeReturnModel> SpGroupPerformancePerGrade(int? baseYear, int? groupId, out int procResult);
        Task<List<SpGroupPerformancePerGradeReturnModel>> SpGroupPerformancePerGradeAsync(int? baseYear, int? groupId);

        int SpGroupsproduction(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate);
        // SpGroupsproductionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpGroupsproductionNamayesheiReturnModel> SpGroupsproductionNamayeshei(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate);
        List<SpGroupsproductionNamayesheiReturnModel> SpGroupsproductionNamayeshei(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult);
        Task<List<SpGroupsproductionNamayesheiReturnModel>> SpGroupsproductionNamayesheiAsync(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate);

        List<SpGroupsproductionNamayeshei2ReturnModel> SpGroupsproductionNamayeshei2(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate);
        List<SpGroupsproductionNamayeshei2ReturnModel> SpGroupsproductionNamayeshei2(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult);
        Task<List<SpGroupsproductionNamayeshei2ReturnModel>> SpGroupsproductionNamayeshei2Async(int? baseYear, int? portalId, string groupIds, DateTime? fromdate, DateTime? todate);

        // SpModulePermissionsByUserGroupsReturnModel SpModulePermissionsByUserGroups(int? userTypeGroupId, int? moduleDefinitionId, bool? isAllModules, int? moduleId); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpModulePermissionsByUserGroupsReturnModel> SpModulePermissionsByUserGroupsAsync(int? userTypeGroupId, int? moduleDefinitionId, bool? isAllModules, int? moduleId); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // SpMojriActivityReturnModel SpMojriActivity(string fromDate, string toDate, int? active); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpMojriActivityReturnModel> SpMojriActivityAsync(string fromDate, string toDate, int? active); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // SpMojriActivityDetailReturnModel SpMojriActivityDetail(string fromDate, string toDate, int? active, int? portalId); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpMojriActivityDetailReturnModel> SpMojriActivityDetailAsync(string fromDate, string toDate, int? active, int? portalId); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        List<SpMojriListReportReturnModel> SpMojriListReport(int? portalId, int? agentId, string fromDate, string toDate, int? active);
        List<SpMojriListReportReturnModel> SpMojriListReport(int? portalId, int? agentId, string fromDate, string toDate, int? active, out int procResult);
        Task<List<SpMojriListReportReturnModel>> SpMojriListReportAsync(int? portalId, int? agentId, string fromDate, string toDate, int? active);

        List<SpMojriPerformanceReturnModel> SpMojriPerformance(int? portalId, int? year);
        List<SpMojriPerformanceReturnModel> SpMojriPerformance(int? portalId, int? year, out int procResult);
        Task<List<SpMojriPerformanceReturnModel>> SpMojriPerformanceAsync(int? portalId, int? year);

        List<SpMojriProgramReportReturnModel> SpMojriProgramReport(int? mojriId);
        List<SpMojriProgramReportReturnModel> SpMojriProgramReport(int? mojriId, out int procResult);
        Task<List<SpMojriProgramReportReturnModel>> SpMojriProgramReportAsync(int? mojriId);

        List<SpMojriProgramsReturnModel> SpMojriPrograms(int? mojriId);
        List<SpMojriProgramsReturnModel> SpMojriPrograms(int? mojriId, out int procResult);
        Task<List<SpMojriProgramsReturnModel>> SpMojriProgramsAsync(int? mojriId);

        List<SpNamayeshiProgramsStatusReturnModel> SpNamayeshiProgramsStatus(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureTypeId, int? eventId, int? writingProgressFrom, int? writingProgressTo, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, int? isTransfered);
        List<SpNamayeshiProgramsStatusReturnModel> SpNamayeshiProgramsStatus(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureTypeId, int? eventId, int? writingProgressFrom, int? writingProgressTo, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, int? isTransfered, out int procResult);
        Task<List<SpNamayeshiProgramsStatusReturnModel>> SpNamayeshiProgramsStatusAsync(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureTypeId, int? eventId, int? writingProgressFrom, int? writingProgressTo, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, int? isTransfered);

        int SpNamayeshiProgramsStatus2(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureTypeId, int? eventId, int? writingProgressFrom, int? writingProgressTo, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, int? isTransfered, int? keyProductionTotal, int? keyAfterProductionTotal, int? keyBeforeProductionTotal, int? keyWritingTotal, string keyProgrammingPart, bool? allRecord, int? pageNumber, int? rowsPerPage, out int? totalRowsCount);
        // SpNamayeshiProgramsStatus2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpNamayeshiProgramsStatus3(int? baseYear, int? portalId, int? groupId, string progname, string estimateNo, string licenseNo, int? gradeId, int? structureTypeId, int? eventId, int? writingProgressFrom, int? writingProgressTo, int? productionProgressFrom, int? productionProgressTo, int? playProgressFrom, int? playProgressTo, int? paymentProgressFrom, int? paymentProgressTo, int? isTransfered, int? keyProductionTotal, int? keyAfterProductionTotal, int? keyBeforeProductionTotal, int? keyWritingTotal, string keyProgrammingPart, bool? allRecord, int? pageNumber, int? rowsPerPage, out int? totalRowsCount);
        // SpNamayeshiProgramsStatus3Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpPaymentReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, string producerName, int? hasproduction, int? prodPercentFrom, int? prodPercentto, int? haspayment, int? paymentPercentFrom, int? paymentPercentto, int? orderbywhat);
        // SpPaymentReportAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpPerformanceOfGroupByGradeAndChannelIdReturnModel> SpPerformanceOfGroupByGradeAndChannelId(int? baseYear, int? channelIds, int? gradeId, int? structureId);
        List<SpPerformanceOfGroupByGradeAndChannelIdReturnModel> SpPerformanceOfGroupByGradeAndChannelId(int? baseYear, int? channelIds, int? gradeId, int? structureId, out int procResult);
        Task<List<SpPerformanceOfGroupByGradeAndChannelIdReturnModel>> SpPerformanceOfGroupByGradeAndChannelIdAsync(int? baseYear, int? channelIds, int? gradeId, int? structureId);

        List<SpPortalPerformancePerGradeReturnModel> SpPortalPerformancePerGrade(int? baseYear, int? portalId, int? structureId, int? approachId);
        List<SpPortalPerformancePerGradeReturnModel> SpPortalPerformancePerGrade(int? baseYear, int? portalId, int? structureId, int? approachId, out int procResult);
        Task<List<SpPortalPerformancePerGradeReturnModel>> SpPortalPerformancePerGradeAsync(int? baseYear, int? portalId, int? structureId, int? approachId);

        // SpPortalPerformanceTimeBudgetReturnModel SpPortalPerformanceTimeBudget(int? baseYear, int? portalId); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpPortalPerformanceTimeBudgetReturnModel> SpPortalPerformanceTimeBudgetAsync(int? baseYear, int? portalId); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        int SpPortalPerformanceTimeBudget2(int? baseYear, int? portalId);
        // SpPortalPerformanceTimeBudget2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpProducerInfoReturnModel> SpProducerInfo(int? agentId);
        List<SpProducerInfoReturnModel> SpProducerInfo(int? agentId, out int procResult);
        Task<List<SpProducerInfoReturnModel>> SpProducerInfoAsync(int? agentId);

        // SpProducerListReportReturnModel SpProducerListReport(int? portalId, int? agentId, string fromDate, string toDate, int? statusId); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpProducerListReportReturnModel> SpProducerListReportAsync(int? portalId, int? agentId, string fromDate, string toDate, int? statusId); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // SpProducerReportReturnModel SpProducerReport(int? portalId, int? agentId, string fromDate, string toDate, int? statusId); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpProducerReportReturnModel> SpProducerReportAsync(int? portalId, int? agentId, string fromDate, string toDate, int? statusId); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // SpProductionAgentReturnModel SpProductionAgent(int? logId, int? typeId, int? step); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpProductionAgentReturnModel> SpProductionAgentAsync(int? logId, int? typeId, int? step); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // SpProductionAgentByLogIdReturnModel SpProductionAgentByLogId(int? logId, int? typeId, int? step); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpProductionAgentByLogIdReturnModel> SpProductionAgentByLogIdAsync(int? logId, int? typeId, int? step); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        List<SpProductionGradesByChannelGroupReturnModel> SpProductionGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate);
        List<SpProductionGradesByChannelGroupReturnModel> SpProductionGradesByChannelGroup(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate, out int procResult);
        Task<List<SpProductionGradesByChannelGroupReturnModel>> SpProductionGradesByChannelGroupAsync(int? baseYear, string channelIds, string groupIds, DateTime? fromdate, DateTime? todate);

        int SpProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted);
        // SpProductionProgressAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpProductionProgressByRequestIdReturnModel> SpProductionProgressByRequestId(int? requestId);
        List<SpProductionProgressByRequestIdReturnModel> SpProductionProgressByRequestId(int? requestId, out int procResult);
        Task<List<SpProductionProgressByRequestIdReturnModel>> SpProductionProgressByRequestIdAsync(int? requestId);

        List<SpProgramParticipationReturnModel> SpProgramParticipation(int? baseYear, int? portalIds);
        List<SpProgramParticipationReturnModel> SpProgramParticipation(int? baseYear, int? portalIds, out int procResult);
        Task<List<SpProgramParticipationReturnModel>> SpProgramParticipationAsync(int? baseYear, int? portalIds);

        List<SpProgramsQualityListReturnModel> SpProgramsQualityList(int? baseYear, int? portalId, int? groupId, string progname, string producer, int? pagesize, int? startrow);
        List<SpProgramsQualityListReturnModel> SpProgramsQualityList(int? baseYear, int? portalId, int? groupId, string progname, string producer, int? pagesize, int? startrow, out int procResult);
        Task<List<SpProgramsQualityListReturnModel>> SpProgramsQualityListAsync(int? baseYear, int? portalId, int? groupId, string progname, string producer, int? pagesize, int? startrow);

        List<SpProgramsQualityListAllReturnModel> SpProgramsQualityListAll(int? baseYear, int? portalId, int? groupId, string progname, string producer);
        List<SpProgramsQualityListAllReturnModel> SpProgramsQualityListAll(int? baseYear, int? portalId, int? groupId, string progname, string producer, out int procResult);
        Task<List<SpProgramsQualityListAllReturnModel>> SpProgramsQualityListAllAsync(int? baseYear, int? portalId, int? groupId, string progname, string producer);

        List<SpProgramStructuresReturnModel> SpProgramStructures(int? baseYear, string channelIds);
        List<SpProgramStructuresReturnModel> SpProgramStructures(int? baseYear, string channelIds, out int procResult);
        Task<List<SpProgramStructuresReturnModel>> SpProgramStructuresAsync(int? baseYear, string channelIds);

        // SpProgramSubjectsReturnModel SpProgramSubjects(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? isTransfered, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpProgramSubjectsReturnModel> SpProgramSubjectsAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? isTransfered, int? structureId, int? l1Id, int? l2Id, int? l3Id, int? startrow, int? pagesize); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // SpProgramSubjectsCountReturnModel SpProgramSubjectsCount(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? isTransfered, int? structureId, int? l1Id, int? l2Id, int? l3Id); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpProgramSubjectsCountReturnModel> SpProgramSubjectsCountAsync(int? baseYear, int? portalId, string groupId, string progname, string licenseNo, string estimateNo, int? gradeId, int? isTransfered, int? structureId, int? l1Id, int? l2Id, int? l3Id); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        List<SpQualityByPortalReturnModel> SpQualityByPortal(int? baseYear, int? portalId);
        List<SpQualityByPortalReturnModel> SpQualityByPortal(int? baseYear, int? portalId, out int procResult);
        Task<List<SpQualityByPortalReturnModel>> SpQualityByPortalAsync(int? baseYear, int? portalId);

        int SpReleaseConductor(int? channelId, int? weekNumber, string fdate, string tdate);
        // SpReleaseConductorAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpReleaseConductorPakhsh(int? channelId, int? weekNumber, string fdate, string tdate, bool? isB);
        // SpReleaseConductorPakhshAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpRequestAgents(int? baseYear, int? portalId, int? orderbyWhat);
        // SpRequestAgentsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpRequestBaseYear(int? requestId, out int? result);
        // SpRequestBaseYearAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpRequestCountProduction(int? requestId, out int? result);
        // SpRequestCountProductionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpRequestLog(int? requestId, out int? result);
        // SpRequestLogAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpRequestLogDesc(int? requestId, out string result);
        // SpRequestLogDescAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpRequestPaymentLog(int? requestId, out int? result);
        // SpRequestPaymentLogAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpRequestProductionProgressReturnModel> SpRequestProductionProgress(int? requestId);
        List<SpRequestProductionProgressReturnModel> SpRequestProductionProgress(int? requestId, out int procResult);
        Task<List<SpRequestProductionProgressReturnModel>> SpRequestProductionProgressAsync(int? requestId);

        // SpRequestProductionSubjectReportReturnModel SpRequestProductionSubjectReport(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subjectsId, int? subsubjectId, int? subjectType); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SpRequestProductionSubjectReportReturnModel> SpRequestProductionSubjectReportAsync(int? baseYear, int? portalId, DateTime? fromDate, DateTime? toDate, int? subjectsId, int? subsubjectId, int? subjectType); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        List<SpSamtAllPlanTopicTimeReturnModel> SpSamtAllPlanTopicTime(int? planId, int? portalId, int? baseYear);
        List<SpSamtAllPlanTopicTimeReturnModel> SpSamtAllPlanTopicTime(int? planId, int? portalId, int? baseYear, out int procResult);
        Task<List<SpSamtAllPlanTopicTimeReturnModel>> SpSamtAllPlanTopicTimeAsync(int? planId, int? portalId, int? baseYear);

        List<SpSamtAllPlanTopicTimeL2ReturnModel> SpSamtAllPlanTopicTimeL2(int? planId, int? portalId, int? baseYear);
        List<SpSamtAllPlanTopicTimeL2ReturnModel> SpSamtAllPlanTopicTimeL2(int? planId, int? portalId, int? baseYear, out int procResult);
        Task<List<SpSamtAllPlanTopicTimeL2ReturnModel>> SpSamtAllPlanTopicTimeL2Async(int? planId, int? portalId, int? baseYear);

        List<SpSamtAllPortalsTimeFailReturnModel> SpSamtAllPortalsTimeFail(int? baseYear, int? portalId, int? topicId);
        List<SpSamtAllPortalsTimeFailReturnModel> SpSamtAllPortalsTimeFail(int? baseYear, int? portalId, int? topicId, out int procResult);
        Task<List<SpSamtAllPortalsTimeFailReturnModel>> SpSamtAllPortalsTimeFailAsync(int? baseYear, int? portalId, int? topicId);

        int SpSamtFetchData();
        // SpSamtFetchDataAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpSamtPortalPlanTopicReturnModel> SpSamtPortalPlanTopic(int? planId, int? baseYear);
        List<SpSamtPortalPlanTopicReturnModel> SpSamtPortalPlanTopic(int? planId, int? baseYear, out int procResult);
        Task<List<SpSamtPortalPlanTopicReturnModel>> SpSamtPortalPlanTopicAsync(int? planId, int? baseYear);

        List<SpSamtRunTimeChanelsReturnModel> SpSamtRunTimeChanels(int? objectId, int? isActive, int? baseYear);
        List<SpSamtRunTimeChanelsReturnModel> SpSamtRunTimeChanels(int? objectId, int? isActive, int? baseYear, out int procResult);
        Task<List<SpSamtRunTimeChanelsReturnModel>> SpSamtRunTimeChanelsAsync(int? objectId, int? isActive, int? baseYear);

        List<SpSearchConductorReturnModel> SpSearchConductor(string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, int? orderbyWhat);
        List<SpSearchConductorReturnModel> SpSearchConductor(string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, int? orderbyWhat, out int procResult);
        Task<List<SpSearchConductorReturnModel>> SpSearchConductorAsync(string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, int? orderbyWhat);

        List<SpSearchRegieConductorReturnModel> SpSearchRegieConductor(string clipArtSubject, string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, bool? isBroadcast, int? orderbyWhat, int? justNotRepeats, int? searchType, int? isLive, string tapeNumber, string estimateNumber);
        List<SpSearchRegieConductorReturnModel> SpSearchRegieConductor(string clipArtSubject, string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, bool? isBroadcast, int? orderbyWhat, int? justNotRepeats, int? searchType, int? isLive, string tapeNumber, string estimateNumber, out int procResult);
        Task<List<SpSearchRegieConductorReturnModel>> SpSearchRegieConductorAsync(string clipArtSubject, string progName, string fromDate, string toDate, int? simaUserChId, int? chGroupId, bool? isBroadcast, int? orderbyWhat, int? justNotRepeats, int? searchType, int? isLive, string tapeNumber, string estimateNumber);

        List<SpSearchRegieConductorBySpecificVersionReturnModel> SpSearchRegieConductorBySpecificVersion(string broadcastDate, int? simaUserChId, int? vNum, bool? isClipArt);
        List<SpSearchRegieConductorBySpecificVersionReturnModel> SpSearchRegieConductorBySpecificVersion(string broadcastDate, int? simaUserChId, int? vNum, bool? isClipArt, out int procResult);
        Task<List<SpSearchRegieConductorBySpecificVersionReturnModel>> SpSearchRegieConductorBySpecificVersionAsync(string broadcastDate, int? simaUserChId, int? vNum, bool? isClipArt);

        List<SpShiftCheckShiftTimeOverlapReturnModel> SpShiftCheckShiftTimeOverlap(int? id, int? portalId, int? shiftTypeId, TimeSpan? startTime, TimeSpan? endTime);
        List<SpShiftCheckShiftTimeOverlapReturnModel> SpShiftCheckShiftTimeOverlap(int? id, int? portalId, int? shiftTypeId, TimeSpan? startTime, TimeSpan? endTime, out int procResult);
        Task<List<SpShiftCheckShiftTimeOverlapReturnModel>> SpShiftCheckShiftTimeOverlapAsync(int? id, int? portalId, int? shiftTypeId, TimeSpan? startTime, TimeSpan? endTime);

        int SpShiftGetShiftByPortalId(int? portalId);
        // SpShiftGetShiftByPortalIdAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpSimaRightSideGauges(int? baseYear);
        // SpSimaRightSideGaugesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpSubjectPercent(int? baseYear, string channelIds);
        // SpSubjectPercentAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        // SptablesReturnModel Sptables(); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<SptablesReturnModel> SptablesAsync(); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        List<SpTotalProductionProgressReturnModel> SpTotalProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? totalProgressFrom, int? totalProgressTo);
        List<SpTotalProductionProgressReturnModel> SpTotalProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? totalProgressFrom, int? totalProgressTo, out int procResult);
        Task<List<SpTotalProductionProgressReturnModel>> SpTotalProductionProgressAsync(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? totalProgressFrom, int? totalProgressTo);

        int SpTotalProductionProgress2(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, int? beforeProgressFrom, int? beforeProgressTo, int? durringProgressFrom, int? durringProgressTo, int? afterProgressFrom, int? afterProgressTo, int? totalProgressFrom, int? totalProgressTo, int? keyProductionTotal, int? keyAfterProductionTotal, int? keyBeforeProductionTotal, int? keyWritingTotal, string keyProgrammingPart, bool? allRecord, int? pageNumber, int? rowsPerPage, out int? totalRowsCount);
        // SpTotalProductionProgress2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpUserHitReportReturnModel> SpUserHitReport(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit, int? orderbyWhat);
        List<SpUserHitReportReturnModel> SpUserHitReport(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit, int? orderbyWhat, out int procResult);
        Task<List<SpUserHitReportReturnModel>> SpUserHitReportAsync(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit, int? orderbyWhat);

        List<SpUserHitReport2ReturnModel> SpUserHitReport2(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit);
        List<SpUserHitReport2ReturnModel> SpUserHitReport2(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit, out int procResult);
        Task<List<SpUserHitReport2ReturnModel>> SpUserHitReport2Async(int? portalId, int? userId, int? userGroupId, DateTime? fromdate, DateTime? todate, int? hasVisit);

        List<SpUsersHitReportReturnModel> SpUsersHitReport();
        List<SpUsersHitReportReturnModel> SpUsersHitReport(out int procResult);
        Task<List<SpUsersHitReportReturnModel>> SpUsersHitReportAsync();

        List<SpV2ProductionFlowByDateReturnModel> SpV2ProductionFlowByDate(string portalIDs, string fromdate, string todate);
        List<SpV2ProductionFlowByDateReturnModel> SpV2ProductionFlowByDate(string portalIDs, string fromdate, string todate, out int procResult);
        Task<List<SpV2ProductionFlowByDateReturnModel>> SpV2ProductionFlowByDateAsync(string portalIDs, string fromdate, string todate);

        List<SpWriteProductionProgressReturnModel> SpWriteProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo);
        List<SpWriteProductionProgressReturnModel> SpWriteProductionProgress(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo, out int procResult);
        Task<List<SpWriteProductionProgressReturnModel>> SpWriteProductionProgressAsync(int? baseYear, int? portalId, string fromDate, string toDate, string groupId, string progname, string estimateNo, int? gradeId, int? structureId, int? structureTypeId, bool? justDeleted, int? writingProgressFrom, int? writingProgressTo);

    }
}
// </auto-generated>
