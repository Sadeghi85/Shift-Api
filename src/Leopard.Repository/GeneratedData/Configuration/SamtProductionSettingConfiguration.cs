// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Leopard.Repository
{
    // SAMT_ProductionSettings
    public partial class SamtProductionSettingConfiguration : IEntityTypeConfiguration<SamtProductionSetting>
    {
        public void Configure(EntityTypeBuilder<SamtProductionSetting> builder)
        {
            builder.ToTable("SAMT_ProductionSettings", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_SAMT_ProductionSettings").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.VersionId).HasColumnName(@"VersionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.StructureTypeId).HasColumnName(@"StructureTypeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.StructureId).HasColumnName(@"StructureID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SubStructureId).HasColumnName(@"SubStructureID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.GradeId).HasColumnName(@"GradeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LastModifiedDateTime).HasColumnName(@"LastModifiedDateTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.SamtGrade).WithMany(b => b.SamtProductionSettings).HasForeignKey(c => c.GradeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SAMT_ProductionSettings_SAMT_Grades");
            builder.HasOne(a => a.SamtProductionSetting1).WithOne(b => b.SamtProductionSetting2).HasForeignKey<SamtProductionSetting>(c => c.Id).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SAMT_ProductionSettings_SAMT_ProductionSettings");
            builder.HasOne(a => a.SamtProductionSettingVersion).WithMany(b => b.SamtProductionSettings).HasForeignKey(c => c.VersionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SAMT_ProductionSettings_SAMT_ProductionSettingVersions");
            builder.HasOne(a => a.SamtStructure).WithMany(b => b.SamtProductionSettings).HasForeignKey(c => c.StructureId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SAMT_ProductionSettings_SAMT_Structures");
            builder.HasOne(a => a.SamtStructureType).WithMany(b => b.SamtProductionSettings).HasForeignKey(c => c.StructureTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SAMT_ProductionSettings_SAMT_StructureTypes");
            builder.HasOne(a => a.SamtSubStructure).WithMany(b => b.SamtProductionSettings).HasForeignKey(c => c.SubStructureId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SAMT_ProductionSettings_SAMT_SubStructures");

            InitializePartial(builder);
        }

        partial void InitializePartial(EntityTypeBuilder<SamtProductionSetting> builder);
    }

}
// </auto-generated>
