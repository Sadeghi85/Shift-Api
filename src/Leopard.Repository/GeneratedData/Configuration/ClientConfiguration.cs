// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Leopard.Repository
{
    // Clients
    public partial class ClientConfiguration : IEntityTypeConfiguration<Client>
    {
        public void Configure(EntityTypeBuilder<Client> builder)
        {
            builder.ToTable("Clients", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Clients").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ClientId).HasColumnName(@"ClientId").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.ProtocolType).HasColumnName(@"ProtocolType").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.RequireClientSecret).HasColumnName(@"RequireClientSecret").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ClientName).HasColumnName(@"ClientName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.ClientUri).HasColumnName(@"ClientUri").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.LogoUri).HasColumnName(@"LogoUri").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.RequireConsent).HasColumnName(@"RequireConsent").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AllowRememberConsent).HasColumnName(@"AllowRememberConsent").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AlwaysIncludeUserClaimsInIdToken).HasColumnName(@"AlwaysIncludeUserClaimsInIdToken").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RequirePkce).HasColumnName(@"RequirePkce").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AllowPlainTextPkce).HasColumnName(@"AllowPlainTextPkce").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RequireRequestObject).HasColumnName(@"RequireRequestObject").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AllowAccessTokensViaBrowser).HasColumnName(@"AllowAccessTokensViaBrowser").HasColumnType("bit").IsRequired();
            builder.Property(x => x.FrontChannelLogoutUri).HasColumnName(@"FrontChannelLogoutUri").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.FrontChannelLogoutSessionRequired).HasColumnName(@"FrontChannelLogoutSessionRequired").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BackChannelLogoutUri).HasColumnName(@"BackChannelLogoutUri").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.BackChannelLogoutSessionRequired).HasColumnName(@"BackChannelLogoutSessionRequired").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AllowOfflineAccess).HasColumnName(@"AllowOfflineAccess").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IdentityTokenLifetime).HasColumnName(@"IdentityTokenLifetime").HasColumnType("int").IsRequired();
            builder.Property(x => x.AllowedIdentityTokenSigningAlgorithms).HasColumnName(@"AllowedIdentityTokenSigningAlgorithms").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.AccessTokenLifetime).HasColumnName(@"AccessTokenLifetime").HasColumnType("int").IsRequired();
            builder.Property(x => x.AuthorizationCodeLifetime).HasColumnName(@"AuthorizationCodeLifetime").HasColumnType("int").IsRequired();
            builder.Property(x => x.ConsentLifetime).HasColumnName(@"ConsentLifetime").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AbsoluteRefreshTokenLifetime).HasColumnName(@"AbsoluteRefreshTokenLifetime").HasColumnType("int").IsRequired();
            builder.Property(x => x.SlidingRefreshTokenLifetime).HasColumnName(@"SlidingRefreshTokenLifetime").HasColumnType("int").IsRequired();
            builder.Property(x => x.RefreshTokenUsage).HasColumnName(@"RefreshTokenUsage").HasColumnType("int").IsRequired();
            builder.Property(x => x.UpdateAccessTokenClaimsOnRefresh).HasColumnName(@"UpdateAccessTokenClaimsOnRefresh").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RefreshTokenExpiration).HasColumnName(@"RefreshTokenExpiration").HasColumnType("int").IsRequired();
            builder.Property(x => x.AccessTokenType).HasColumnName(@"AccessTokenType").HasColumnType("int").IsRequired();
            builder.Property(x => x.EnableLocalLogin).HasColumnName(@"EnableLocalLogin").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IncludeJwtId).HasColumnName(@"IncludeJwtId").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AlwaysSendClientClaims).HasColumnName(@"AlwaysSendClientClaims").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ClientClaimsPrefix).HasColumnName(@"ClientClaimsPrefix").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.PairWiseSubjectSalt).HasColumnName(@"PairWiseSubjectSalt").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.Updated).HasColumnName(@"Updated").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastAccessed).HasColumnName(@"LastAccessed").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.UserSsoLifetime).HasColumnName(@"UserSsoLifetime").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserCodeType).HasColumnName(@"UserCodeType").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.DeviceCodeLifetime).HasColumnName(@"DeviceCodeLifetime").HasColumnType("int").IsRequired();
            builder.Property(x => x.NonEditable).HasColumnName(@"NonEditable").HasColumnType("bit").IsRequired();

            InitializePartial(builder);
        }

        partial void InitializePartial(EntityTypeBuilder<Client> builder);
    }

}
// </auto-generated>
